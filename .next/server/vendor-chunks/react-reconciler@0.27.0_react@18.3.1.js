"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-reconciler@0.27.0_react@18.3.1";
exports.ids = ["vendor-chunks/react-reconciler@0.27.0_react@18.3.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/react-reconciler@0.27.0_react@18.3.1/node_modules/react-reconciler/cjs/react-reconciler-constants.development.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-reconciler@0.27.0_react@18.3.1/node_modules/react-reconciler/cjs/react-reconciler-constants.development.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * @license React\n * react-reconciler-constants.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var SyncLane = /*                        */ 1;\n        var InputContinuousLane = /*            */ 4;\n        var DefaultLane = /*                    */ 16;\n        var IdleLane = /*                       */ 536870912;\n        var DiscreteEventPriority = SyncLane;\n        var ContinuousEventPriority = InputContinuousLane;\n        var DefaultEventPriority = DefaultLane;\n        var IdleEventPriority = IdleLane;\n        var LegacyRoot = 0;\n        var ConcurrentRoot = 1;\n        exports.ConcurrentRoot = ConcurrentRoot;\n        exports.ContinuousEventPriority = ContinuousEventPriority;\n        exports.DefaultEventPriority = DefaultEventPriority;\n        exports.DiscreteEventPriority = DiscreteEventPriority;\n        exports.IdleEventPriority = IdleEventPriority;\n        exports.LegacyRoot = LegacyRoot;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcmVhY3QtcmVjb25jaWxlckAwLjI3LjBfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9yZWFjdC1yZWNvbmNpbGVyL2Nqcy9yZWFjdC1yZWNvbmNpbGVyLWNvbnN0YW50cy5kZXZlbG9wbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Q0FRQyxHQUVEO0FBRUEsSUFBSUEsSUFBcUMsRUFBRTtJQUN4QztRQUNIO1FBRUEsSUFBSUMsV0FDSiwwQkFBMEIsR0FDMUI7UUFDQSxJQUFJQyxzQkFDSixjQUFjLEdBQ2Q7UUFDQSxJQUFJQyxjQUNKLHNCQUFzQixHQUN0QjtRQUNBLElBQUlDLFdBQ0oseUJBQXlCLEdBQ3pCO1FBRUEsSUFBSUMsd0JBQXdCSjtRQUM1QixJQUFJSywwQkFBMEJKO1FBQzlCLElBQUlLLHVCQUF1Qko7UUFDM0IsSUFBSUssb0JBQW9CSjtRQUV4QixJQUFJSyxhQUFhO1FBQ2pCLElBQUlDLGlCQUFpQjtRQUVyQkMsc0JBQXNCLEdBQUdEO1FBQ3pCQywrQkFBK0IsR0FBR0w7UUFDbENLLDRCQUE0QixHQUFHSjtRQUMvQkksNkJBQTZCLEdBQUdOO1FBQ2hDTSx5QkFBeUIsR0FBR0g7UUFDNUJHLGtCQUFrQixHQUFHRjtJQUNuQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViM2xhbmNlci8uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWFjdC1yZWNvbmNpbGVyQDAuMjcuMF9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL3JlYWN0LXJlY29uY2lsZXIvY2pzL3JlYWN0LXJlY29uY2lsZXItY29uc3RhbnRzLmRldmVsb3BtZW50LmpzPzQxMzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtcmVjb25jaWxlci1jb25zdGFudHMuZGV2ZWxvcG1lbnQuanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3luY0xhbmUgPVxuLyogICAgICAgICAgICAgICAgICAgICAgICAqL1xuMTtcbnZhciBJbnB1dENvbnRpbnVvdXNMYW5lID1cbi8qICAgICAgICAgICAgKi9cbjQ7XG52YXIgRGVmYXVsdExhbmUgPVxuLyogICAgICAgICAgICAgICAgICAgICovXG4xNjtcbnZhciBJZGxlTGFuZSA9XG4vKiAgICAgICAgICAgICAgICAgICAgICAgKi9cbjUzNjg3MDkxMjtcblxudmFyIERpc2NyZXRlRXZlbnRQcmlvcml0eSA9IFN5bmNMYW5lO1xudmFyIENvbnRpbnVvdXNFdmVudFByaW9yaXR5ID0gSW5wdXRDb250aW51b3VzTGFuZTtcbnZhciBEZWZhdWx0RXZlbnRQcmlvcml0eSA9IERlZmF1bHRMYW5lO1xudmFyIElkbGVFdmVudFByaW9yaXR5ID0gSWRsZUxhbmU7XG5cbnZhciBMZWdhY3lSb290ID0gMDtcbnZhciBDb25jdXJyZW50Um9vdCA9IDE7XG5cbmV4cG9ydHMuQ29uY3VycmVudFJvb3QgPSBDb25jdXJyZW50Um9vdDtcbmV4cG9ydHMuQ29udGludW91c0V2ZW50UHJpb3JpdHkgPSBDb250aW51b3VzRXZlbnRQcmlvcml0eTtcbmV4cG9ydHMuRGVmYXVsdEV2ZW50UHJpb3JpdHkgPSBEZWZhdWx0RXZlbnRQcmlvcml0eTtcbmV4cG9ydHMuRGlzY3JldGVFdmVudFByaW9yaXR5ID0gRGlzY3JldGVFdmVudFByaW9yaXR5O1xuZXhwb3J0cy5JZGxlRXZlbnRQcmlvcml0eSA9IElkbGVFdmVudFByaW9yaXR5O1xuZXhwb3J0cy5MZWdhY3lSb290ID0gTGVnYWN5Um9vdDtcbiAgfSkoKTtcbn1cbiJdLCJuYW1lcyI6WyJwcm9jZXNzIiwiU3luY0xhbmUiLCJJbnB1dENvbnRpbnVvdXNMYW5lIiwiRGVmYXVsdExhbmUiLCJJZGxlTGFuZSIsIkRpc2NyZXRlRXZlbnRQcmlvcml0eSIsIkNvbnRpbnVvdXNFdmVudFByaW9yaXR5IiwiRGVmYXVsdEV2ZW50UHJpb3JpdHkiLCJJZGxlRXZlbnRQcmlvcml0eSIsIkxlZ2FjeVJvb3QiLCJDb25jdXJyZW50Um9vdCIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/react-reconciler@0.27.0_react@18.3.1/node_modules/react-reconciler/cjs/react-reconciler-constants.development.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/react-reconciler@0.27.0_react@18.3.1/node_modules/react-reconciler/cjs/react-reconciler.development.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-reconciler@0.27.0_react@18.3.1/node_modules/react-reconciler/cjs/react-reconciler.development.js ***!
  \***********************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @license React\n * react-reconciler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    module.exports = function $$$reconciler($$$hostConfig) {\n        var exports = {};\n        \"use strict\";\n        var React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n        var Scheduler = __webpack_require__(/*! scheduler */ \"(ssr)/./node_modules/.pnpm/scheduler@0.21.0/node_modules/scheduler/index.js\");\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        var suppressWarning = false;\n        function setSuppressWarning(newSuppressWarning) {\n            {\n                suppressWarning = newSuppressWarning;\n            }\n        } // In DEV, calls to console.warn and console.error get replaced\n        // by calls to these methods by a Babel plugin.\n        //\n        // In PROD (or in packages without access to React internals),\n        // they are left as they are instead.\n        function warn(format) {\n            {\n                if (!suppressWarning) {\n                    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                        args[_key - 1] = arguments[_key];\n                    }\n                    printWarning(\"warn\", format, args);\n                }\n            }\n        }\n        function error(format) {\n            {\n                if (!suppressWarning) {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        var assign = Object.assign;\n        /**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */ function get(key) {\n            return key._reactInternals;\n        }\n        function set(key, value) {\n            key._reactInternals = value;\n        }\n        // -----------------------------------------------------------------------------\n        var enablePersistentOffscreenHostContainer = false; // -----------------------------------------------------------------------------\n        // the react-reconciler package.\n        var enableNewReconciler = false; // Support legacy Primer support on internal FB www\n        var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz\n        var warnAboutStringRefs = false; // -----------------------------------------------------------------------------\n        // Debugging and DevTools\n        // -----------------------------------------------------------------------------\n        // Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n        // for an experimental timeline tool.\n        var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState\n        var enableProfilerTimer = true; // Record durations for commit and passive effects phases.\n        var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\n        var FunctionComponent = 0;\n        var ClassComponent = 1;\n        var IndeterminateComponent = 2; // Before we know whether it is function or class\n        var HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n        var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n        var HostComponent = 5;\n        var HostText = 6;\n        var Fragment = 7;\n        var Mode = 8;\n        var ContextConsumer = 9;\n        var ContextProvider = 10;\n        var ForwardRef = 11;\n        var Profiler = 12;\n        var SuspenseComponent = 13;\n        var MemoComponent = 14;\n        var SimpleMemoComponent = 15;\n        var LazyComponent = 16;\n        var IncompleteClassComponent = 17;\n        var DehydratedFragment = 18;\n        var SuspenseListComponent = 19;\n        var ScopeComponent = 21;\n        var OffscreenComponent = 22;\n        var LegacyHiddenComponent = 23;\n        var CacheComponent = 24;\n        var TracingMarkerComponent = 25;\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_SCOPE_TYPE = Symbol.for(\"react.scope\");\n        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(\"react.debug_trace_mode\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for(\"react.legacy_hidden\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var REACT_TRACING_MARKER_TYPE = Symbol.for(\"react.tracing_marker\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            {\n                if (typeof type.tag === \"number\") {\n                    error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                }\n            }\n            if (typeof type === \"function\") {\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        function getWrappedName$1(outerType, innerType, wrapperName) {\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return outerType.displayName || (functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n        } // Keep in sync with shared/getComponentNameFromType\n        function getContextName$1(type) {\n            return type.displayName || \"Context\";\n        }\n        function getComponentNameFromFiber(fiber) {\n            var tag = fiber.tag, type = fiber.type;\n            switch(tag){\n                case CacheComponent:\n                    return \"Cache\";\n                case ContextConsumer:\n                    var context = type;\n                    return getContextName$1(context) + \".Consumer\";\n                case ContextProvider:\n                    var provider = type;\n                    return getContextName$1(provider._context) + \".Provider\";\n                case DehydratedFragment:\n                    return \"DehydratedFragment\";\n                case ForwardRef:\n                    return getWrappedName$1(type, type.render, \"ForwardRef\");\n                case Fragment:\n                    return \"Fragment\";\n                case HostComponent:\n                    // Host component type is the display name (e.g. \"div\", \"View\")\n                    return type;\n                case HostPortal:\n                    return \"Portal\";\n                case HostRoot:\n                    return \"Root\";\n                case HostText:\n                    return \"Text\";\n                case LazyComponent:\n                    // Name comes from the type in this case; we don't have a tag.\n                    return getComponentNameFromType(type);\n                case Mode:\n                    if (type === REACT_STRICT_MODE_TYPE) {\n                        // Don't be less specific than shared/getComponentNameFromType\n                        return \"StrictMode\";\n                    }\n                    return \"Mode\";\n                case OffscreenComponent:\n                    return \"Offscreen\";\n                case Profiler:\n                    return \"Profiler\";\n                case ScopeComponent:\n                    return \"Scope\";\n                case SuspenseComponent:\n                    return \"Suspense\";\n                case SuspenseListComponent:\n                    return \"SuspenseList\";\n                case TracingMarkerComponent:\n                    return \"TracingMarker\";\n                // The display name for this tags come from the user-provided type:\n                case ClassComponent:\n                case FunctionComponent:\n                case IncompleteClassComponent:\n                case IndeterminateComponent:\n                case MemoComponent:\n                case SimpleMemoComponent:\n                    if (typeof type === \"function\") {\n                        return type.displayName || type.name || null;\n                    }\n                    if (typeof type === \"string\") {\n                        return type;\n                    }\n                    break;\n            }\n            return null;\n        }\n        // Don't change these two values. They're used by React Dev Tools.\n        var NoFlags = /*                      */ 0;\n        var PerformedWork = /*                */ 1; // You can change the rest (and add more).\n        var Placement = /*                    */ 2;\n        var Update = /*                       */ 4;\n        var PlacementAndUpdate = /*           */ Placement | Update;\n        var ChildDeletion = /*                */ 16;\n        var ContentReset = /*                 */ 32;\n        var Callback = /*                     */ 64;\n        var DidCapture = /*                   */ 128;\n        var ForceClientRender = /*            */ 256;\n        var Ref = /*                          */ 512;\n        var Snapshot = /*                     */ 1024;\n        var Passive = /*                      */ 2048;\n        var Hydrating = /*                    */ 4096;\n        var HydratingAndUpdate = /*           */ Hydrating | Update;\n        var Visibility = /*                   */ 8192;\n        var StoreConsistency = /*             */ 16384;\n        var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)\n        var HostEffectMask = /*               */ 32767; // These are not really side effects, but we still reuse this field.\n        var Incomplete = /*                   */ 32768;\n        var ShouldCapture = /*                */ 65536;\n        var ForceUpdateForLegacySuspense = /* */ 131072;\n        var Forked = /*                       */ 1048576; // Static tags describe aspects of a fiber that are not specific to a render,\n        // e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n        // This enables us to defer more work in the unmount case,\n        // since we can defer traversing the tree during layout to look for Passive effects,\n        // and instead rely on the static flag as a signal that there may be cleanup work.\n        var RefStatic = /*                    */ 2097152;\n        var LayoutStatic = /*                 */ 4194304;\n        var PassiveStatic = /*                */ 8388608; // These flags allow us to traverse to fibers that have effects on mount\n        // without traversing the entire tree after every commit for\n        // double invoking\n        var MountLayoutDev = /*               */ 16777216;\n        var MountPassiveDev = /*              */ 33554432; // Groups of flags that are used in the commit phase to skip over trees that\n        // don't contain effects, by checking subtreeFlags.\n        var BeforeMutationMask = // flag logic (see #20043)\n        Update | Snapshot | 0;\n        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;\n        var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\n        var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.\n        // This allows certain concepts to persist without recalculating them,\n        // e.g. whether a subtree contains passive effects or portals.\n        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n        function getNearestMountedFiber(fiber) {\n            var node = fiber;\n            var nearestMounted = fiber;\n            if (!fiber.alternate) {\n                // If there is no alternate, this might be a new tree that isn't inserted\n                // yet. If it is, then it will have a pending insertion effect on it.\n                var nextNode = node;\n                do {\n                    node = nextNode;\n                    if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n                        // This is an insertion or in-progress hydration. The nearest possible\n                        // mounted fiber is the parent but we need to continue to figure out\n                        // if that one is still mounted.\n                        nearestMounted = node.return;\n                    }\n                    nextNode = node.return;\n                }while (nextNode);\n            } else {\n                while(node.return){\n                    node = node.return;\n                }\n            }\n            if (node.tag === HostRoot) {\n                // TODO: Check if this was a nested HostRoot when used with\n                // renderContainerIntoSubtree.\n                return nearestMounted;\n            } // If we didn't hit the root, that means that we're in an disconnected tree\n            // that has been unmounted.\n            return null;\n        }\n        function isFiberMounted(fiber) {\n            return getNearestMountedFiber(fiber) === fiber;\n        }\n        function isMounted(component) {\n            {\n                var owner = ReactCurrentOwner.current;\n                if (owner !== null && owner.tag === ClassComponent) {\n                    var ownerFiber = owner;\n                    var instance = ownerFiber.stateNode;\n                    if (!instance._warnedAboutRefsInRender) {\n                        error(\"%s is accessing isMounted inside its render() function. \" + \"render() should be a pure function of props and state. It should \" + \"never access something that requires stale data from the previous \" + \"render, such as refs. Move this logic to componentDidMount and \" + \"componentDidUpdate instead.\", getComponentNameFromFiber(ownerFiber) || \"A component\");\n                    }\n                    instance._warnedAboutRefsInRender = true;\n                }\n            }\n            var fiber = get(component);\n            if (!fiber) {\n                return false;\n            }\n            return getNearestMountedFiber(fiber) === fiber;\n        }\n        function assertIsMounted(fiber) {\n            if (getNearestMountedFiber(fiber) !== fiber) {\n                throw new Error(\"Unable to find node on an unmounted component.\");\n            }\n        }\n        function findCurrentFiberUsingSlowPath(fiber) {\n            var alternate = fiber.alternate;\n            if (!alternate) {\n                // If there is no alternate, then we only need to check if it is mounted.\n                var nearestMounted = getNearestMountedFiber(fiber);\n                if (nearestMounted === null) {\n                    throw new Error(\"Unable to find node on an unmounted component.\");\n                }\n                if (nearestMounted !== fiber) {\n                    return null;\n                }\n                return fiber;\n            } // If we have two possible branches, we'll walk backwards up to the root\n            // to see what path the root points to. On the way we may hit one of the\n            // special cases and we'll deal with them.\n            var a = fiber;\n            var b = alternate;\n            while(true){\n                var parentA = a.return;\n                if (parentA === null) {\n                    break;\n                }\n                var parentB = parentA.alternate;\n                if (parentB === null) {\n                    // There is no alternate. This is an unusual case. Currently, it only\n                    // happens when a Suspense component is hidden. An extra fragment fiber\n                    // is inserted in between the Suspense fiber and its children. Skip\n                    // over this extra fragment fiber and proceed to the next parent.\n                    var nextParent = parentA.return;\n                    if (nextParent !== null) {\n                        a = b = nextParent;\n                        continue;\n                    } // If there's no parent, we're at the root.\n                    break;\n                } // If both copies of the parent fiber point to the same child, we can\n                // assume that the child is current. This happens when we bailout on low\n                // priority: the bailed out fiber's child reuses the current child.\n                if (parentA.child === parentB.child) {\n                    var child = parentA.child;\n                    while(child){\n                        if (child === a) {\n                            // We've determined that A is the current branch.\n                            assertIsMounted(parentA);\n                            return fiber;\n                        }\n                        if (child === b) {\n                            // We've determined that B is the current branch.\n                            assertIsMounted(parentA);\n                            return alternate;\n                        }\n                        child = child.sibling;\n                    } // We should never have an alternate for any mounting node. So the only\n                    // way this could possibly happen is if this was unmounted, if at all.\n                    throw new Error(\"Unable to find node on an unmounted component.\");\n                }\n                if (a.return !== b.return) {\n                    // The return pointer of A and the return pointer of B point to different\n                    // fibers. We assume that return pointers never criss-cross, so A must\n                    // belong to the child set of A.return, and B must belong to the child\n                    // set of B.return.\n                    a = parentA;\n                    b = parentB;\n                } else {\n                    // The return pointers point to the same fiber. We'll have to use the\n                    // default, slow path: scan the child sets of each parent alternate to see\n                    // which child belongs to which set.\n                    //\n                    // Search parent A's child set\n                    var didFindChild = false;\n                    var _child = parentA.child;\n                    while(_child){\n                        if (_child === a) {\n                            didFindChild = true;\n                            a = parentA;\n                            b = parentB;\n                            break;\n                        }\n                        if (_child === b) {\n                            didFindChild = true;\n                            b = parentA;\n                            a = parentB;\n                            break;\n                        }\n                        _child = _child.sibling;\n                    }\n                    if (!didFindChild) {\n                        // Search parent B's child set\n                        _child = parentB.child;\n                        while(_child){\n                            if (_child === a) {\n                                didFindChild = true;\n                                a = parentB;\n                                b = parentA;\n                                break;\n                            }\n                            if (_child === b) {\n                                didFindChild = true;\n                                b = parentB;\n                                a = parentA;\n                                break;\n                            }\n                            _child = _child.sibling;\n                        }\n                        if (!didFindChild) {\n                            throw new Error(\"Child was not found in either parent set. This indicates a bug \" + \"in React related to the return pointer. Please file an issue.\");\n                        }\n                    }\n                }\n                if (a.alternate !== b) {\n                    throw new Error(\"Return fibers should always be each others' alternates. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n                }\n            } // If the root is not a host container, we're in a disconnected tree. I.e.\n            // unmounted.\n            if (a.tag !== HostRoot) {\n                throw new Error(\"Unable to find node on an unmounted component.\");\n            }\n            if (a.stateNode.current === a) {\n                // We've determined that A is the current branch.\n                return fiber;\n            } // Otherwise B has to be current branch.\n            return alternate;\n        }\n        function findCurrentHostFiber(parent) {\n            var currentParent = findCurrentFiberUsingSlowPath(parent);\n            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\n        }\n        function findCurrentHostFiberImpl(node) {\n            // Next we'll drill down this component to find the first HostComponent/Text.\n            if (node.tag === HostComponent || node.tag === HostText) {\n                return node;\n            }\n            var child = node.child;\n            while(child !== null){\n                var match = findCurrentHostFiberImpl(child);\n                if (match !== null) {\n                    return match;\n                }\n                child = child.sibling;\n            }\n            return null;\n        }\n        function findCurrentHostFiberWithNoPortals(parent) {\n            var currentParent = findCurrentFiberUsingSlowPath(parent);\n            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;\n        }\n        function findCurrentHostFiberWithNoPortalsImpl(node) {\n            // Next we'll drill down this component to find the first HostComponent/Text.\n            if (node.tag === HostComponent || node.tag === HostText) {\n                return node;\n            }\n            var child = node.child;\n            while(child !== null){\n                if (child.tag !== HostPortal) {\n                    var match = findCurrentHostFiberWithNoPortalsImpl(child);\n                    if (match !== null) {\n                        return match;\n                    }\n                }\n                child = child.sibling;\n            }\n            return null;\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        // This is a host config that's used for the `react-reconciler` package on npm.\n        // It is only used by third-party renderers.\n        //\n        // Its API lets you pass the host config as an argument.\n        // However, inside the `react-reconciler` we treat host config as a module.\n        // This file is a shim between two worlds.\n        //\n        // It works because the `react-reconciler` bundle is wrapped in something like:\n        //\n        // module.exports = function ($$$config) {\n        //   /* reconciler code */\n        // }\n        //\n        // So `$$$config` looks like a global variable, but it's\n        // really an argument to a top-level wrapping function.\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        // eslint-disable-line no-undef\n        var getPublicInstance = $$$hostConfig.getPublicInstance;\n        var getRootHostContext = $$$hostConfig.getRootHostContext;\n        var getChildHostContext = $$$hostConfig.getChildHostContext;\n        var prepareForCommit = $$$hostConfig.prepareForCommit;\n        var resetAfterCommit = $$$hostConfig.resetAfterCommit;\n        var createInstance = $$$hostConfig.createInstance;\n        var appendInitialChild = $$$hostConfig.appendInitialChild;\n        var finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;\n        var prepareUpdate = $$$hostConfig.prepareUpdate;\n        var shouldSetTextContent = $$$hostConfig.shouldSetTextContent;\n        var createTextInstance = $$$hostConfig.createTextInstance;\n        var scheduleTimeout = $$$hostConfig.scheduleTimeout;\n        var cancelTimeout = $$$hostConfig.cancelTimeout;\n        var noTimeout = $$$hostConfig.noTimeout;\n        var now = $$$hostConfig.now;\n        var isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;\n        var warnsIfNotActing = $$$hostConfig.warnsIfNotActing;\n        var supportsMutation = $$$hostConfig.supportsMutation;\n        var supportsPersistence = $$$hostConfig.supportsPersistence;\n        var supportsHydration = $$$hostConfig.supportsHydration;\n        var getInstanceFromNode = $$$hostConfig.getInstanceFromNode;\n        var beforeActiveInstanceBlur = $$$hostConfig.beforeActiveInstanceBlur;\n        var afterActiveInstanceBlur = $$$hostConfig.afterActiveInstanceBlur;\n        var preparePortalMount = $$$hostConfig.preparePortalMount;\n        var prepareScopeUpdate = $$$hostConfig.preparePortalMount;\n        var getInstanceFromScope = $$$hostConfig.getInstanceFromScope;\n        var getCurrentEventPriority = $$$hostConfig.getCurrentEventPriority;\n        var detachDeletedInstance = $$$hostConfig.detachDeletedInstance; // -------------------\n        //      Microtasks\n        //     (optional)\n        // -------------------\n        var supportsMicrotasks = $$$hostConfig.supportsMicrotasks;\n        var scheduleMicrotask = $$$hostConfig.scheduleMicrotask; // -------------------\n        //      Test selectors\n        //     (optional)\n        // -------------------\n        var supportsTestSelectors = $$$hostConfig.supportsTestSelectors;\n        var findFiberRoot = $$$hostConfig.findFiberRoot;\n        var getBoundingRect = $$$hostConfig.getBoundingRect;\n        var getTextContent = $$$hostConfig.getTextContent;\n        var isHiddenSubtree = $$$hostConfig.isHiddenSubtree;\n        var matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;\n        var setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;\n        var setupIntersectionObserver = $$$hostConfig.setupIntersectionObserver; // -------------------\n        //      Mutation\n        //     (optional)\n        // -------------------\n        var appendChild = $$$hostConfig.appendChild;\n        var appendChildToContainer = $$$hostConfig.appendChildToContainer;\n        var commitTextUpdate = $$$hostConfig.commitTextUpdate;\n        var commitMount = $$$hostConfig.commitMount;\n        var commitUpdate = $$$hostConfig.commitUpdate;\n        var insertBefore = $$$hostConfig.insertBefore;\n        var insertInContainerBefore = $$$hostConfig.insertInContainerBefore;\n        var removeChild = $$$hostConfig.removeChild;\n        var removeChildFromContainer = $$$hostConfig.removeChildFromContainer;\n        var resetTextContent = $$$hostConfig.resetTextContent;\n        var hideInstance = $$$hostConfig.hideInstance;\n        var hideTextInstance = $$$hostConfig.hideTextInstance;\n        var unhideInstance = $$$hostConfig.unhideInstance;\n        var unhideTextInstance = $$$hostConfig.unhideTextInstance;\n        var clearContainer = $$$hostConfig.clearContainer; // -------------------\n        //     Persistence\n        //     (optional)\n        // -------------------\n        var cloneInstance = $$$hostConfig.cloneInstance;\n        var createContainerChildSet = $$$hostConfig.createContainerChildSet;\n        var appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;\n        var finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;\n        var replaceContainerChildren = $$$hostConfig.replaceContainerChildren;\n        var getOffscreenContainerType = $$$hostConfig.getOffscreenContainerType;\n        var getOffscreenContainerProps = $$$hostConfig.getOffscreenContainerProps;\n        var cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;\n        var cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance; // -------------------\n        //     Hydration\n        //     (optional)\n        // -------------------\n        var canHydrateInstance = $$$hostConfig.canHydrateInstance;\n        var canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;\n        var canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;\n        var isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;\n        var isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;\n        var registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;\n        var getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;\n        var getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;\n        var getFirstHydratableChildWithinContainer = $$$hostConfig.getFirstHydratableChildWithinContainer;\n        var getFirstHydratableChildWithinSuspenseInstance = $$$hostConfig.getFirstHydratableChildWithinSuspenseInstance;\n        var hydrateInstance = $$$hostConfig.hydrateInstance;\n        var hydrateTextInstance = $$$hostConfig.hydrateTextInstance;\n        var hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;\n        var getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;\n        var commitHydratedContainer = $$$hostConfig.commitHydratedContainer;\n        var commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;\n        var clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;\n        var clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;\n        var shouldDeleteUnhydratedTailInstances = $$$hostConfig.shouldDeleteUnhydratedTailInstances;\n        var didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;\n        var didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;\n        var didNotHydrateInstanceWithinContainer = $$$hostConfig.didNotHydrateInstanceWithinContainer;\n        var didNotHydrateInstanceWithinSuspenseInstance = $$$hostConfig.didNotHydrateInstanceWithinSuspenseInstance;\n        var didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;\n        var didNotFindHydratableInstanceWithinContainer = $$$hostConfig.didNotFindHydratableInstanceWithinContainer;\n        var didNotFindHydratableTextInstanceWithinContainer = $$$hostConfig.didNotFindHydratableTextInstanceWithinContainer;\n        var didNotFindHydratableSuspenseInstanceWithinContainer = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinContainer;\n        var didNotFindHydratableInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableInstanceWithinSuspenseInstance;\n        var didNotFindHydratableTextInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableTextInstanceWithinSuspenseInstance;\n        var didNotFindHydratableSuspenseInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinSuspenseInstance;\n        var didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;\n        var didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;\n        var didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;\n        var errorHydratingContainer = $$$hostConfig.errorHydratingContainer;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            var control;\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            try {\n                // This should throw.\n                if (construct) {\n                    // Something should be setting the props in the constructor.\n                    var Fake = function() {\n                        throw Error();\n                    }; // $FlowFixMe\n                    Object.defineProperty(Fake.prototype, \"props\", {\n                        set: function() {\n                            // We use a throwing setter instead of frozen or non-writable props\n                            // because that won't throw in a non-strict mode function.\n                            throw Error();\n                        }\n                    });\n                    if (typeof Reflect === \"object\" && Reflect.construct) {\n                        // We construct a different control for this case to include any extra\n                        // frames added by the construct call.\n                        try {\n                            Reflect.construct(Fake, []);\n                        } catch (x) {\n                            control = x;\n                        }\n                        Reflect.construct(fn, [], Fake);\n                    } else {\n                        try {\n                            Fake.call();\n                        } catch (x) {\n                            control = x;\n                        }\n                        fn.call(Fake.prototype);\n                    }\n                } else {\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        control = x;\n                    }\n                    fn();\n                }\n            } catch (sample) {\n                // This is inlined manually because closure doesn't do it for us.\n                if (sample && control && typeof sample.stack === \"string\") {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sample.stack.split(\"\\n\");\n                    var controlLines = control.stack.split(\"\\n\");\n                    var s = sampleLines.length - 1;\n                    var c = controlLines.length - 1;\n                    while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                        // We expect at least one stack frame to be shared.\n                        // Typically this will be the root most one. However, stack frames may be\n                        // cut off due to maximum stack limits. In this case, one maybe cut off\n                        // earlier than the other. We assume that the sample is longer or the same\n                        // and there for cut off earlier. So we should find the root most frame in\n                        // the sample somewhere in the control.\n                        c--;\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        }\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeClassComponentFrame(ctor, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(ctor, true);\n            }\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement(null);\n                        }\n                    }\n                }\n            }\n        }\n        var valueStack = [];\n        var fiberStack;\n        {\n            fiberStack = [];\n        }\n        var index = -1;\n        function createCursor(defaultValue) {\n            return {\n                current: defaultValue\n            };\n        }\n        function pop(cursor, fiber) {\n            if (index < 0) {\n                {\n                    error(\"Unexpected pop.\");\n                }\n                return;\n            }\n            {\n                if (fiber !== fiberStack[index]) {\n                    error(\"Unexpected Fiber popped.\");\n                }\n            }\n            cursor.current = valueStack[index];\n            valueStack[index] = null;\n            {\n                fiberStack[index] = null;\n            }\n            index--;\n        }\n        function push(cursor, value, fiber) {\n            index++;\n            valueStack[index] = cursor.current;\n            {\n                fiberStack[index] = fiber;\n            }\n            cursor.current = value;\n        }\n        var warnedAboutMissingGetChildContext;\n        {\n            warnedAboutMissingGetChildContext = {};\n        }\n        var emptyContextObject = {};\n        {\n            Object.freeze(emptyContextObject);\n        }\n        var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\n        var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\n        // We use this to get access to the parent context after we have already\n        // pushed the next context provider, and now need to merge their contexts.\n        var previousContext = emptyContextObject;\n        function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\n            {\n                if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n                    // If the fiber is a context provider itself, when we read its context\n                    // we may have already pushed its own child context on the stack. A context\n                    // provider should not \"see\" its own child context. Therefore we read the\n                    // previous (parent) context instead for a context provider.\n                    return previousContext;\n                }\n                return contextStackCursor.current;\n            }\n        }\n        function cacheContext(workInProgress, unmaskedContext, maskedContext) {\n            {\n                var instance = workInProgress.stateNode;\n                instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n                instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n            }\n        }\n        function getMaskedContext(workInProgress, unmaskedContext) {\n            {\n                var type = workInProgress.type;\n                var contextTypes = type.contextTypes;\n                if (!contextTypes) {\n                    return emptyContextObject;\n                } // Avoid recreating masked context unless unmasked context has changed.\n                // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n                // This may trigger infinite loops if componentWillReceiveProps calls setState.\n                var instance = workInProgress.stateNode;\n                if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n                    return instance.__reactInternalMemoizedMaskedChildContext;\n                }\n                var context = {};\n                for(var key in contextTypes){\n                    context[key] = unmaskedContext[key];\n                }\n                {\n                    var name = getComponentNameFromFiber(workInProgress) || \"Unknown\";\n                    checkPropTypes(contextTypes, context, \"context\", name);\n                }\n                // Context is created before the class component is instantiated so check for instance.\n                if (instance) {\n                    cacheContext(workInProgress, unmaskedContext, context);\n                }\n                return context;\n            }\n        }\n        function hasContextChanged() {\n            {\n                return didPerformWorkStackCursor.current;\n            }\n        }\n        function isContextProvider(type) {\n            {\n                var childContextTypes = type.childContextTypes;\n                return childContextTypes !== null && childContextTypes !== undefined;\n            }\n        }\n        function popContext(fiber) {\n            {\n                pop(didPerformWorkStackCursor, fiber);\n                pop(contextStackCursor, fiber);\n            }\n        }\n        function popTopLevelContextObject(fiber) {\n            {\n                pop(didPerformWorkStackCursor, fiber);\n                pop(contextStackCursor, fiber);\n            }\n        }\n        function pushTopLevelContextObject(fiber, context, didChange) {\n            {\n                if (contextStackCursor.current !== emptyContextObject) {\n                    throw new Error(\"Unexpected context found on stack. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n                }\n                push(contextStackCursor, context, fiber);\n                push(didPerformWorkStackCursor, didChange, fiber);\n            }\n        }\n        function processChildContext(fiber, type, parentContext) {\n            {\n                var instance = fiber.stateNode;\n                var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n                // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n                if (typeof instance.getChildContext !== \"function\") {\n                    {\n                        var componentName = getComponentNameFromFiber(fiber) || \"Unknown\";\n                        if (!warnedAboutMissingGetChildContext[componentName]) {\n                            warnedAboutMissingGetChildContext[componentName] = true;\n                            error(\"%s.childContextTypes is specified but there is no getChildContext() method \" + \"on the instance. You can either define getChildContext() on %s or remove \" + \"childContextTypes from it.\", componentName, componentName);\n                        }\n                    }\n                    return parentContext;\n                }\n                var childContext = instance.getChildContext();\n                for(var contextKey in childContext){\n                    if (!(contextKey in childContextTypes)) {\n                        throw new Error((getComponentNameFromFiber(fiber) || \"Unknown\") + '.getChildContext(): key \"' + contextKey + '\" is not defined in childContextTypes.');\n                    }\n                }\n                {\n                    var name = getComponentNameFromFiber(fiber) || \"Unknown\";\n                    checkPropTypes(childContextTypes, childContext, \"child context\", name);\n                }\n                return assign({}, parentContext, childContext);\n            }\n        }\n        function pushContextProvider(workInProgress) {\n            {\n                var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\n                // If the instance does not exist yet, we will push null at first,\n                // and replace it on the stack later when invalidating the context.\n                var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.\n                // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n                previousContext = contextStackCursor.current;\n                push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n                push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n                return true;\n            }\n        }\n        function invalidateContextProvider(workInProgress, type, didChange) {\n            {\n                var instance = workInProgress.stateNode;\n                if (!instance) {\n                    throw new Error(\"Expected to have an instance by this point. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n                }\n                if (didChange) {\n                    // Merge parent and own context.\n                    // Skip this if we're not updating due to sCU.\n                    // This avoids unnecessarily recomputing memoized values.\n                    var mergedContext = processChildContext(workInProgress, type, previousContext);\n                    instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\n                    // It is important to unwind the context in the reverse order.\n                    pop(didPerformWorkStackCursor, workInProgress);\n                    pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.\n                    push(contextStackCursor, mergedContext, workInProgress);\n                    push(didPerformWorkStackCursor, didChange, workInProgress);\n                } else {\n                    pop(didPerformWorkStackCursor, workInProgress);\n                    push(didPerformWorkStackCursor, didChange, workInProgress);\n                }\n            }\n        }\n        function findCurrentUnmaskedContext(fiber) {\n            {\n                // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n                // makes sense elsewhere\n                if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n                    throw new Error(\"Expected subtree parent to be a mounted class component. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n                }\n                var node = fiber;\n                do {\n                    switch(node.tag){\n                        case HostRoot:\n                            return node.stateNode.context;\n                        case ClassComponent:\n                            {\n                                var Component = node.type;\n                                if (isContextProvider(Component)) {\n                                    return node.stateNode.__reactInternalMemoizedMergedChildContext;\n                                }\n                                break;\n                            }\n                    }\n                    node = node.return;\n                }while (node !== null);\n                throw new Error(\"Found unexpected detached subtree parent. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n            }\n        }\n        var LegacyRoot = 0;\n        var ConcurrentRoot = 1;\n        var NoMode = /*                         */ 0; // TODO: Remove ConcurrentMode by reading from the root tag instead\n        var ConcurrentMode = /*                 */ 1;\n        var ProfileMode = /*                    */ 2;\n        var StrictLegacyMode = /*               */ 8;\n        var StrictEffectsMode = /*              */ 16;\n        // TODO: This is pretty well supported by browsers. Maybe we can drop it.\n        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n        // Based on:\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n        var log = Math.log;\n        var LN2 = Math.LN2;\n        function clz32Fallback(x) {\n            var asUint = x >>> 0;\n            if (asUint === 0) {\n                return 32;\n            }\n            return 31 - (log(asUint) / LN2 | 0) | 0;\n        }\n        // If those values are changed that package should be rebuilt and redeployed.\n        var TotalLanes = 31;\n        var NoLanes = /*                        */ 0;\n        var NoLane = /*                          */ 0;\n        var SyncLane = /*                        */ 1;\n        var InputContinuousHydrationLane = /*    */ 2;\n        var InputContinuousLane = /*            */ 4;\n        var DefaultHydrationLane = /*            */ 8;\n        var DefaultLane = /*                    */ 16;\n        var TransitionHydrationLane = /*                */ 32;\n        var TransitionLanes = /*                       */ 4194240;\n        var TransitionLane1 = /*                        */ 64;\n        var TransitionLane2 = /*                        */ 128;\n        var TransitionLane3 = /*                        */ 256;\n        var TransitionLane4 = /*                        */ 512;\n        var TransitionLane5 = /*                        */ 1024;\n        var TransitionLane6 = /*                        */ 2048;\n        var TransitionLane7 = /*                        */ 4096;\n        var TransitionLane8 = /*                        */ 8192;\n        var TransitionLane9 = /*                        */ 16384;\n        var TransitionLane10 = /*                       */ 32768;\n        var TransitionLane11 = /*                       */ 65536;\n        var TransitionLane12 = /*                       */ 131072;\n        var TransitionLane13 = /*                       */ 262144;\n        var TransitionLane14 = /*                       */ 524288;\n        var TransitionLane15 = /*                       */ 1048576;\n        var TransitionLane16 = /*                       */ 2097152;\n        var RetryLanes = /*                            */ 130023424;\n        var RetryLane1 = /*                             */ 4194304;\n        var RetryLane2 = /*                             */ 8388608;\n        var RetryLane3 = /*                             */ 16777216;\n        var RetryLane4 = /*                             */ 33554432;\n        var RetryLane5 = /*                             */ 67108864;\n        var SomeRetryLane = RetryLane1;\n        var SelectiveHydrationLane = /*          */ 134217728;\n        var NonIdleLanes = /*                                 */ 268435455;\n        var IdleHydrationLane = /*               */ 268435456;\n        var IdleLane = /*                       */ 536870912;\n        var OffscreenLane = /*                   */ 1073741824; // This function is used for the experimental timeline (react-devtools-timeline)\n        // It should be kept in sync with the Lanes values above.\n        function getLabelForLane(lane) {\n            {\n                if (lane & SyncLane) {\n                    return \"Sync\";\n                }\n                if (lane & InputContinuousHydrationLane) {\n                    return \"InputContinuousHydration\";\n                }\n                if (lane & InputContinuousLane) {\n                    return \"InputContinuous\";\n                }\n                if (lane & DefaultHydrationLane) {\n                    return \"DefaultHydration\";\n                }\n                if (lane & DefaultLane) {\n                    return \"Default\";\n                }\n                if (lane & TransitionHydrationLane) {\n                    return \"TransitionHydration\";\n                }\n                if (lane & TransitionLanes) {\n                    return \"Transition\";\n                }\n                if (lane & RetryLanes) {\n                    return \"Retry\";\n                }\n                if (lane & SelectiveHydrationLane) {\n                    return \"SelectiveHydration\";\n                }\n                if (lane & IdleHydrationLane) {\n                    return \"IdleHydration\";\n                }\n                if (lane & IdleLane) {\n                    return \"Idle\";\n                }\n                if (lane & OffscreenLane) {\n                    return \"Offscreen\";\n                }\n            }\n        }\n        var NoTimestamp = -1;\n        var nextTransitionLane = TransitionLane1;\n        var nextRetryLane = RetryLane1;\n        function getHighestPriorityLanes(lanes) {\n            switch(getHighestPriorityLane(lanes)){\n                case SyncLane:\n                    return SyncLane;\n                case InputContinuousHydrationLane:\n                    return InputContinuousHydrationLane;\n                case InputContinuousLane:\n                    return InputContinuousLane;\n                case DefaultHydrationLane:\n                    return DefaultHydrationLane;\n                case DefaultLane:\n                    return DefaultLane;\n                case TransitionHydrationLane:\n                    return TransitionHydrationLane;\n                case TransitionLane1:\n                case TransitionLane2:\n                case TransitionLane3:\n                case TransitionLane4:\n                case TransitionLane5:\n                case TransitionLane6:\n                case TransitionLane7:\n                case TransitionLane8:\n                case TransitionLane9:\n                case TransitionLane10:\n                case TransitionLane11:\n                case TransitionLane12:\n                case TransitionLane13:\n                case TransitionLane14:\n                case TransitionLane15:\n                case TransitionLane16:\n                    return lanes & TransitionLanes;\n                case RetryLane1:\n                case RetryLane2:\n                case RetryLane3:\n                case RetryLane4:\n                case RetryLane5:\n                    return lanes & RetryLanes;\n                case SelectiveHydrationLane:\n                    return SelectiveHydrationLane;\n                case IdleHydrationLane:\n                    return IdleHydrationLane;\n                case IdleLane:\n                    return IdleLane;\n                case OffscreenLane:\n                    return OffscreenLane;\n                default:\n                    {\n                        error(\"Should have found matching lanes. This is a bug in React.\");\n                    }\n                    return lanes;\n            }\n        }\n        function getNextLanes(root, wipLanes) {\n            // Early bailout if there's no pending work left.\n            var pendingLanes = root.pendingLanes;\n            if (pendingLanes === NoLanes) {\n                return NoLanes;\n            }\n            var nextLanes = NoLanes;\n            var suspendedLanes = root.suspendedLanes;\n            var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\n            // even if the work is suspended.\n            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n            if (nonIdlePendingLanes !== NoLanes) {\n                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n                if (nonIdleUnblockedLanes !== NoLanes) {\n                    nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n                } else {\n                    var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n                    if (nonIdlePingedLanes !== NoLanes) {\n                        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n                    }\n                }\n            } else {\n                // The only remaining work is Idle.\n                var unblockedLanes = pendingLanes & ~suspendedLanes;\n                if (unblockedLanes !== NoLanes) {\n                    nextLanes = getHighestPriorityLanes(unblockedLanes);\n                } else {\n                    if (pingedLanes !== NoLanes) {\n                        nextLanes = getHighestPriorityLanes(pingedLanes);\n                    }\n                }\n            }\n            if (nextLanes === NoLanes) {\n                // This should only be reachable if we're suspended\n                // TODO: Consider warning in this path if a fallback timer is not scheduled.\n                return NoLanes;\n            } // If we're already in the middle of a render, switching lanes will interrupt\n            // it and we'll lose our progress. We should only do this if the new lanes are\n            // higher priority.\n            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't\n            // bother waiting until the root is complete.\n            (wipLanes & suspendedLanes) === NoLanes) {\n                var nextLane = getHighestPriorityLane(nextLanes);\n                var wipLane = getHighestPriorityLane(wipLanes);\n                if (// one. This works because the bits decrease in priority as you go left.\n                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The\n                // only difference between default updates and transition updates is that\n                // default updates do not support refresh transitions.\n                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\n                    // Keep working on the existing in-progress tree. Do not interrupt.\n                    return wipLanes;\n                }\n            }\n            if ((nextLanes & InputContinuousLane) !== NoLanes) {\n                // When updates are sync by default, we entangle continuous priority updates\n                // and default updates, so they render in the same batch. The only reason\n                // they use separate lanes is because continuous updates should interrupt\n                // transitions, but default updates should not.\n                nextLanes |= pendingLanes & DefaultLane;\n            } // Check for entangled lanes and add them to the batch.\n            //\n            // A lane is said to be entangled with another when it's not allowed to render\n            // in a batch that does not also include the other lane. Typically we do this\n            // when multiple updates have the same source, and we only want to respond to\n            // the most recent event from that source.\n            //\n            // Note that we apply entanglements *after* checking for partial work above.\n            // This means that if a lane is entangled during an interleaved event while\n            // it's already rendering, we won't interrupt it. This is intentional, since\n            // entanglement is usually \"best effort\": we'll try our best to render the\n            // lanes in the same batch, but it's not worth throwing out partially\n            // completed work in order to do it.\n            // TODO: Reconsider this. The counter-argument is that the partial work\n            // represents an intermediate state, which we don't want to show to the user.\n            // And by spending extra time finishing it, we're increasing the amount of\n            // time it takes to show the final state, which is what they are actually\n            // waiting for.\n            //\n            // For those exceptions where entanglement is semantically important, like\n            // useMutableSource, we should ensure that there is no partial work at the\n            // time we apply the entanglement.\n            var entangledLanes = root.entangledLanes;\n            if (entangledLanes !== NoLanes) {\n                var entanglements = root.entanglements;\n                var lanes = nextLanes & entangledLanes;\n                while(lanes > 0){\n                    var index = pickArbitraryLaneIndex(lanes);\n                    var lane = 1 << index;\n                    nextLanes |= entanglements[index];\n                    lanes &= ~lane;\n                }\n            }\n            return nextLanes;\n        }\n        function getMostRecentEventTime(root, lanes) {\n            var eventTimes = root.eventTimes;\n            var mostRecentEventTime = NoTimestamp;\n            while(lanes > 0){\n                var index = pickArbitraryLaneIndex(lanes);\n                var lane = 1 << index;\n                var eventTime = eventTimes[index];\n                if (eventTime > mostRecentEventTime) {\n                    mostRecentEventTime = eventTime;\n                }\n                lanes &= ~lane;\n            }\n            return mostRecentEventTime;\n        }\n        function computeExpirationTime(lane, currentTime) {\n            switch(lane){\n                case SyncLane:\n                case InputContinuousHydrationLane:\n                case InputContinuousLane:\n                    // User interactions should expire slightly more quickly.\n                    //\n                    // NOTE: This is set to the corresponding constant as in Scheduler.js.\n                    // When we made it larger, a product metric in www regressed, suggesting\n                    // there's a user interaction that's being starved by a series of\n                    // synchronous updates. If that theory is correct, the proper solution is\n                    // to fix the starvation. However, this scenario supports the idea that\n                    // expiration times are an important safeguard when starvation\n                    // does happen.\n                    return currentTime + 250;\n                case DefaultHydrationLane:\n                case DefaultLane:\n                case TransitionHydrationLane:\n                case TransitionLane1:\n                case TransitionLane2:\n                case TransitionLane3:\n                case TransitionLane4:\n                case TransitionLane5:\n                case TransitionLane6:\n                case TransitionLane7:\n                case TransitionLane8:\n                case TransitionLane9:\n                case TransitionLane10:\n                case TransitionLane11:\n                case TransitionLane12:\n                case TransitionLane13:\n                case TransitionLane14:\n                case TransitionLane15:\n                case TransitionLane16:\n                    return currentTime + 5000;\n                case RetryLane1:\n                case RetryLane2:\n                case RetryLane3:\n                case RetryLane4:\n                case RetryLane5:\n                    // TODO: Retries should be allowed to expire if they are CPU bound for\n                    // too long, but when I made this change it caused a spike in browser\n                    // crashes. There must be some other underlying bug; not super urgent but\n                    // ideally should figure out why and fix it. Unfortunately we don't have\n                    // a repro for the crashes, only detected via production metrics.\n                    return NoTimestamp;\n                case SelectiveHydrationLane:\n                case IdleHydrationLane:\n                case IdleLane:\n                case OffscreenLane:\n                    // Anything idle priority or lower should never expire.\n                    return NoTimestamp;\n                default:\n                    {\n                        error(\"Should have found matching lanes. This is a bug in React.\");\n                    }\n                    return NoTimestamp;\n            }\n        }\n        function markStarvedLanesAsExpired(root, currentTime) {\n            // TODO: This gets called every time we yield. We can optimize by storing\n            // the earliest expiration time on the root. Then use that to quickly bail out\n            // of this function.\n            var pendingLanes = root.pendingLanes;\n            var suspendedLanes = root.suspendedLanes;\n            var pingedLanes = root.pingedLanes;\n            var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n            // expiration time. If so, we'll assume the update is being starved and mark\n            // it as expired to force it to finish.\n            var lanes = pendingLanes;\n            while(lanes > 0){\n                var index = pickArbitraryLaneIndex(lanes);\n                var lane = 1 << index;\n                var expirationTime = expirationTimes[index];\n                if (expirationTime === NoTimestamp) {\n                    // Found a pending lane with no expiration time. If it's not suspended, or\n                    // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n                    // using the current time.\n                    if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n                        // Assumes timestamps are monotonically increasing.\n                        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n                    }\n                } else if (expirationTime <= currentTime) {\n                    // This lane expired\n                    root.expiredLanes |= lane;\n                }\n                lanes &= ~lane;\n            }\n        } // This returns the highest priority pending lanes regardless of whether they\n        // are suspended.\n        function getHighestPriorityPendingLanes(root) {\n            return getHighestPriorityLanes(root.pendingLanes);\n        }\n        function getLanesToRetrySynchronouslyOnError(root) {\n            var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n            if (everythingButOffscreen !== NoLanes) {\n                return everythingButOffscreen;\n            }\n            if (everythingButOffscreen & OffscreenLane) {\n                return OffscreenLane;\n            }\n            return NoLanes;\n        }\n        function includesSyncLane(lanes) {\n            return (lanes & SyncLane) !== NoLanes;\n        }\n        function includesNonIdleWork(lanes) {\n            return (lanes & NonIdleLanes) !== NoLanes;\n        }\n        function includesOnlyRetries(lanes) {\n            return (lanes & RetryLanes) === lanes;\n        }\n        function includesOnlyTransitions(lanes) {\n            return (lanes & TransitionLanes) === lanes;\n        }\n        function includesBlockingLane(root, lanes) {\n            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\n            return (lanes & SyncDefaultLanes) !== NoLanes;\n        }\n        function includesExpiredLane(root, lanes) {\n            // This is a separate check from includesBlockingLane because a lane can\n            // expire after a render has already started.\n            return (lanes & root.expiredLanes) !== NoLanes;\n        }\n        function isTransitionLane(lane) {\n            return (lane & TransitionLanes) !== 0;\n        }\n        function claimNextTransitionLane() {\n            // Cycle through the lanes, assigning each new transition to the next lane.\n            // In most cases, this means every transition gets its own lane, until we\n            // run out of lanes and cycle back to the beginning.\n            var lane = nextTransitionLane;\n            nextTransitionLane <<= 1;\n            if ((nextTransitionLane & TransitionLanes) === 0) {\n                nextTransitionLane = TransitionLane1;\n            }\n            return lane;\n        }\n        function claimNextRetryLane() {\n            var lane = nextRetryLane;\n            nextRetryLane <<= 1;\n            if ((nextRetryLane & RetryLanes) === 0) {\n                nextRetryLane = RetryLane1;\n            }\n            return lane;\n        }\n        function getHighestPriorityLane(lanes) {\n            return lanes & -lanes;\n        }\n        function pickArbitraryLane(lanes) {\n            // This wrapper function gets inlined. Only exists so to communicate that it\n            // doesn't matter which bit is selected; you can pick any bit without\n            // affecting the algorithms where its used. Here I'm using\n            // getHighestPriorityLane because it requires the fewest operations.\n            return getHighestPriorityLane(lanes);\n        }\n        function pickArbitraryLaneIndex(lanes) {\n            return 31 - clz32(lanes);\n        }\n        function laneToIndex(lane) {\n            return pickArbitraryLaneIndex(lane);\n        }\n        function includesSomeLane(a, b) {\n            return (a & b) !== NoLanes;\n        }\n        function isSubsetOfLanes(set, subset) {\n            return (set & subset) === subset;\n        }\n        function mergeLanes(a, b) {\n            return a | b;\n        }\n        function removeLanes(set, subset) {\n            return set & ~subset;\n        }\n        function intersectLanes(a, b) {\n            return a & b;\n        } // Seems redundant, but it changes the type from a single lane (used for\n        // updates) to a group of lanes (used for flushing work).\n        function laneToLanes(lane) {\n            return lane;\n        }\n        function higherPriorityLane(a, b) {\n            // This works because the bit ranges decrease in priority as you go left.\n            return a !== NoLane && a < b ? a : b;\n        }\n        function createLaneMap(initial) {\n            // Intentionally pushing one by one.\n            // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n            var laneMap = [];\n            for(var i = 0; i < TotalLanes; i++){\n                laneMap.push(initial);\n            }\n            return laneMap;\n        }\n        function markRootUpdated(root, updateLane, eventTime) {\n            root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\n            // could unblock them. Clear the suspended lanes so that we can try rendering\n            // them again.\n            //\n            // TODO: We really only need to unsuspend only lanes that are in the\n            // `subtreeLanes` of the updated fiber, or the update lanes of the return\n            // path. This would exclude suspended updates in an unrelated sibling tree,\n            // since there's no way for this update to unblock it.\n            //\n            // We don't do this if the incoming update is idle, because we never process\n            // idle updates until after all the regular updates have finished; there's no\n            // way it could unblock a transition.\n            if (updateLane !== IdleLane) {\n                root.suspendedLanes = NoLanes;\n                root.pingedLanes = NoLanes;\n            }\n            var eventTimes = root.eventTimes;\n            var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most\n            // recent event, and we assume time is monotonically increasing.\n            eventTimes[index] = eventTime;\n        }\n        function markRootSuspended(root, suspendedLanes) {\n            root.suspendedLanes |= suspendedLanes;\n            root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n            var expirationTimes = root.expirationTimes;\n            var lanes = suspendedLanes;\n            while(lanes > 0){\n                var index = pickArbitraryLaneIndex(lanes);\n                var lane = 1 << index;\n                expirationTimes[index] = NoTimestamp;\n                lanes &= ~lane;\n            }\n        }\n        function markRootPinged(root, pingedLanes, eventTime) {\n            root.pingedLanes |= root.suspendedLanes & pingedLanes;\n        }\n        function markRootFinished(root, remainingLanes) {\n            var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n            root.pendingLanes = remainingLanes; // Let's try everything again\n            root.suspendedLanes = 0;\n            root.pingedLanes = 0;\n            root.expiredLanes &= remainingLanes;\n            root.mutableReadLanes &= remainingLanes;\n            root.entangledLanes &= remainingLanes;\n            var entanglements = root.entanglements;\n            var eventTimes = root.eventTimes;\n            var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work\n            var lanes = noLongerPendingLanes;\n            while(lanes > 0){\n                var index = pickArbitraryLaneIndex(lanes);\n                var lane = 1 << index;\n                entanglements[index] = NoLanes;\n                eventTimes[index] = NoTimestamp;\n                expirationTimes[index] = NoTimestamp;\n                lanes &= ~lane;\n            }\n        }\n        function markRootEntangled(root, entangledLanes) {\n            // In addition to entangling each of the given lanes with each other, we also\n            // have to consider _transitive_ entanglements. For each lane that is already\n            // entangled with *any* of the given lanes, that lane is now transitively\n            // entangled with *all* the given lanes.\n            //\n            // Translated: If C is entangled with A, then entangling A with B also\n            // entangles C with B.\n            //\n            // If this is hard to grasp, it might help to intentionally break this\n            // function and look at the tests that fail in ReactTransition-test.js. Try\n            // commenting out one of the conditions below.\n            var rootEntangledLanes = root.entangledLanes |= entangledLanes;\n            var entanglements = root.entanglements;\n            var lanes = rootEntangledLanes;\n            while(lanes){\n                var index = pickArbitraryLaneIndex(lanes);\n                var lane = 1 << index;\n                if (lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?\n                entanglements[index] & entangledLanes) {\n                    entanglements[index] |= entangledLanes;\n                }\n                lanes &= ~lane;\n            }\n        }\n        function getBumpedLaneForHydration(root, renderLanes) {\n            var renderLane = getHighestPriorityLane(renderLanes);\n            var lane;\n            switch(renderLane){\n                case InputContinuousLane:\n                    lane = InputContinuousHydrationLane;\n                    break;\n                case DefaultLane:\n                    lane = DefaultHydrationLane;\n                    break;\n                case TransitionLane1:\n                case TransitionLane2:\n                case TransitionLane3:\n                case TransitionLane4:\n                case TransitionLane5:\n                case TransitionLane6:\n                case TransitionLane7:\n                case TransitionLane8:\n                case TransitionLane9:\n                case TransitionLane10:\n                case TransitionLane11:\n                case TransitionLane12:\n                case TransitionLane13:\n                case TransitionLane14:\n                case TransitionLane15:\n                case TransitionLane16:\n                case RetryLane1:\n                case RetryLane2:\n                case RetryLane3:\n                case RetryLane4:\n                case RetryLane5:\n                    lane = TransitionHydrationLane;\n                    break;\n                case IdleLane:\n                    lane = IdleHydrationLane;\n                    break;\n                default:\n                    // Everything else is already either a hydration lane, or shouldn't\n                    // be retried at a hydration lane.\n                    lane = NoLane;\n                    break;\n            } // Check if the lane we chose is suspended. If so, that indicates that we\n            // already attempted and failed to hydrate at that level. Also check if we're\n            // already rendering that lane, which is rare but could happen.\n            if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n                // Give up trying to hydrate and fall back to client render.\n                return NoLane;\n            }\n            return lane;\n        }\n        function addFiberToLanesMap(root, fiber, lanes) {\n            if (!isDevToolsPresent) {\n                return;\n            }\n            var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n            while(lanes > 0){\n                var index = laneToIndex(lanes);\n                var lane = 1 << index;\n                var updaters = pendingUpdatersLaneMap[index];\n                updaters.add(fiber);\n                lanes &= ~lane;\n            }\n        }\n        function movePendingFibersToMemoized(root, lanes) {\n            if (!isDevToolsPresent) {\n                return;\n            }\n            var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n            var memoizedUpdaters = root.memoizedUpdaters;\n            while(lanes > 0){\n                var index = laneToIndex(lanes);\n                var lane = 1 << index;\n                var updaters = pendingUpdatersLaneMap[index];\n                if (updaters.size > 0) {\n                    updaters.forEach(function(fiber) {\n                        var alternate = fiber.alternate;\n                        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n                            memoizedUpdaters.add(fiber);\n                        }\n                    });\n                    updaters.clear();\n                }\n                lanes &= ~lane;\n            }\n        }\n        var DiscreteEventPriority = SyncLane;\n        var ContinuousEventPriority = InputContinuousLane;\n        var DefaultEventPriority = DefaultLane;\n        var IdleEventPriority = IdleLane;\n        var currentUpdatePriority = NoLane;\n        function getCurrentUpdatePriority() {\n            return currentUpdatePriority;\n        }\n        function setCurrentUpdatePriority(newPriority) {\n            currentUpdatePriority = newPriority;\n        }\n        function runWithPriority(priority, fn) {\n            var previousPriority = currentUpdatePriority;\n            try {\n                currentUpdatePriority = priority;\n                return fn();\n            } finally{\n                currentUpdatePriority = previousPriority;\n            }\n        }\n        function higherEventPriority(a, b) {\n            return a !== 0 && a < b ? a : b;\n        }\n        function lowerEventPriority(a, b) {\n            return a === 0 || a > b ? a : b;\n        }\n        function isHigherEventPriority(a, b) {\n            return a !== 0 && a < b;\n        }\n        function lanesToEventPriority(lanes) {\n            var lane = getHighestPriorityLane(lanes);\n            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n                return DiscreteEventPriority;\n            }\n            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n                return ContinuousEventPriority;\n            }\n            if (includesNonIdleWork(lane)) {\n                return DefaultEventPriority;\n            }\n            return IdleEventPriority;\n        }\n        // This module only exists as an ESM wrapper around the external CommonJS\n        var scheduleCallback = Scheduler.unstable_scheduleCallback;\n        var cancelCallback = Scheduler.unstable_cancelCallback;\n        var shouldYield = Scheduler.unstable_shouldYield;\n        var requestPaint = Scheduler.unstable_requestPaint;\n        var now$1 = Scheduler.unstable_now;\n        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;\n        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\n        var NormalPriority = Scheduler.unstable_NormalPriority;\n        var IdlePriority = Scheduler.unstable_IdlePriority;\n        // this doesn't actually exist on the scheduler, but it *does*\n        // on scheduler/unstable_mock, which we'll need for internal testing\n        var unstable_yieldValue = Scheduler.unstable_yieldValue;\n        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;\n        var rendererID = null;\n        var injectedHook = null;\n        var injectedProfilingHooks = null;\n        var hasLoggedError = false;\n        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\";\n        function injectInternals(internals) {\n            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === \"undefined\") {\n                // No DevTools\n                return false;\n            }\n            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n            if (hook.isDisabled) {\n                // This isn't a real property on the hook, but it can be set to opt out\n                // of DevTools integration and associated warnings and logs.\n                // https://github.com/facebook/react/issues/3877\n                return true;\n            }\n            if (!hook.supportsFiber) {\n                {\n                    error(\"The installed version of React DevTools is too old and will not work \" + \"with the current version of React. Please update React DevTools. \" + \"https://reactjs.org/link/react-devtools\");\n                }\n                return true;\n            }\n            try {\n                if (enableSchedulingProfiler) {\n                    // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n                    // This gives DevTools a way to feature detect that isn't tied to version number\n                    // (since profiling and timeline are controlled by different feature flags).\n                    internals = assign({}, internals, {\n                        getLaneLabelMap: getLaneLabelMap,\n                        injectProfilingHooks: injectProfilingHooks\n                    });\n                }\n                rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n                injectedHook = hook;\n            } catch (err) {\n                // Catch all errors because it is unsafe to throw during initialization.\n                {\n                    error(\"React instrumentation encountered an error: %s.\", err);\n                }\n            }\n            if (hook.checkDCE) {\n                // This is the real DevTools.\n                return true;\n            } else {\n                // This is likely a hook installed by Fast Refresh runtime.\n                return false;\n            }\n        }\n        function onScheduleRoot(root, children) {\n            {\n                if (injectedHook && typeof injectedHook.onScheduleFiberRoot === \"function\") {\n                    try {\n                        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n                    } catch (err) {\n                        if (!hasLoggedError) {\n                            hasLoggedError = true;\n                            error(\"React instrumentation encountered an error: %s\", err);\n                        }\n                    }\n                }\n            }\n        }\n        function onCommitRoot(root, eventPriority) {\n            if (injectedHook && typeof injectedHook.onCommitFiberRoot === \"function\") {\n                try {\n                    var didError = (root.current.flags & DidCapture) === DidCapture;\n                    if (enableProfilerTimer) {\n                        var schedulerPriority;\n                        switch(eventPriority){\n                            case DiscreteEventPriority:\n                                schedulerPriority = ImmediatePriority;\n                                break;\n                            case ContinuousEventPriority:\n                                schedulerPriority = UserBlockingPriority;\n                                break;\n                            case DefaultEventPriority:\n                                schedulerPriority = NormalPriority;\n                                break;\n                            case IdleEventPriority:\n                                schedulerPriority = IdlePriority;\n                                break;\n                            default:\n                                schedulerPriority = NormalPriority;\n                                break;\n                        }\n                        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);\n                    } else {\n                        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n                    }\n                } catch (err) {\n                    {\n                        if (!hasLoggedError) {\n                            hasLoggedError = true;\n                            error(\"React instrumentation encountered an error: %s\", err);\n                        }\n                    }\n                }\n            }\n        }\n        function onPostCommitRoot(root) {\n            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === \"function\") {\n                try {\n                    injectedHook.onPostCommitFiberRoot(rendererID, root);\n                } catch (err) {\n                    {\n                        if (!hasLoggedError) {\n                            hasLoggedError = true;\n                            error(\"React instrumentation encountered an error: %s\", err);\n                        }\n                    }\n                }\n            }\n        }\n        function onCommitUnmount(fiber) {\n            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === \"function\") {\n                try {\n                    injectedHook.onCommitFiberUnmount(rendererID, fiber);\n                } catch (err) {\n                    {\n                        if (!hasLoggedError) {\n                            hasLoggedError = true;\n                            error(\"React instrumentation encountered an error: %s\", err);\n                        }\n                    }\n                }\n            }\n        }\n        function setIsStrictModeForDevtools(newIsStrictMode) {\n            {\n                if (typeof unstable_yieldValue === \"function\") {\n                    // We're in a test because Scheduler.unstable_yieldValue only exists\n                    // in SchedulerMock. To reduce the noise in strict mode tests,\n                    // suppress warnings and disable scheduler yielding during the double render\n                    unstable_setDisableYieldValue(newIsStrictMode);\n                    setSuppressWarning(newIsStrictMode);\n                }\n                if (injectedHook && typeof injectedHook.setStrictMode === \"function\") {\n                    try {\n                        injectedHook.setStrictMode(rendererID, newIsStrictMode);\n                    } catch (err) {\n                        {\n                            if (!hasLoggedError) {\n                                hasLoggedError = true;\n                                error(\"React instrumentation encountered an error: %s\", err);\n                            }\n                        }\n                    }\n                }\n            }\n        } // Profiler API hooks\n        function injectProfilingHooks(profilingHooks) {\n            injectedProfilingHooks = profilingHooks;\n        }\n        function getLaneLabelMap() {\n            {\n                var map = new Map();\n                var lane = 1;\n                for(var index = 0; index < TotalLanes; index++){\n                    var label = getLabelForLane(lane);\n                    map.set(lane, label);\n                    lane *= 2;\n                }\n                return map;\n            }\n        }\n        function markCommitStarted(lanes) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === \"function\") {\n                    injectedProfilingHooks.markCommitStarted(lanes);\n                }\n            }\n        }\n        function markCommitStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === \"function\") {\n                    injectedProfilingHooks.markCommitStopped();\n                }\n            }\n        }\n        function markComponentRenderStarted(fiber) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === \"function\") {\n                    injectedProfilingHooks.markComponentRenderStarted(fiber);\n                }\n            }\n        }\n        function markComponentRenderStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === \"function\") {\n                    injectedProfilingHooks.markComponentRenderStopped();\n                }\n            }\n        }\n        function markComponentPassiveEffectMountStarted(fiber) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === \"function\") {\n                    injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n                }\n            }\n        }\n        function markComponentPassiveEffectMountStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === \"function\") {\n                    injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n                }\n            }\n        }\n        function markComponentPassiveEffectUnmountStarted(fiber) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === \"function\") {\n                    injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n                }\n            }\n        }\n        function markComponentPassiveEffectUnmountStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === \"function\") {\n                    injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n                }\n            }\n        }\n        function markComponentLayoutEffectMountStarted(fiber) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === \"function\") {\n                    injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n                }\n            }\n        }\n        function markComponentLayoutEffectMountStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === \"function\") {\n                    injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n                }\n            }\n        }\n        function markComponentLayoutEffectUnmountStarted(fiber) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === \"function\") {\n                    injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n                }\n            }\n        }\n        function markComponentLayoutEffectUnmountStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === \"function\") {\n                    injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n                }\n            }\n        }\n        function markComponentErrored(fiber, thrownValue, lanes) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === \"function\") {\n                    injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n                }\n            }\n        }\n        function markComponentSuspended(fiber, wakeable, lanes) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === \"function\") {\n                    injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n                }\n            }\n        }\n        function markLayoutEffectsStarted(lanes) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === \"function\") {\n                    injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n                }\n            }\n        }\n        function markLayoutEffectsStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === \"function\") {\n                    injectedProfilingHooks.markLayoutEffectsStopped();\n                }\n            }\n        }\n        function markPassiveEffectsStarted(lanes) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === \"function\") {\n                    injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n                }\n            }\n        }\n        function markPassiveEffectsStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === \"function\") {\n                    injectedProfilingHooks.markPassiveEffectsStopped();\n                }\n            }\n        }\n        function markRenderStarted(lanes) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === \"function\") {\n                    injectedProfilingHooks.markRenderStarted(lanes);\n                }\n            }\n        }\n        function markRenderYielded() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === \"function\") {\n                    injectedProfilingHooks.markRenderYielded();\n                }\n            }\n        }\n        function markRenderStopped() {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === \"function\") {\n                    injectedProfilingHooks.markRenderStopped();\n                }\n            }\n        }\n        function markRenderScheduled(lane) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === \"function\") {\n                    injectedProfilingHooks.markRenderScheduled(lane);\n                }\n            }\n        }\n        function markForceUpdateScheduled(fiber, lane) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === \"function\") {\n                    injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n                }\n            }\n        }\n        function markStateUpdateScheduled(fiber, lane) {\n            {\n                if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === \"function\") {\n                    injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n                }\n            }\n        }\n        /**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */ function is(x, y) {\n            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n            ;\n        }\n        var objectIs = typeof Object.is === \"function\" ? Object.is : is;\n        var syncQueue = null;\n        var includesLegacySyncCallbacks = false;\n        var isFlushingSyncQueue = false;\n        function scheduleSyncCallback(callback) {\n            // Push this callback into an internal queue. We'll flush these either in\n            // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n            if (syncQueue === null) {\n                syncQueue = [\n                    callback\n                ];\n            } else {\n                // Push onto existing queue. Don't need to schedule a callback because\n                // we already scheduled one when we created the queue.\n                syncQueue.push(callback);\n            }\n        }\n        function scheduleLegacySyncCallback(callback) {\n            includesLegacySyncCallbacks = true;\n            scheduleSyncCallback(callback);\n        }\n        function flushSyncCallbacksOnlyInLegacyMode() {\n            // Only flushes the queue if there's a legacy sync callback scheduled.\n            // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n            // it might make more sense for the queue to be a list of roots instead of a\n            // list of generic callbacks. Then we can have two: one for legacy roots, one\n            // for concurrent roots. And this method would only flush the legacy ones.\n            if (includesLegacySyncCallbacks) {\n                flushSyncCallbacks();\n            }\n        }\n        function flushSyncCallbacks() {\n            if (!isFlushingSyncQueue && syncQueue !== null) {\n                // Prevent re-entrance.\n                isFlushingSyncQueue = true;\n                var i = 0;\n                var previousUpdatePriority = getCurrentUpdatePriority();\n                try {\n                    var isSync = true;\n                    var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this\n                    // queue is in the render or commit phases.\n                    setCurrentUpdatePriority(DiscreteEventPriority);\n                    for(; i < queue.length; i++){\n                        var callback = queue[i];\n                        do {\n                            callback = callback(isSync);\n                        }while (callback !== null);\n                    }\n                    syncQueue = null;\n                    includesLegacySyncCallbacks = false;\n                } catch (error) {\n                    // If something throws, leave the remaining callbacks on the queue.\n                    if (syncQueue !== null) {\n                        syncQueue = syncQueue.slice(i + 1);\n                    } // Resume flushing in the next tick\n                    scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n                    throw error;\n                } finally{\n                    setCurrentUpdatePriority(previousUpdatePriority);\n                    isFlushingSyncQueue = false;\n                }\n            }\n            return null;\n        }\n        // This is imported by the event replaying implementation in React DOM. It's\n        // in a separate file to break a circular dependency between the renderer and\n        // the reconciler.\n        function isRootDehydrated(root) {\n            var currentState = root.current.memoizedState;\n            return currentState.isDehydrated;\n        }\n        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;\n        var NoTransition = null;\n        function requestCurrentTransition() {\n            return ReactCurrentBatchConfig.transition;\n        }\n        /**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */ function shallowEqual(objA, objB) {\n            if (objectIs(objA, objB)) {\n                return true;\n            }\n            if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n                return false;\n            }\n            var keysA = Object.keys(objA);\n            var keysB = Object.keys(objB);\n            if (keysA.length !== keysB.length) {\n                return false;\n            } // Test for A's keys different from B.\n            for(var i = 0; i < keysA.length; i++){\n                var currentKey = keysA[i];\n                if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        function describeFiber(fiber) {\n            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;\n            var source = fiber._debugSource;\n            switch(fiber.tag){\n                case HostComponent:\n                    return describeBuiltInComponentFrame(fiber.type);\n                case LazyComponent:\n                    return describeBuiltInComponentFrame(\"Lazy\");\n                case SuspenseComponent:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case SuspenseListComponent:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n                case FunctionComponent:\n                case IndeterminateComponent:\n                case SimpleMemoComponent:\n                    return describeFunctionComponentFrame(fiber.type);\n                case ForwardRef:\n                    return describeFunctionComponentFrame(fiber.type.render);\n                case ClassComponent:\n                    return describeClassComponentFrame(fiber.type);\n                default:\n                    return \"\";\n            }\n        }\n        function getStackByFiberInDevAndProd(workInProgress) {\n            try {\n                var info = \"\";\n                var node = workInProgress;\n                do {\n                    info += describeFiber(node);\n                    node = node.return;\n                }while (node);\n                return info;\n            } catch (x) {\n                return \"\\nError generating stack: \" + x.message + \"\\n\" + x.stack;\n            }\n        }\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        var current = null;\n        var isRendering = false;\n        function getCurrentFiberOwnerNameInDevOrNull() {\n            {\n                if (current === null) {\n                    return null;\n                }\n                var owner = current._debugOwner;\n                if (owner !== null && typeof owner !== \"undefined\") {\n                    return getComponentNameFromFiber(owner);\n                }\n            }\n            return null;\n        }\n        function getCurrentFiberStackInDev() {\n            {\n                if (current === null) {\n                    return \"\";\n                } // Safe because if current fiber exists, we are reconciling,\n                // and it is guaranteed to be the work-in-progress version.\n                return getStackByFiberInDevAndProd(current);\n            }\n        }\n        function resetCurrentFiber() {\n            {\n                ReactDebugCurrentFrame$1.getCurrentStack = null;\n                current = null;\n                isRendering = false;\n            }\n        }\n        function setCurrentFiber(fiber) {\n            {\n                ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;\n                current = fiber;\n                isRendering = false;\n            }\n        }\n        function setIsRendering(rendering) {\n            {\n                isRendering = rendering;\n            }\n        }\n        var ReactStrictModeWarnings = {\n            recordUnsafeLifecycleWarnings: function(fiber, instance) {},\n            flushPendingUnsafeLifecycleWarnings: function() {},\n            recordLegacyContextWarning: function(fiber, instance) {},\n            flushLegacyContextWarning: function() {},\n            discardPendingWarnings: function() {}\n        };\n        {\n            var findStrictRoot = function(fiber) {\n                var maybeStrictRoot = null;\n                var node = fiber;\n                while(node !== null){\n                    if (node.mode & StrictLegacyMode) {\n                        maybeStrictRoot = node;\n                    }\n                    node = node.return;\n                }\n                return maybeStrictRoot;\n            };\n            var setToSortedString = function(set) {\n                var array = [];\n                set.forEach(function(value) {\n                    array.push(value);\n                });\n                return array.sort().join(\", \");\n            };\n            var pendingComponentWillMountWarnings = [];\n            var pendingUNSAFE_ComponentWillMountWarnings = [];\n            var pendingComponentWillReceivePropsWarnings = [];\n            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n            var pendingComponentWillUpdateWarnings = [];\n            var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n            var didWarnAboutUnsafeLifecycles = new Set();\n            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {\n                // Dedupe strategy: Warn once per component.\n                if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n                    return;\n                }\n                if (typeof instance.componentWillMount === \"function\" && // Don't warn about react-lifecycles-compat polyfilled components.\n                instance.componentWillMount.__suppressDeprecationWarning !== true) {\n                    pendingComponentWillMountWarnings.push(fiber);\n                }\n                if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === \"function\") {\n                    pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n                }\n                if (typeof instance.componentWillReceiveProps === \"function\" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n                    pendingComponentWillReceivePropsWarnings.push(fiber);\n                }\n                if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === \"function\") {\n                    pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n                }\n                if (typeof instance.componentWillUpdate === \"function\" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n                    pendingComponentWillUpdateWarnings.push(fiber);\n                }\n                if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === \"function\") {\n                    pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n                }\n            };\n            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {\n                // We do an initial pass to gather component names\n                var componentWillMountUniqueNames = new Set();\n                if (pendingComponentWillMountWarnings.length > 0) {\n                    pendingComponentWillMountWarnings.forEach(function(fiber) {\n                        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n                        didWarnAboutUnsafeLifecycles.add(fiber.type);\n                    });\n                    pendingComponentWillMountWarnings = [];\n                }\n                var UNSAFE_componentWillMountUniqueNames = new Set();\n                if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n                    pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {\n                        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n                        didWarnAboutUnsafeLifecycles.add(fiber.type);\n                    });\n                    pendingUNSAFE_ComponentWillMountWarnings = [];\n                }\n                var componentWillReceivePropsUniqueNames = new Set();\n                if (pendingComponentWillReceivePropsWarnings.length > 0) {\n                    pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {\n                        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n                        didWarnAboutUnsafeLifecycles.add(fiber.type);\n                    });\n                    pendingComponentWillReceivePropsWarnings = [];\n                }\n                var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n                if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n                    pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {\n                        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n                        didWarnAboutUnsafeLifecycles.add(fiber.type);\n                    });\n                    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n                }\n                var componentWillUpdateUniqueNames = new Set();\n                if (pendingComponentWillUpdateWarnings.length > 0) {\n                    pendingComponentWillUpdateWarnings.forEach(function(fiber) {\n                        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n                        didWarnAboutUnsafeLifecycles.add(fiber.type);\n                    });\n                    pendingComponentWillUpdateWarnings = [];\n                }\n                var UNSAFE_componentWillUpdateUniqueNames = new Set();\n                if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n                    pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {\n                        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n                        didWarnAboutUnsafeLifecycles.add(fiber.type);\n                    });\n                    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n                } // Finally, we flush all the warnings\n                // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n                if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n                    var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n                    error(\"Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. \" + \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n\" + \"\\nPlease update the following components: %s\", sortedNames);\n                }\n                if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n                    var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n                    error(\"Using UNSAFE_componentWillReceiveProps in strict mode is not recommended \" + \"and may indicate bugs in your code. \" + \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move data fetching code or side effects to componentDidUpdate.\\n\" + \"* If you're updating state whenever props change, \" + \"refactor your code to use memoization techniques or move it to \" + \"static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n\" + \"\\nPlease update the following components: %s\", _sortedNames);\n                }\n                if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n                    var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n                    error(\"Using UNSAFE_componentWillUpdate in strict mode is not recommended \" + \"and may indicate bugs in your code. \" + \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move data fetching code or side effects to componentDidUpdate.\\n\" + \"\\nPlease update the following components: %s\", _sortedNames2);\n                }\n                if (componentWillMountUniqueNames.size > 0) {\n                    var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\n                    warn(\"componentWillMount has been renamed, and is not recommended for use. \" + \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n\" + \"* Rename componentWillMount to UNSAFE_componentWillMount to suppress \" + \"this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. \" + \"To rename all deprecated lifecycles to their new names, you can run \" + \"`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\" + \"\\nPlease update the following components: %s\", _sortedNames3);\n                }\n                if (componentWillReceivePropsUniqueNames.size > 0) {\n                    var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\n                    warn(\"componentWillReceiveProps has been renamed, and is not recommended for use. \" + \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move data fetching code or side effects to componentDidUpdate.\\n\" + \"* If you're updating state whenever props change, refactor your \" + \"code to use memoization techniques or move it to \" + \"static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n\" + \"* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress \" + \"this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. \" + \"To rename all deprecated lifecycles to their new names, you can run \" + \"`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\" + \"\\nPlease update the following components: %s\", _sortedNames4);\n                }\n                if (componentWillUpdateUniqueNames.size > 0) {\n                    var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\n                    warn(\"componentWillUpdate has been renamed, and is not recommended for use. \" + \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move data fetching code or side effects to componentDidUpdate.\\n\" + \"* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress \" + \"this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. \" + \"To rename all deprecated lifecycles to their new names, you can run \" + \"`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\" + \"\\nPlease update the following components: %s\", _sortedNames5);\n                }\n            };\n            var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n            var didWarnAboutLegacyContext = new Set();\n            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {\n                var strictRoot = findStrictRoot(fiber);\n                if (strictRoot === null) {\n                    error(\"Expected to find a StrictMode component in a strict mode tree. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n                    return;\n                } // Dedup strategy: Warn once per component.\n                if (didWarnAboutLegacyContext.has(fiber.type)) {\n                    return;\n                }\n                var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n                if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === \"function\") {\n                    if (warningsForRoot === undefined) {\n                        warningsForRoot = [];\n                        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n                    }\n                    warningsForRoot.push(fiber);\n                }\n            };\n            ReactStrictModeWarnings.flushLegacyContextWarning = function() {\n                pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {\n                    if (fiberArray.length === 0) {\n                        return;\n                    }\n                    var firstFiber = fiberArray[0];\n                    var uniqueNames = new Set();\n                    fiberArray.forEach(function(fiber) {\n                        uniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n                        didWarnAboutLegacyContext.add(fiber.type);\n                    });\n                    var sortedNames = setToSortedString(uniqueNames);\n                    try {\n                        setCurrentFiber(firstFiber);\n                        error(\"Legacy context API has been detected within a strict-mode tree.\" + \"\\n\\nThe old API will be supported in all 16.x releases, but applications \" + \"using it should migrate to the new version.\" + \"\\n\\nPlease update the following components: %s\" + \"\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context\", sortedNames);\n                    } finally{\n                        resetCurrentFiber();\n                    }\n                });\n            };\n            ReactStrictModeWarnings.discardPendingWarnings = function() {\n                pendingComponentWillMountWarnings = [];\n                pendingUNSAFE_ComponentWillMountWarnings = [];\n                pendingComponentWillReceivePropsWarnings = [];\n                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n                pendingComponentWillUpdateWarnings = [];\n                pendingUNSAFE_ComponentWillUpdateWarnings = [];\n                pendingLegacyContextWarning = new Map();\n            };\n        }\n        /*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\";\n                return type;\n            }\n        } // $FlowFixMe only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function checkPropStringCoercion(value, propName) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided `%s` prop is an unsupported type %s.\" + \" This value must be coerced to a string before before using it here.\", propName, typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function resolveDefaultProps(Component, baseProps) {\n            if (Component && Component.defaultProps) {\n                // Resolve default props. Taken from ReactElement\n                var props = assign({}, baseProps);\n                var defaultProps = Component.defaultProps;\n                for(var propName in defaultProps){\n                    if (props[propName] === undefined) {\n                        props[propName] = defaultProps[propName];\n                    }\n                }\n                return props;\n            }\n            return baseProps;\n        }\n        var valueCursor = createCursor(null);\n        var rendererSigil;\n        {\n            // Use this to detect multiple renderers using the same context\n            rendererSigil = {};\n        }\n        var currentlyRenderingFiber = null;\n        var lastContextDependency = null;\n        var lastFullyObservedContext = null;\n        var isDisallowedContextReadInDEV = false;\n        function resetContextDependencies() {\n            // This is called right before React yields execution, to ensure `readContext`\n            // cannot be called outside the render phase.\n            currentlyRenderingFiber = null;\n            lastContextDependency = null;\n            lastFullyObservedContext = null;\n            {\n                isDisallowedContextReadInDEV = false;\n            }\n        }\n        function enterDisallowedContextReadInDEV() {\n            {\n                isDisallowedContextReadInDEV = true;\n            }\n        }\n        function exitDisallowedContextReadInDEV() {\n            {\n                isDisallowedContextReadInDEV = false;\n            }\n        }\n        function pushProvider(providerFiber, context, nextValue) {\n            if (isPrimaryRenderer) {\n                push(valueCursor, context._currentValue, providerFiber);\n                context._currentValue = nextValue;\n                {\n                    if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n                        error(\"Detected multiple renderers concurrently rendering the \" + \"same context provider. This is currently unsupported.\");\n                    }\n                    context._currentRenderer = rendererSigil;\n                }\n            } else {\n                push(valueCursor, context._currentValue2, providerFiber);\n                context._currentValue2 = nextValue;\n                {\n                    if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n                        error(\"Detected multiple renderers concurrently rendering the \" + \"same context provider. This is currently unsupported.\");\n                    }\n                    context._currentRenderer2 = rendererSigil;\n                }\n            }\n        }\n        function popProvider(context, providerFiber) {\n            var currentValue = valueCursor.current;\n            pop(valueCursor, providerFiber);\n            if (isPrimaryRenderer) {\n                {\n                    context._currentValue = currentValue;\n                }\n            } else {\n                {\n                    context._currentValue2 = currentValue;\n                }\n            }\n        }\n        function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n            // Update the child lanes of all the ancestors, including the alternates.\n            var node = parent;\n            while(node !== null){\n                var alternate = node.alternate;\n                if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n                    node.childLanes = mergeLanes(node.childLanes, renderLanes);\n                    if (alternate !== null) {\n                        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n                    }\n                } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n                    alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n                }\n                if (node === propagationRoot) {\n                    break;\n                }\n                node = node.return;\n            }\n            {\n                if (node !== propagationRoot) {\n                    error(\"Expected to find the propagation root when scheduling context work. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        function propagateContextChange(workInProgress, context, renderLanes) {\n            {\n                propagateContextChange_eager(workInProgress, context, renderLanes);\n            }\n        }\n        function propagateContextChange_eager(workInProgress, context, renderLanes) {\n            var fiber = workInProgress.child;\n            if (fiber !== null) {\n                // Set the return pointer of the child to the work-in-progress fiber.\n                fiber.return = workInProgress;\n            }\n            while(fiber !== null){\n                var nextFiber = void 0; // Visit this fiber.\n                var list = fiber.dependencies;\n                if (list !== null) {\n                    nextFiber = fiber.child;\n                    var dependency = list.firstContext;\n                    while(dependency !== null){\n                        // Check if the context matches.\n                        if (dependency.context === context) {\n                            // Match! Schedule an update on this fiber.\n                            if (fiber.tag === ClassComponent) {\n                                // Schedule a force update on the work-in-progress.\n                                var lane = pickArbitraryLane(renderLanes);\n                                var update = createUpdate(NoTimestamp, lane);\n                                update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n                                // update to the current fiber, too, which means it will persist even if\n                                // this render is thrown away. Since it's a race condition, not sure it's\n                                // worth fixing.\n                                // Inlined `enqueueUpdate` to remove interleaved update check\n                                var updateQueue = fiber.updateQueue;\n                                if (updateQueue === null) ;\n                                else {\n                                    var sharedQueue = updateQueue.shared;\n                                    var pending = sharedQueue.pending;\n                                    if (pending === null) {\n                                        // This is the first update. Create a circular list.\n                                        update.next = update;\n                                    } else {\n                                        update.next = pending.next;\n                                        pending.next = update;\n                                    }\n                                    sharedQueue.pending = update;\n                                }\n                            }\n                            fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n                            var alternate = fiber.alternate;\n                            if (alternate !== null) {\n                                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n                            }\n                            scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\n                            list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n                            break;\n                        }\n                        dependency = dependency.next;\n                    }\n                } else if (fiber.tag === ContextProvider) {\n                    // Don't scan deeper if this is a matching provider\n                    nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n                } else if (fiber.tag === DehydratedFragment) {\n                    // If a dehydrated suspense boundary is in this subtree, we don't know\n                    // if it will have any context consumers in it. The best we can do is\n                    // mark it as having updates.\n                    var parentSuspense = fiber.return;\n                    if (parentSuspense === null) {\n                        throw new Error(\"We just came from a parent so we must have had a parent. This is a bug in React.\");\n                    }\n                    parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n                    var _alternate = parentSuspense.alternate;\n                    if (_alternate !== null) {\n                        _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);\n                    } // This is intentionally passing this fiber as the parent\n                    // because we want to schedule this fiber as having work\n                    // on its children. We'll use the childLanes on\n                    // this fiber to indicate that a context has changed.\n                    scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n                    nextFiber = fiber.sibling;\n                } else {\n                    // Traverse down.\n                    nextFiber = fiber.child;\n                }\n                if (nextFiber !== null) {\n                    // Set the return pointer of the child to the work-in-progress fiber.\n                    nextFiber.return = fiber;\n                } else {\n                    // No child. Traverse to next sibling.\n                    nextFiber = fiber;\n                    while(nextFiber !== null){\n                        if (nextFiber === workInProgress) {\n                            // We're back to the root of this subtree. Exit.\n                            nextFiber = null;\n                            break;\n                        }\n                        var sibling = nextFiber.sibling;\n                        if (sibling !== null) {\n                            // Set the return pointer of the sibling to the work-in-progress fiber.\n                            sibling.return = nextFiber.return;\n                            nextFiber = sibling;\n                            break;\n                        } // No more siblings. Traverse up.\n                        nextFiber = nextFiber.return;\n                    }\n                }\n                fiber = nextFiber;\n            }\n        }\n        function prepareToReadContext(workInProgress, renderLanes) {\n            currentlyRenderingFiber = workInProgress;\n            lastContextDependency = null;\n            lastFullyObservedContext = null;\n            var dependencies = workInProgress.dependencies;\n            if (dependencies !== null) {\n                {\n                    var firstContext = dependencies.firstContext;\n                    if (firstContext !== null) {\n                        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n                            // Context list has a pending update. Mark that this fiber performed work.\n                            markWorkInProgressReceivedUpdate();\n                        } // Reset the work-in-progress list\n                        dependencies.firstContext = null;\n                    }\n                }\n            }\n        }\n        function readContext(context) {\n            {\n                // This warning would fire if you read context inside a Hook like useMemo.\n                // Unlike the class check below, it's not enforced in production for perf.\n                if (isDisallowedContextReadInDEV) {\n                    error(\"Context can only be read while React is rendering. \" + \"In classes, you can read it in the render method or getDerivedStateFromProps. \" + \"In function components, you can read it directly in the function body, but not \" + \"inside Hooks like useReducer() or useMemo().\");\n                }\n            }\n            var value = isPrimaryRenderer ? context._currentValue : context._currentValue2;\n            if (lastFullyObservedContext === context) ;\n            else {\n                var contextItem = {\n                    context: context,\n                    memoizedValue: value,\n                    next: null\n                };\n                if (lastContextDependency === null) {\n                    if (currentlyRenderingFiber === null) {\n                        throw new Error(\"Context can only be read while React is rendering. \" + \"In classes, you can read it in the render method or getDerivedStateFromProps. \" + \"In function components, you can read it directly in the function body, but not \" + \"inside Hooks like useReducer() or useMemo().\");\n                    } // This is the first dependency for this component. Create a new list.\n                    lastContextDependency = contextItem;\n                    currentlyRenderingFiber.dependencies = {\n                        lanes: NoLanes,\n                        firstContext: contextItem\n                    };\n                } else {\n                    // Append a new context item.\n                    lastContextDependency = lastContextDependency.next = contextItem;\n                }\n            }\n            return value;\n        }\n        // An array of all update queues that received updates during the current\n        // render. When this render exits, either because it finishes or because it is\n        // interrupted, the interleaved updates will be transferred onto the main part\n        // of the queue.\n        var interleavedQueues = null;\n        function pushInterleavedQueue(queue) {\n            if (interleavedQueues === null) {\n                interleavedQueues = [\n                    queue\n                ];\n            } else {\n                interleavedQueues.push(queue);\n            }\n        }\n        function enqueueInterleavedUpdates() {\n            // Transfer the interleaved updates onto the main queue. Each queue has a\n            // `pending` field and an `interleaved` field. When they are not null, they\n            // point to the last node in a circular linked list. We need to append the\n            // interleaved list to the end of the pending list by joining them into a\n            // single, circular list.\n            if (interleavedQueues !== null) {\n                for(var i = 0; i < interleavedQueues.length; i++){\n                    var queue = interleavedQueues[i];\n                    var lastInterleavedUpdate = queue.interleaved;\n                    if (lastInterleavedUpdate !== null) {\n                        queue.interleaved = null;\n                        var firstInterleavedUpdate = lastInterleavedUpdate.next;\n                        var lastPendingUpdate = queue.pending;\n                        if (lastPendingUpdate !== null) {\n                            var firstPendingUpdate = lastPendingUpdate.next;\n                            lastPendingUpdate.next = firstInterleavedUpdate;\n                            lastInterleavedUpdate.next = firstPendingUpdate;\n                        }\n                        queue.pending = lastInterleavedUpdate;\n                    }\n                }\n                interleavedQueues = null;\n            }\n        }\n        var UpdateState = 0;\n        var ReplaceState = 1;\n        var ForceUpdate = 2;\n        var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n        // It should only be read right after calling `processUpdateQueue`, via\n        // `checkHasForceUpdateAfterProcessing`.\n        var hasForceUpdate = false;\n        var didWarnUpdateInsideUpdate;\n        var currentlyProcessingQueue;\n        {\n            didWarnUpdateInsideUpdate = false;\n            currentlyProcessingQueue = null;\n        }\n        function initializeUpdateQueue(fiber) {\n            var queue = {\n                baseState: fiber.memoizedState,\n                firstBaseUpdate: null,\n                lastBaseUpdate: null,\n                shared: {\n                    pending: null,\n                    interleaved: null,\n                    lanes: NoLanes\n                },\n                effects: null\n            };\n            fiber.updateQueue = queue;\n        }\n        function cloneUpdateQueue(current, workInProgress) {\n            // Clone the update queue from current. Unless it's already a clone.\n            var queue = workInProgress.updateQueue;\n            var currentQueue = current.updateQueue;\n            if (queue === currentQueue) {\n                var clone = {\n                    baseState: currentQueue.baseState,\n                    firstBaseUpdate: currentQueue.firstBaseUpdate,\n                    lastBaseUpdate: currentQueue.lastBaseUpdate,\n                    shared: currentQueue.shared,\n                    effects: currentQueue.effects\n                };\n                workInProgress.updateQueue = clone;\n            }\n        }\n        function createUpdate(eventTime, lane) {\n            var update = {\n                eventTime: eventTime,\n                lane: lane,\n                tag: UpdateState,\n                payload: null,\n                callback: null,\n                next: null\n            };\n            return update;\n        }\n        function enqueueUpdate(fiber, update, lane) {\n            var updateQueue = fiber.updateQueue;\n            if (updateQueue === null) {\n                // Only occurs if the fiber has been unmounted.\n                return;\n            }\n            var sharedQueue = updateQueue.shared;\n            if (isInterleavedUpdate(fiber)) {\n                var interleaved = sharedQueue.interleaved;\n                if (interleaved === null) {\n                    // This is the first update. Create a circular list.\n                    update.next = update; // At the end of the current render, this queue's interleaved updates will\n                    // be transferred to the pending queue.\n                    pushInterleavedQueue(sharedQueue);\n                } else {\n                    update.next = interleaved.next;\n                    interleaved.next = update;\n                }\n                sharedQueue.interleaved = update;\n            } else {\n                var pending = sharedQueue.pending;\n                if (pending === null) {\n                    // This is the first update. Create a circular list.\n                    update.next = update;\n                } else {\n                    update.next = pending.next;\n                    pending.next = update;\n                }\n                sharedQueue.pending = update;\n            }\n            {\n                if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\n                    error(\"An update (setState, replaceState, or forceUpdate) was scheduled \" + \"from inside an update function. Update functions should be pure, \" + \"with zero side-effects. Consider using componentDidUpdate or a \" + \"callback.\");\n                    didWarnUpdateInsideUpdate = true;\n                }\n            }\n        }\n        function entangleTransitions(root, fiber, lane) {\n            var updateQueue = fiber.updateQueue;\n            if (updateQueue === null) {\n                // Only occurs if the fiber has been unmounted.\n                return;\n            }\n            var sharedQueue = updateQueue.shared;\n            if (isTransitionLane(lane)) {\n                var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\n                // have finished. We can remove them from the shared queue, which represents\n                // a superset of the actually pending lanes. In some cases we may entangle\n                // more than we need to, but that's OK. In fact it's worse if we *don't*\n                // entangle when we should.\n                queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n                var newQueueLanes = mergeLanes(queueLanes, lane);\n                sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n                // the lane finished since the last time we entangled it. So we need to\n                // entangle it again, just to be sure.\n                markRootEntangled(root, newQueueLanes);\n            }\n        }\n        function enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n            // Captured updates are updates that are thrown by a child during the render\n            // phase. They should be discarded if the render is aborted. Therefore,\n            // we should only put them on the work-in-progress queue, not the current one.\n            var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n            var current = workInProgress.alternate;\n            if (current !== null) {\n                var currentQueue = current.updateQueue;\n                if (queue === currentQueue) {\n                    // The work-in-progress queue is the same as current. This happens when\n                    // we bail out on a parent fiber that then captures an error thrown by\n                    // a child. Since we want to append the update only to the work-in\n                    // -progress queue, we need to clone the updates. We usually clone during\n                    // processUpdateQueue, but that didn't happen in this case because we\n                    // skipped over the parent when we bailed out.\n                    var newFirst = null;\n                    var newLast = null;\n                    var firstBaseUpdate = queue.firstBaseUpdate;\n                    if (firstBaseUpdate !== null) {\n                        // Loop through the updates and clone them.\n                        var update = firstBaseUpdate;\n                        do {\n                            var clone = {\n                                eventTime: update.eventTime,\n                                lane: update.lane,\n                                tag: update.tag,\n                                payload: update.payload,\n                                callback: update.callback,\n                                next: null\n                            };\n                            if (newLast === null) {\n                                newFirst = newLast = clone;\n                            } else {\n                                newLast.next = clone;\n                                newLast = clone;\n                            }\n                            update = update.next;\n                        }while (update !== null); // Append the captured update the end of the cloned list.\n                        if (newLast === null) {\n                            newFirst = newLast = capturedUpdate;\n                        } else {\n                            newLast.next = capturedUpdate;\n                            newLast = capturedUpdate;\n                        }\n                    } else {\n                        // There are no base updates.\n                        newFirst = newLast = capturedUpdate;\n                    }\n                    queue = {\n                        baseState: currentQueue.baseState,\n                        firstBaseUpdate: newFirst,\n                        lastBaseUpdate: newLast,\n                        shared: currentQueue.shared,\n                        effects: currentQueue.effects\n                    };\n                    workInProgress.updateQueue = queue;\n                    return;\n                }\n            } // Append the update to the end of the list.\n            var lastBaseUpdate = queue.lastBaseUpdate;\n            if (lastBaseUpdate === null) {\n                queue.firstBaseUpdate = capturedUpdate;\n            } else {\n                lastBaseUpdate.next = capturedUpdate;\n            }\n            queue.lastBaseUpdate = capturedUpdate;\n        }\n        function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n            switch(update.tag){\n                case ReplaceState:\n                    {\n                        var payload = update.payload;\n                        if (typeof payload === \"function\") {\n                            // Updater function\n                            {\n                                enterDisallowedContextReadInDEV();\n                            }\n                            var nextState = payload.call(instance, prevState, nextProps);\n                            {\n                                if (workInProgress.mode & StrictLegacyMode) {\n                                    setIsStrictModeForDevtools(true);\n                                    try {\n                                        payload.call(instance, prevState, nextProps);\n                                    } finally{\n                                        setIsStrictModeForDevtools(false);\n                                    }\n                                }\n                                exitDisallowedContextReadInDEV();\n                            }\n                            return nextState;\n                        } // State object\n                        return payload;\n                    }\n                case CaptureUpdate:\n                    {\n                        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n                    }\n                // Intentional fallthrough\n                case UpdateState:\n                    {\n                        var _payload = update.payload;\n                        var partialState;\n                        if (typeof _payload === \"function\") {\n                            // Updater function\n                            {\n                                enterDisallowedContextReadInDEV();\n                            }\n                            partialState = _payload.call(instance, prevState, nextProps);\n                            {\n                                if (workInProgress.mode & StrictLegacyMode) {\n                                    setIsStrictModeForDevtools(true);\n                                    try {\n                                        _payload.call(instance, prevState, nextProps);\n                                    } finally{\n                                        setIsStrictModeForDevtools(false);\n                                    }\n                                }\n                                exitDisallowedContextReadInDEV();\n                            }\n                        } else {\n                            // Partial state object\n                            partialState = _payload;\n                        }\n                        if (partialState === null || partialState === undefined) {\n                            // Null and undefined are treated as no-ops.\n                            return prevState;\n                        } // Merge the partial state and the previous state.\n                        return assign({}, prevState, partialState);\n                    }\n                case ForceUpdate:\n                    {\n                        hasForceUpdate = true;\n                        return prevState;\n                    }\n            }\n            return prevState;\n        }\n        function processUpdateQueue(workInProgress, props, instance, renderLanes) {\n            // This is always non-null on a ClassComponent or HostRoot\n            var queue = workInProgress.updateQueue;\n            hasForceUpdate = false;\n            {\n                currentlyProcessingQueue = queue.shared;\n            }\n            var firstBaseUpdate = queue.firstBaseUpdate;\n            var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n            var pendingQueue = queue.shared.pending;\n            if (pendingQueue !== null) {\n                queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n                // and last so that it's non-circular.\n                var lastPendingUpdate = pendingQueue;\n                var firstPendingUpdate = lastPendingUpdate.next;\n                lastPendingUpdate.next = null; // Append pending updates to base queue\n                if (lastBaseUpdate === null) {\n                    firstBaseUpdate = firstPendingUpdate;\n                } else {\n                    lastBaseUpdate.next = firstPendingUpdate;\n                }\n                lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n                // we need to transfer the updates to that queue, too. Because the base\n                // queue is a singly-linked list with no cycles, we can append to both\n                // lists and take advantage of structural sharing.\n                // TODO: Pass `current` as argument\n                var current = workInProgress.alternate;\n                if (current !== null) {\n                    // This is always non-null on a ClassComponent or HostRoot\n                    var currentQueue = current.updateQueue;\n                    var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n                    if (currentLastBaseUpdate !== lastBaseUpdate) {\n                        if (currentLastBaseUpdate === null) {\n                            currentQueue.firstBaseUpdate = firstPendingUpdate;\n                        } else {\n                            currentLastBaseUpdate.next = firstPendingUpdate;\n                        }\n                        currentQueue.lastBaseUpdate = lastPendingUpdate;\n                    }\n                }\n            } // These values may change as we process the queue.\n            if (firstBaseUpdate !== null) {\n                // Iterate through the list of updates to compute the result.\n                var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n                // from the original lanes.\n                var newLanes = NoLanes;\n                var newBaseState = null;\n                var newFirstBaseUpdate = null;\n                var newLastBaseUpdate = null;\n                var update = firstBaseUpdate;\n                do {\n                    var updateLane = update.lane;\n                    var updateEventTime = update.eventTime;\n                    if (!isSubsetOfLanes(renderLanes, updateLane)) {\n                        // Priority is insufficient. Skip this update. If this is the first\n                        // skipped update, the previous update/state is the new base\n                        // update/state.\n                        var clone = {\n                            eventTime: updateEventTime,\n                            lane: updateLane,\n                            tag: update.tag,\n                            payload: update.payload,\n                            callback: update.callback,\n                            next: null\n                        };\n                        if (newLastBaseUpdate === null) {\n                            newFirstBaseUpdate = newLastBaseUpdate = clone;\n                            newBaseState = newState;\n                        } else {\n                            newLastBaseUpdate = newLastBaseUpdate.next = clone;\n                        } // Update the remaining priority in the queue.\n                        newLanes = mergeLanes(newLanes, updateLane);\n                    } else {\n                        // This update does have sufficient priority.\n                        if (newLastBaseUpdate !== null) {\n                            var _clone = {\n                                eventTime: updateEventTime,\n                                // This update is going to be committed so we never want uncommit\n                                // it. Using NoLane works because 0 is a subset of all bitmasks, so\n                                // this will never be skipped by the check above.\n                                lane: NoLane,\n                                tag: update.tag,\n                                payload: update.payload,\n                                callback: update.callback,\n                                next: null\n                            };\n                            newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n                        } // Process this update.\n                        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n                        var callback = update.callback;\n                        if (callback !== null && // If the update was already committed, we should not queue its\n                        // callback again.\n                        update.lane !== NoLane) {\n                            workInProgress.flags |= Callback;\n                            var effects = queue.effects;\n                            if (effects === null) {\n                                queue.effects = [\n                                    update\n                                ];\n                            } else {\n                                effects.push(update);\n                            }\n                        }\n                    }\n                    update = update.next;\n                    if (update === null) {\n                        pendingQueue = queue.shared.pending;\n                        if (pendingQueue === null) {\n                            break;\n                        } else {\n                            // An update was scheduled from inside a reducer. Add the new\n                            // pending updates to the end of the list and keep processing.\n                            var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n                            // unravel them when transferring them to the base queue.\n                            var _firstPendingUpdate = _lastPendingUpdate.next;\n                            _lastPendingUpdate.next = null;\n                            update = _firstPendingUpdate;\n                            queue.lastBaseUpdate = _lastPendingUpdate;\n                            queue.shared.pending = null;\n                        }\n                    }\n                }while (true);\n                if (newLastBaseUpdate === null) {\n                    newBaseState = newState;\n                }\n                queue.baseState = newBaseState;\n                queue.firstBaseUpdate = newFirstBaseUpdate;\n                queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to\n                // process them during this render, but we do need to track which lanes\n                // are remaining.\n                var lastInterleaved = queue.shared.interleaved;\n                if (lastInterleaved !== null) {\n                    var interleaved = lastInterleaved;\n                    do {\n                        newLanes = mergeLanes(newLanes, interleaved.lane);\n                        interleaved = interleaved.next;\n                    }while (interleaved !== lastInterleaved);\n                } else if (firstBaseUpdate === null) {\n                    // `queue.lanes` is used for entangling transitions. We can set it back to\n                    // zero once the queue is empty.\n                    queue.shared.lanes = NoLanes;\n                } // Set the remaining expiration time to be whatever is remaining in the queue.\n                // This should be fine because the only two other things that contribute to\n                // expiration time are props and context. We're already in the middle of the\n                // begin phase by the time we start processing the queue, so we've already\n                // dealt with the props. Context in components that specify\n                // shouldComponentUpdate is tricky; but we'll have to account for\n                // that regardless.\n                markSkippedUpdateLanes(newLanes);\n                workInProgress.lanes = newLanes;\n                workInProgress.memoizedState = newState;\n            }\n            {\n                currentlyProcessingQueue = null;\n            }\n        }\n        function callCallback(callback, context) {\n            if (typeof callback !== \"function\") {\n                throw new Error(\"Invalid argument passed as callback. Expected a function. Instead \" + (\"received: \" + callback));\n            }\n            callback.call(context);\n        }\n        function resetHasForceUpdateBeforeProcessing() {\n            hasForceUpdate = false;\n        }\n        function checkHasForceUpdateAfterProcessing() {\n            return hasForceUpdate;\n        }\n        function commitUpdateQueue(finishedWork, finishedQueue, instance) {\n            // Commit the effects\n            var effects = finishedQueue.effects;\n            finishedQueue.effects = null;\n            if (effects !== null) {\n                for(var i = 0; i < effects.length; i++){\n                    var effect = effects[i];\n                    var callback = effect.callback;\n                    if (callback !== null) {\n                        effect.callback = null;\n                        callCallback(callback, instance);\n                    }\n                }\n            }\n        }\n        var fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.\n        // We'll use it to determine whether we need to initialize legacy refs.\n        var emptyRefsObject = new React.Component().refs;\n        var didWarnAboutStateAssignmentForComponent;\n        var didWarnAboutUninitializedState;\n        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\n        var didWarnAboutLegacyLifecyclesAndDerivedState;\n        var didWarnAboutUndefinedDerivedState;\n        var warnOnUndefinedDerivedState;\n        var warnOnInvalidCallback;\n        var didWarnAboutDirectlyAssigningPropsToState;\n        var didWarnAboutContextTypeAndContextTypes;\n        var didWarnAboutInvalidateContextType;\n        {\n            didWarnAboutStateAssignmentForComponent = new Set();\n            didWarnAboutUninitializedState = new Set();\n            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n            didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n            didWarnAboutDirectlyAssigningPropsToState = new Set();\n            didWarnAboutUndefinedDerivedState = new Set();\n            didWarnAboutContextTypeAndContextTypes = new Set();\n            didWarnAboutInvalidateContextType = new Set();\n            var didWarnOnInvalidCallback = new Set();\n            warnOnInvalidCallback = function(callback, callerName) {\n                if (callback === null || typeof callback === \"function\") {\n                    return;\n                }\n                var key = callerName + \"_\" + callback;\n                if (!didWarnOnInvalidCallback.has(key)) {\n                    didWarnOnInvalidCallback.add(key);\n                    error(\"%s(...): Expected the last optional `callback` argument to be a \" + \"function. Instead received: %s.\", callerName, callback);\n                }\n            };\n            warnOnUndefinedDerivedState = function(type, partialState) {\n                if (partialState === undefined) {\n                    var componentName = getComponentNameFromType(type) || \"Component\";\n                    if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n                        didWarnAboutUndefinedDerivedState.add(componentName);\n                        error(\"%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. \" + \"You have returned undefined.\", componentName);\n                    }\n                }\n            }; // This is so gross but it's at least non-critical and can be removed if\n            // it causes problems. This is meant to give a nicer error message for\n            // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n            // ...)) which otherwise throws a \"_processChildContext is not a function\"\n            // exception.\n            Object.defineProperty(fakeInternalInstance, \"_processChildContext\", {\n                enumerable: false,\n                value: function() {\n                    throw new Error(\"_processChildContext is not available in React 16+. This likely \" + \"means you have multiple copies of React and are attempting to nest \" + \"a React 15 tree inside a React 16 tree using \" + \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" + \"to make sure you have only one copy of React (and ideally, switch \" + \"to ReactDOM.createPortal).\");\n                }\n            });\n            Object.freeze(fakeInternalInstance);\n        }\n        function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n            var prevState = workInProgress.memoizedState;\n            var partialState = getDerivedStateFromProps(nextProps, prevState);\n            {\n                if (workInProgress.mode & StrictLegacyMode) {\n                    setIsStrictModeForDevtools(true);\n                    try {\n                        // Invoke the function an extra time to help detect side-effects.\n                        partialState = getDerivedStateFromProps(nextProps, prevState);\n                    } finally{\n                        setIsStrictModeForDevtools(false);\n                    }\n                }\n                warnOnUndefinedDerivedState(ctor, partialState);\n            }\n            var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n            workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n            // base state.\n            if (workInProgress.lanes === NoLanes) {\n                // Queue is always non-null for classes\n                var updateQueue = workInProgress.updateQueue;\n                updateQueue.baseState = memoizedState;\n            }\n        }\n        var classComponentUpdater = {\n            isMounted: isMounted,\n            enqueueSetState: function(inst, payload, callback) {\n                var fiber = get(inst);\n                var eventTime = requestEventTime();\n                var lane = requestUpdateLane(fiber);\n                var update = createUpdate(eventTime, lane);\n                update.payload = payload;\n                if (callback !== undefined && callback !== null) {\n                    {\n                        warnOnInvalidCallback(callback, \"setState\");\n                    }\n                    update.callback = callback;\n                }\n                enqueueUpdate(fiber, update);\n                var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n                if (root !== null) {\n                    entangleTransitions(root, fiber, lane);\n                }\n                {\n                    markStateUpdateScheduled(fiber, lane);\n                }\n            },\n            enqueueReplaceState: function(inst, payload, callback) {\n                var fiber = get(inst);\n                var eventTime = requestEventTime();\n                var lane = requestUpdateLane(fiber);\n                var update = createUpdate(eventTime, lane);\n                update.tag = ReplaceState;\n                update.payload = payload;\n                if (callback !== undefined && callback !== null) {\n                    {\n                        warnOnInvalidCallback(callback, \"replaceState\");\n                    }\n                    update.callback = callback;\n                }\n                enqueueUpdate(fiber, update);\n                var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n                if (root !== null) {\n                    entangleTransitions(root, fiber, lane);\n                }\n                {\n                    markStateUpdateScheduled(fiber, lane);\n                }\n            },\n            enqueueForceUpdate: function(inst, callback) {\n                var fiber = get(inst);\n                var eventTime = requestEventTime();\n                var lane = requestUpdateLane(fiber);\n                var update = createUpdate(eventTime, lane);\n                update.tag = ForceUpdate;\n                if (callback !== undefined && callback !== null) {\n                    {\n                        warnOnInvalidCallback(callback, \"forceUpdate\");\n                    }\n                    update.callback = callback;\n                }\n                enqueueUpdate(fiber, update);\n                var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n                if (root !== null) {\n                    entangleTransitions(root, fiber, lane);\n                }\n                {\n                    markForceUpdateScheduled(fiber, lane);\n                }\n            }\n        };\n        function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n            var instance = workInProgress.stateNode;\n            if (typeof instance.shouldComponentUpdate === \"function\") {\n                var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n                {\n                    if (workInProgress.mode & StrictLegacyMode) {\n                        setIsStrictModeForDevtools(true);\n                        try {\n                            // Invoke the function an extra time to help detect side-effects.\n                            shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n                        } finally{\n                            setIsStrictModeForDevtools(false);\n                        }\n                    }\n                    if (shouldUpdate === undefined) {\n                        error(\"%s.shouldComponentUpdate(): Returned undefined instead of a \" + \"boolean value. Make sure to return true or false.\", getComponentNameFromType(ctor) || \"Component\");\n                    }\n                }\n                return shouldUpdate;\n            }\n            if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n                return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n            }\n            return true;\n        }\n        function checkClassInstance(workInProgress, ctor, newProps) {\n            var instance = workInProgress.stateNode;\n            {\n                var name = getComponentNameFromType(ctor) || \"Component\";\n                var renderPresent = instance.render;\n                if (!renderPresent) {\n                    if (ctor.prototype && typeof ctor.prototype.render === \"function\") {\n                        error(\"%s(...): No `render` method found on the returned component \" + \"instance: did you accidentally return an object from the constructor?\", name);\n                    } else {\n                        error(\"%s(...): No `render` method found on the returned component \" + \"instance: you may have forgotten to define `render`.\", name);\n                    }\n                }\n                if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n                    error(\"getInitialState was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Did you mean to define a state property instead?\", name);\n                }\n                if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Use a static property to define defaultProps instead.\", name);\n                }\n                if (instance.propTypes) {\n                    error(\"propTypes was defined as an instance property on %s. Use a static \" + \"property to define propTypes instead.\", name);\n                }\n                if (instance.contextType) {\n                    error(\"contextType was defined as an instance property on %s. Use a static \" + \"property to define contextType instead.\", name);\n                }\n                {\n                    if (instance.contextTypes) {\n                        error(\"contextTypes was defined as an instance property on %s. Use a static \" + \"property to define contextTypes instead.\", name);\n                    }\n                    if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n                        didWarnAboutContextTypeAndContextTypes.add(ctor);\n                        error(\"%s declares both contextTypes and contextType static properties. \" + \"The legacy contextTypes property will be ignored.\", name);\n                    }\n                }\n                if (typeof instance.componentShouldUpdate === \"function\") {\n                    error(\"%s has a method called \" + \"componentShouldUpdate(). Did you mean shouldComponentUpdate()? \" + \"The name is phrased as a question because the function is \" + \"expected to return a value.\", name);\n                }\n                if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== \"undefined\") {\n                    error(\"%s has a method called shouldComponentUpdate(). \" + \"shouldComponentUpdate should not be used when extending React.PureComponent. \" + \"Please extend React.Component if shouldComponentUpdate is used.\", getComponentNameFromType(ctor) || \"A pure component\");\n                }\n                if (typeof instance.componentDidUnmount === \"function\") {\n                    error(\"%s has a method called \" + \"componentDidUnmount(). But there is no such lifecycle method. \" + \"Did you mean componentWillUnmount()?\", name);\n                }\n                if (typeof instance.componentDidReceiveProps === \"function\") {\n                    error(\"%s has a method called \" + \"componentDidReceiveProps(). But there is no such lifecycle method. \" + \"If you meant to update the state in response to changing props, \" + \"use componentWillReceiveProps(). If you meant to fetch data or \" + \"run side-effects or mutations after React has updated the UI, use componentDidUpdate().\", name);\n                }\n                if (typeof instance.componentWillRecieveProps === \"function\") {\n                    error(\"%s has a method called \" + \"componentWillRecieveProps(). Did you mean componentWillReceiveProps()?\", name);\n                }\n                if (typeof instance.UNSAFE_componentWillRecieveProps === \"function\") {\n                    error(\"%s has a method called \" + \"UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?\", name);\n                }\n                var hasMutatedProps = instance.props !== newProps;\n                if (instance.props !== undefined && hasMutatedProps) {\n                    error(\"%s(...): When calling super() in `%s`, make sure to pass \" + \"up the same props that your component's constructor was passed.\", name, name);\n                }\n                if (instance.defaultProps) {\n                    error(\"Setting defaultProps as an instance property on %s is not supported and will be ignored.\" + \" Instead, define defaultProps as a static property on %s.\", name, name);\n                }\n                if (typeof instance.getSnapshotBeforeUpdate === \"function\" && typeof instance.componentDidUpdate !== \"function\" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n                    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n                    error(\"%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). \" + \"This component defines getSnapshotBeforeUpdate() only.\", getComponentNameFromType(ctor));\n                }\n                if (typeof instance.getDerivedStateFromProps === \"function\") {\n                    error(\"%s: getDerivedStateFromProps() is defined as an instance method \" + \"and will be ignored. Instead, declare it as a static method.\", name);\n                }\n                if (typeof instance.getDerivedStateFromError === \"function\") {\n                    error(\"%s: getDerivedStateFromError() is defined as an instance method \" + \"and will be ignored. Instead, declare it as a static method.\", name);\n                }\n                if (typeof ctor.getSnapshotBeforeUpdate === \"function\") {\n                    error(\"%s: getSnapshotBeforeUpdate() is defined as a static method \" + \"and will be ignored. Instead, declare it as an instance method.\", name);\n                }\n                var _state = instance.state;\n                if (_state && (typeof _state !== \"object\" || isArray(_state))) {\n                    error(\"%s.state: must be set to an object or null\", name);\n                }\n                if (typeof instance.getChildContext === \"function\" && typeof ctor.childContextTypes !== \"object\") {\n                    error(\"%s.getChildContext(): childContextTypes must be defined in order to \" + \"use getChildContext().\", name);\n                }\n            }\n        }\n        function adoptClassInstance(workInProgress, instance) {\n            instance.updater = classComponentUpdater;\n            workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n            set(instance, workInProgress);\n            {\n                instance._reactInternalInstance = fakeInternalInstance;\n            }\n        }\n        function constructClassInstance(workInProgress, ctor, props) {\n            var isLegacyContextConsumer = false;\n            var unmaskedContext = emptyContextObject;\n            var context = emptyContextObject;\n            var contextType = ctor.contextType;\n            {\n                if (\"contextType\" in ctor) {\n                    var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n                    if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n                        didWarnAboutInvalidateContextType.add(ctor);\n                        var addendum = \"\";\n                        if (contextType === undefined) {\n                            addendum = \" However, it is set to undefined. \" + \"This can be caused by a typo or by mixing up named and default imports. \" + \"This can also happen due to a circular dependency, so \" + \"try moving the createContext() call to a separate file.\";\n                        } else if (typeof contextType !== \"object\") {\n                            addendum = \" However, it is set to a \" + typeof contextType + \".\";\n                        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n                            addendum = \" Did you accidentally pass the Context.Provider instead?\";\n                        } else if (contextType._context !== undefined) {\n                            // <Context.Consumer>\n                            addendum = \" Did you accidentally pass the Context.Consumer instead?\";\n                        } else {\n                            addendum = \" However, it is set to an object with keys {\" + Object.keys(contextType).join(\", \") + \"}.\";\n                        }\n                        error(\"%s defines an invalid contextType. \" + \"contextType should point to the Context object returned by React.createContext().%s\", getComponentNameFromType(ctor) || \"Component\", addendum);\n                    }\n                }\n            }\n            if (typeof contextType === \"object\" && contextType !== null) {\n                context = readContext(contextType);\n            } else {\n                unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n                var contextTypes = ctor.contextTypes;\n                isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\n                context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\n            }\n            var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\n            {\n                if (workInProgress.mode & StrictLegacyMode) {\n                    setIsStrictModeForDevtools(true);\n                    try {\n                        instance = new ctor(props, context); // eslint-disable-line no-new\n                    } finally{\n                        setIsStrictModeForDevtools(false);\n                    }\n                }\n            }\n            var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n            adoptClassInstance(workInProgress, instance);\n            {\n                if (typeof ctor.getDerivedStateFromProps === \"function\" && state === null) {\n                    var componentName = getComponentNameFromType(ctor) || \"Component\";\n                    if (!didWarnAboutUninitializedState.has(componentName)) {\n                        didWarnAboutUninitializedState.add(componentName);\n                        error(\"`%s` uses `getDerivedStateFromProps` but its initial state is \" + \"%s. This is not recommended. Instead, define the initial state by \" + \"assigning an object to `this.state` in the constructor of `%s`. \" + \"This ensures that `getDerivedStateFromProps` arguments have a consistent shape.\", componentName, instance.state === null ? \"null\" : \"undefined\", componentName);\n                    }\n                } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n                // Warn about these lifecycles if they are present.\n                // Don't warn about react-lifecycles-compat polyfilled methods though.\n                if (typeof ctor.getDerivedStateFromProps === \"function\" || typeof instance.getSnapshotBeforeUpdate === \"function\") {\n                    var foundWillMountName = null;\n                    var foundWillReceivePropsName = null;\n                    var foundWillUpdateName = null;\n                    if (typeof instance.componentWillMount === \"function\" && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n                        foundWillMountName = \"componentWillMount\";\n                    } else if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n                        foundWillMountName = \"UNSAFE_componentWillMount\";\n                    }\n                    if (typeof instance.componentWillReceiveProps === \"function\" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n                        foundWillReceivePropsName = \"componentWillReceiveProps\";\n                    } else if (typeof instance.UNSAFE_componentWillReceiveProps === \"function\") {\n                        foundWillReceivePropsName = \"UNSAFE_componentWillReceiveProps\";\n                    }\n                    if (typeof instance.componentWillUpdate === \"function\" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n                        foundWillUpdateName = \"componentWillUpdate\";\n                    } else if (typeof instance.UNSAFE_componentWillUpdate === \"function\") {\n                        foundWillUpdateName = \"UNSAFE_componentWillUpdate\";\n                    }\n                    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n                        var _componentName = getComponentNameFromType(ctor) || \"Component\";\n                        var newApiName = typeof ctor.getDerivedStateFromProps === \"function\" ? \"getDerivedStateFromProps()\" : \"getSnapshotBeforeUpdate()\";\n                        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n                            didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n                            error(\"Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n\" + \"%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n\" + \"The above lifecycles should be removed. Learn more about this warning here:\\n\" + \"https://reactjs.org/link/unsafe-component-lifecycles\", _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : \"\", foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : \"\", foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : \"\");\n                        }\n                    }\n                }\n            }\n            // ReactFiberContext usually updates this cache but can't for newly-created instances.\n            if (isLegacyContextConsumer) {\n                cacheContext(workInProgress, unmaskedContext, context);\n            }\n            return instance;\n        }\n        function callComponentWillMount(workInProgress, instance) {\n            var oldState = instance.state;\n            if (typeof instance.componentWillMount === \"function\") {\n                instance.componentWillMount();\n            }\n            if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n                instance.UNSAFE_componentWillMount();\n            }\n            if (oldState !== instance.state) {\n                {\n                    error(\"%s.componentWillMount(): Assigning directly to this.state is \" + \"deprecated (except inside a component's \" + \"constructor). Use setState instead.\", getComponentNameFromFiber(workInProgress) || \"Component\");\n                }\n                classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n            }\n        }\n        function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n            var oldState = instance.state;\n            if (typeof instance.componentWillReceiveProps === \"function\") {\n                instance.componentWillReceiveProps(newProps, nextContext);\n            }\n            if (typeof instance.UNSAFE_componentWillReceiveProps === \"function\") {\n                instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n            }\n            if (instance.state !== oldState) {\n                {\n                    var componentName = getComponentNameFromFiber(workInProgress) || \"Component\";\n                    if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n                        didWarnAboutStateAssignmentForComponent.add(componentName);\n                        error(\"%s.componentWillReceiveProps(): Assigning directly to \" + \"this.state is deprecated (except inside a component's \" + \"constructor). Use setState instead.\", componentName);\n                    }\n                }\n                classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n            }\n        } // Invokes the mount life-cycles on a previously never rendered instance.\n        function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n            {\n                checkClassInstance(workInProgress, ctor, newProps);\n            }\n            var instance = workInProgress.stateNode;\n            instance.props = newProps;\n            instance.state = workInProgress.memoizedState;\n            instance.refs = emptyRefsObject;\n            initializeUpdateQueue(workInProgress);\n            var contextType = ctor.contextType;\n            if (typeof contextType === \"object\" && contextType !== null) {\n                instance.context = readContext(contextType);\n            } else {\n                var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n                instance.context = getMaskedContext(workInProgress, unmaskedContext);\n            }\n            {\n                if (instance.state === newProps) {\n                    var componentName = getComponentNameFromType(ctor) || \"Component\";\n                    if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n                        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n                        error(\"%s: It is not recommended to assign props directly to state \" + \"because updates to props won't be reflected in state. \" + \"In most cases, it is better to use props directly.\", componentName);\n                    }\n                }\n                if (workInProgress.mode & StrictLegacyMode) {\n                    ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n                }\n                {\n                    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n                }\n            }\n            instance.state = workInProgress.memoizedState;\n            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n            if (typeof getDerivedStateFromProps === \"function\") {\n                applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n                instance.state = workInProgress.memoizedState;\n            } // In order to support react-lifecycles-compat polyfilled components,\n            // Unsafe lifecycles should not be invoked for components using the new APIs.\n            if (typeof ctor.getDerivedStateFromProps !== \"function\" && typeof instance.getSnapshotBeforeUpdate !== \"function\" && (typeof instance.UNSAFE_componentWillMount === \"function\" || typeof instance.componentWillMount === \"function\")) {\n                callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n                // process them now.\n                processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n                instance.state = workInProgress.memoizedState;\n            }\n            if (typeof instance.componentDidMount === \"function\") {\n                var fiberFlags = Update;\n                {\n                    fiberFlags |= LayoutStatic;\n                }\n                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n                    fiberFlags |= MountLayoutDev;\n                }\n                workInProgress.flags |= fiberFlags;\n            }\n        }\n        function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n            var instance = workInProgress.stateNode;\n            var oldProps = workInProgress.memoizedProps;\n            instance.props = oldProps;\n            var oldContext = instance.context;\n            var contextType = ctor.contextType;\n            var nextContext = emptyContextObject;\n            if (typeof contextType === \"object\" && contextType !== null) {\n                nextContext = readContext(contextType);\n            } else {\n                var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n                nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n            }\n            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n            var hasNewLifecycles = typeof getDerivedStateFromProps === \"function\" || typeof instance.getSnapshotBeforeUpdate === \"function\"; // Note: During these life-cycles, instance.props/instance.state are what\n            // ever the previously attempted to render - not the \"current\". However,\n            // during componentDidUpdate we pass the \"current\" props.\n            // In order to support react-lifecycles-compat polyfilled components,\n            // Unsafe lifecycles should not be invoked for components using the new APIs.\n            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === \"function\" || typeof instance.componentWillReceiveProps === \"function\")) {\n                if (oldProps !== newProps || oldContext !== nextContext) {\n                    callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n                }\n            }\n            resetHasForceUpdateBeforeProcessing();\n            var oldState = workInProgress.memoizedState;\n            var newState = instance.state = oldState;\n            processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n            newState = workInProgress.memoizedState;\n            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n                // If an update was already in progress, we should schedule an Update\n                // effect even though we're bailing out, so that cWU/cDU are called.\n                if (typeof instance.componentDidMount === \"function\") {\n                    var fiberFlags = Update;\n                    {\n                        fiberFlags |= LayoutStatic;\n                    }\n                    if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n                        fiberFlags |= MountLayoutDev;\n                    }\n                    workInProgress.flags |= fiberFlags;\n                }\n                return false;\n            }\n            if (typeof getDerivedStateFromProps === \"function\") {\n                applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n                newState = workInProgress.memoizedState;\n            }\n            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n            if (shouldUpdate) {\n                // In order to support react-lifecycles-compat polyfilled components,\n                // Unsafe lifecycles should not be invoked for components using the new APIs.\n                if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === \"function\" || typeof instance.componentWillMount === \"function\")) {\n                    if (typeof instance.componentWillMount === \"function\") {\n                        instance.componentWillMount();\n                    }\n                    if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n                        instance.UNSAFE_componentWillMount();\n                    }\n                }\n                if (typeof instance.componentDidMount === \"function\") {\n                    var _fiberFlags = Update;\n                    {\n                        _fiberFlags |= LayoutStatic;\n                    }\n                    if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n                        _fiberFlags |= MountLayoutDev;\n                    }\n                    workInProgress.flags |= _fiberFlags;\n                }\n            } else {\n                // If an update was already in progress, we should schedule an Update\n                // effect even though we're bailing out, so that cWU/cDU are called.\n                if (typeof instance.componentDidMount === \"function\") {\n                    var _fiberFlags2 = Update;\n                    {\n                        _fiberFlags2 |= LayoutStatic;\n                    }\n                    if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n                        _fiberFlags2 |= MountLayoutDev;\n                    }\n                    workInProgress.flags |= _fiberFlags2;\n                } // If shouldComponentUpdate returned false, we should still update the\n                // memoized state to indicate that this work can be reused.\n                workInProgress.memoizedProps = newProps;\n                workInProgress.memoizedState = newState;\n            } // Update the existing instance's state, props, and context pointers even\n            // if shouldComponentUpdate returns false.\n            instance.props = newProps;\n            instance.state = newState;\n            instance.context = nextContext;\n            return shouldUpdate;\n        } // Invokes the update life-cycles and returns false if it shouldn't rerender.\n        function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n            var instance = workInProgress.stateNode;\n            cloneUpdateQueue(current, workInProgress);\n            var unresolvedOldProps = workInProgress.memoizedProps;\n            var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n            instance.props = oldProps;\n            var unresolvedNewProps = workInProgress.pendingProps;\n            var oldContext = instance.context;\n            var contextType = ctor.contextType;\n            var nextContext = emptyContextObject;\n            if (typeof contextType === \"object\" && contextType !== null) {\n                nextContext = readContext(contextType);\n            } else {\n                var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n                nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n            }\n            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n            var hasNewLifecycles = typeof getDerivedStateFromProps === \"function\" || typeof instance.getSnapshotBeforeUpdate === \"function\"; // Note: During these life-cycles, instance.props/instance.state are what\n            // ever the previously attempted to render - not the \"current\". However,\n            // during componentDidUpdate we pass the \"current\" props.\n            // In order to support react-lifecycles-compat polyfilled components,\n            // Unsafe lifecycles should not be invoked for components using the new APIs.\n            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === \"function\" || typeof instance.componentWillReceiveProps === \"function\")) {\n                if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n                    callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n                }\n            }\n            resetHasForceUpdateBeforeProcessing();\n            var oldState = workInProgress.memoizedState;\n            var newState = instance.state = oldState;\n            processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n            newState = workInProgress.memoizedState;\n            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {\n                // If an update was already in progress, we should schedule an Update\n                // effect even though we're bailing out, so that cWU/cDU are called.\n                if (typeof instance.componentDidUpdate === \"function\") {\n                    if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n                        workInProgress.flags |= Update;\n                    }\n                }\n                if (typeof instance.getSnapshotBeforeUpdate === \"function\") {\n                    if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n                        workInProgress.flags |= Snapshot;\n                    }\n                }\n                return false;\n            }\n            if (typeof getDerivedStateFromProps === \"function\") {\n                applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n                newState = workInProgress.memoizedState;\n            }\n            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,\n            // both before and after `shouldComponentUpdate` has been called. Not ideal,\n            // but I'm loath to refactor this function. This only happens for memoized\n            // components so it's not that common.\n            enableLazyContextPropagation;\n            if (shouldUpdate) {\n                // In order to support react-lifecycles-compat polyfilled components,\n                // Unsafe lifecycles should not be invoked for components using the new APIs.\n                if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === \"function\" || typeof instance.componentWillUpdate === \"function\")) {\n                    if (typeof instance.componentWillUpdate === \"function\") {\n                        instance.componentWillUpdate(newProps, newState, nextContext);\n                    }\n                    if (typeof instance.UNSAFE_componentWillUpdate === \"function\") {\n                        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n                    }\n                }\n                if (typeof instance.componentDidUpdate === \"function\") {\n                    workInProgress.flags |= Update;\n                }\n                if (typeof instance.getSnapshotBeforeUpdate === \"function\") {\n                    workInProgress.flags |= Snapshot;\n                }\n            } else {\n                // If an update was already in progress, we should schedule an Update\n                // effect even though we're bailing out, so that cWU/cDU are called.\n                if (typeof instance.componentDidUpdate === \"function\") {\n                    if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n                        workInProgress.flags |= Update;\n                    }\n                }\n                if (typeof instance.getSnapshotBeforeUpdate === \"function\") {\n                    if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n                        workInProgress.flags |= Snapshot;\n                    }\n                } // If shouldComponentUpdate returned false, we should still update the\n                // memoized props/state to indicate that this work can be reused.\n                workInProgress.memoizedProps = newProps;\n                workInProgress.memoizedState = newState;\n            } // Update the existing instance's state, props, and context pointers even\n            // if shouldComponentUpdate returns false.\n            instance.props = newProps;\n            instance.state = newState;\n            instance.context = nextContext;\n            return shouldUpdate;\n        }\n        // TODO: Use the unified fiber stack module instead of this local one?\n        // Intentionally not using it yet to derisk the initial implementation, because\n        // the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n        // rather the ids be wrong than crash the whole reconciler.\n        var forkStack = [];\n        var forkStackIndex = 0;\n        var treeForkProvider = null;\n        var treeForkCount = 0;\n        var idStack = [];\n        var idStackIndex = 0;\n        var treeContextProvider = null;\n        var treeContextId = 1;\n        var treeContextOverflow = \"\";\n        function isForkedChild(workInProgress) {\n            warnIfNotHydrating();\n            return (workInProgress.flags & Forked) !== NoFlags;\n        }\n        function getForksAtLevel(workInProgress) {\n            warnIfNotHydrating();\n            return treeForkCount;\n        }\n        function getTreeId() {\n            var overflow = treeContextOverflow;\n            var idWithLeadingBit = treeContextId;\n            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n            return id.toString(32) + overflow;\n        }\n        function pushTreeFork(workInProgress, totalChildren) {\n            // This is called right after we reconcile an array (or iterator) of child\n            // fibers, because that's the only place where we know how many children in\n            // the whole set without doing extra work later, or storing addtional\n            // information on the fiber.\n            //\n            // That's why this function is separate from pushTreeId — it's called during\n            // the render phase of the fork parent, not the child, which is where we push\n            // the other context values.\n            //\n            // In the Fizz implementation this is much simpler because the child is\n            // rendered in the same callstack as the parent.\n            //\n            // It might be better to just add a `forks` field to the Fiber type. It would\n            // make this module simpler.\n            warnIfNotHydrating();\n            forkStack[forkStackIndex++] = treeForkCount;\n            forkStack[forkStackIndex++] = treeForkProvider;\n            treeForkProvider = workInProgress;\n            treeForkCount = totalChildren;\n        }\n        function pushTreeId(workInProgress, totalChildren, index) {\n            warnIfNotHydrating();\n            idStack[idStackIndex++] = treeContextId;\n            idStack[idStackIndex++] = treeContextOverflow;\n            idStack[idStackIndex++] = treeContextProvider;\n            treeContextProvider = workInProgress;\n            var baseIdWithLeadingBit = treeContextId;\n            var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n            // of the id; we use it to account for leading 0s.\n            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n            var slot = index + 1;\n            var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n            // consideration the leading 1 we use to mark the end of the sequence.\n            if (length > 30) {\n                // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n                // This branch assumes the length of the base id is greater than 5; it won't\n                // work for smaller ids, because you need 5 bits per character.\n                //\n                // We encode the id in multiple steps: first the base id, then the\n                // remaining digits.\n                //\n                // Each 5 bit sequence corresponds to a single base 32 character. So for\n                // example, if the current id is 23 bits long, we can convert 20 of those\n                // bits into a string of 4 characters, with 3 bits left over.\n                //\n                // First calculate how many bits in the base id represent a complete\n                // sequence of characters.\n                var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n                var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n                var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n                var restOfBaseId = baseId >> numberOfOverflowBits;\n                var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n                // we made more room, this time it won't overflow.\n                var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n                var restOfNewBits = slot << restOfBaseLength;\n                var id = restOfNewBits | restOfBaseId;\n                var overflow = newOverflow + baseOverflow;\n                treeContextId = 1 << restOfLength | id;\n                treeContextOverflow = overflow;\n            } else {\n                // Normal path\n                var newBits = slot << baseLength;\n                var _id = newBits | baseId;\n                var _overflow = baseOverflow;\n                treeContextId = 1 << length | _id;\n                treeContextOverflow = _overflow;\n            }\n        }\n        function pushMaterializedTreeId(workInProgress) {\n            warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear\n            // in its children.\n            var returnFiber = workInProgress.return;\n            if (returnFiber !== null) {\n                var numberOfForks = 1;\n                var slotIndex = 0;\n                pushTreeFork(workInProgress, numberOfForks);\n                pushTreeId(workInProgress, numberOfForks, slotIndex);\n            }\n        }\n        function getBitLength(number) {\n            return 32 - clz32(number);\n        }\n        function getLeadingBit(id) {\n            return 1 << getBitLength(id) - 1;\n        }\n        function popTreeContext(workInProgress) {\n            // Restore the previous values.\n            // This is a bit more complicated than other context-like modules in Fiber\n            // because the same Fiber may appear on the stack multiple times and for\n            // different reasons. We have to keep popping until the work-in-progress is\n            // no longer at the top of the stack.\n            while(workInProgress === treeForkProvider){\n                treeForkProvider = forkStack[--forkStackIndex];\n                forkStack[forkStackIndex] = null;\n                treeForkCount = forkStack[--forkStackIndex];\n                forkStack[forkStackIndex] = null;\n            }\n            while(workInProgress === treeContextProvider){\n                treeContextProvider = idStack[--idStackIndex];\n                idStack[idStackIndex] = null;\n                treeContextOverflow = idStack[--idStackIndex];\n                idStack[idStackIndex] = null;\n                treeContextId = idStack[--idStackIndex];\n                idStack[idStackIndex] = null;\n            }\n        }\n        function getSuspendedTreeContext() {\n            warnIfNotHydrating();\n            if (treeContextProvider !== null) {\n                return {\n                    id: treeContextId,\n                    overflow: treeContextOverflow\n                };\n            } else {\n                return null;\n            }\n        }\n        function restoreSuspendedTreeContext(workInProgress, suspendedContext) {\n            warnIfNotHydrating();\n            idStack[idStackIndex++] = treeContextId;\n            idStack[idStackIndex++] = treeContextOverflow;\n            idStack[idStackIndex++] = treeContextProvider;\n            treeContextId = suspendedContext.id;\n            treeContextOverflow = suspendedContext.overflow;\n            treeContextProvider = workInProgress;\n        }\n        function warnIfNotHydrating() {\n            {\n                if (!getIsHydrating()) {\n                    error(\"Expected to be hydrating. This is a bug in React. Please file \" + \"an issue.\");\n                }\n            }\n        }\n        // This may have been an insertion or a hydration.\n        var hydrationParentFiber = null;\n        var nextHydratableInstance = null;\n        var isHydrating = false;\n        var didSuspend = false; // Hydration errors that were thrown inside this boundary\n        var hydrationErrors = null;\n        function warnIfHydrating() {\n            {\n                if (isHydrating) {\n                    error(\"We should not be hydrating here. This is a bug in React. Please file a bug.\");\n                }\n            }\n        }\n        function markDidSuspendWhileHydratingDEV() {\n            {\n                didSuspend = true;\n            }\n        }\n        function enterHydrationState(fiber) {\n            if (!supportsHydration) {\n                return false;\n            }\n            var parentInstance = fiber.stateNode.containerInfo;\n            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);\n            hydrationParentFiber = fiber;\n            isHydrating = true;\n            hydrationErrors = null;\n            didSuspend = false;\n            return true;\n        }\n        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {\n            if (!supportsHydration) {\n                return false;\n            }\n            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);\n            hydrationParentFiber = fiber;\n            isHydrating = true;\n            hydrationErrors = null;\n            didSuspend = false;\n            if (treeContext !== null) {\n                restoreSuspendedTreeContext(fiber, treeContext);\n            }\n            return true;\n        }\n        function warnUnhydratedInstance(returnFiber, instance) {\n            {\n                switch(returnFiber.tag){\n                    case HostRoot:\n                        didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);\n                        break;\n                    case HostComponent:\n                        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);\n                        break;\n                    case SuspenseComponent:\n                        var suspenseState = returnFiber.memoizedState;\n                        if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);\n                        break;\n                }\n            }\n        }\n        function deleteHydratableInstance(returnFiber, instance) {\n            warnUnhydratedInstance(returnFiber, instance);\n            var childToDelete = createFiberFromHostInstanceForDeletion();\n            childToDelete.stateNode = instance;\n            childToDelete.return = returnFiber;\n            var deletions = returnFiber.deletions;\n            if (deletions === null) {\n                returnFiber.deletions = [\n                    childToDelete\n                ];\n                returnFiber.flags |= ChildDeletion;\n            } else {\n                deletions.push(childToDelete);\n            }\n        }\n        function warnNonhydratedInstance(returnFiber, fiber) {\n            {\n                if (didSuspend) {\n                    // Inside a boundary that already suspended. We're currently rendering the\n                    // siblings of a suspended node. The mismatch may be due to the missing\n                    // data, so it's probably a false positive.\n                    return;\n                }\n                switch(returnFiber.tag){\n                    case HostRoot:\n                        {\n                            var parentContainer = returnFiber.stateNode.containerInfo;\n                            switch(fiber.tag){\n                                case HostComponent:\n                                    var type = fiber.type;\n                                    var props = fiber.pendingProps;\n                                    didNotFindHydratableInstanceWithinContainer(parentContainer, type, props);\n                                    break;\n                                case HostText:\n                                    var text = fiber.pendingProps;\n                                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);\n                                    break;\n                                case SuspenseComponent:\n                                    didNotFindHydratableSuspenseInstanceWithinContainer(parentContainer);\n                                    break;\n                            }\n                            break;\n                        }\n                    case HostComponent:\n                        {\n                            var parentType = returnFiber.type;\n                            var parentProps = returnFiber.memoizedProps;\n                            var parentInstance = returnFiber.stateNode;\n                            switch(fiber.tag){\n                                case HostComponent:\n                                    var _type = fiber.type;\n                                    var _props = fiber.pendingProps;\n                                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);\n                                    break;\n                                case HostText:\n                                    var _text = fiber.pendingProps;\n                                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);\n                                    break;\n                                case SuspenseComponent:\n                                    didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);\n                                    break;\n                            }\n                            break;\n                        }\n                    case SuspenseComponent:\n                        {\n                            var suspenseState = returnFiber.memoizedState;\n                            var _parentInstance = suspenseState.dehydrated;\n                            if (_parentInstance !== null) switch(fiber.tag){\n                                case HostComponent:\n                                    var _type2 = fiber.type;\n                                    var _props2 = fiber.pendingProps;\n                                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2, _props2);\n                                    break;\n                                case HostText:\n                                    var _text2 = fiber.pendingProps;\n                                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);\n                                    break;\n                                case SuspenseComponent:\n                                    didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(_parentInstance);\n                                    break;\n                            }\n                            break;\n                        }\n                    default:\n                        return;\n                }\n            }\n        }\n        function insertNonHydratedInstance(returnFiber, fiber) {\n            fiber.flags = fiber.flags & ~Hydrating | Placement;\n            warnNonhydratedInstance(returnFiber, fiber);\n        }\n        function tryHydrate(fiber, nextInstance) {\n            switch(fiber.tag){\n                case HostComponent:\n                    {\n                        var type = fiber.type;\n                        var props = fiber.pendingProps;\n                        var instance = canHydrateInstance(nextInstance, type, props);\n                        if (instance !== null) {\n                            fiber.stateNode = instance;\n                            hydrationParentFiber = fiber;\n                            nextHydratableInstance = getFirstHydratableChild(instance);\n                            return true;\n                        }\n                        return false;\n                    }\n                case HostText:\n                    {\n                        var text = fiber.pendingProps;\n                        var textInstance = canHydrateTextInstance(nextInstance, text);\n                        if (textInstance !== null) {\n                            fiber.stateNode = textInstance;\n                            hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.\n                            nextHydratableInstance = null;\n                            return true;\n                        }\n                        return false;\n                    }\n                case SuspenseComponent:\n                    {\n                        {\n                            var suspenseInstance = canHydrateSuspenseInstance(nextInstance);\n                            if (suspenseInstance !== null) {\n                                var suspenseState = {\n                                    dehydrated: suspenseInstance,\n                                    treeContext: getSuspendedTreeContext(),\n                                    retryLane: OffscreenLane\n                                };\n                                fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.\n                                // This simplifies the code for getHostSibling and deleting nodes,\n                                // since it doesn't have to consider all Suspense boundaries and\n                                // check if they're dehydrated ones or not.\n                                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);\n                                dehydratedFragment.return = fiber;\n                                fiber.child = dehydratedFragment;\n                                hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into\n                                // it during the first pass. Instead, we'll reenter it later.\n                                nextHydratableInstance = null;\n                                return true;\n                            }\n                        }\n                        return false;\n                    }\n                default:\n                    return false;\n            }\n        }\n        function shouldClientRenderOnMismatch(fiber) {\n            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;\n        }\n        function throwOnHydrationMismatch(fiber) {\n            throw new Error(\"Hydration failed because the initial UI does not match what was \" + \"rendered on the server.\");\n        }\n        function tryToClaimNextHydratableInstance(fiber) {\n            if (!isHydrating) {\n                return;\n            }\n            var nextInstance = nextHydratableInstance;\n            if (!nextInstance) {\n                if (shouldClientRenderOnMismatch(fiber)) {\n                    warnNonhydratedInstance(hydrationParentFiber, fiber);\n                    throwOnHydrationMismatch();\n                } // Nothing to hydrate. Make it an insertion.\n                insertNonHydratedInstance(hydrationParentFiber, fiber);\n                isHydrating = false;\n                hydrationParentFiber = fiber;\n                return;\n            }\n            var firstAttemptedInstance = nextInstance;\n            if (!tryHydrate(fiber, nextInstance)) {\n                if (shouldClientRenderOnMismatch(fiber)) {\n                    warnNonhydratedInstance(hydrationParentFiber, fiber);\n                    throwOnHydrationMismatch();\n                } // If we can't hydrate this instance let's try the next one.\n                // We use this as a heuristic. It's based on intuition and not data so it\n                // might be flawed or unnecessary.\n                nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n                var prevHydrationParentFiber = hydrationParentFiber;\n                if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n                    // Nothing to hydrate. Make it an insertion.\n                    insertNonHydratedInstance(hydrationParentFiber, fiber);\n                    isHydrating = false;\n                    hydrationParentFiber = fiber;\n                    return;\n                } // We matched the next one, we'll now assume that the first one was\n                // superfluous and we'll delete it. Since we can't eagerly delete it\n                // we'll have to schedule a deletion. To do that, this node needs a dummy\n                // fiber associated with it.\n                deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\n            }\n        }\n        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\n            if (!supportsHydration) {\n                throw new Error(\"Expected prepareToHydrateHostInstance() to never be called. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n            }\n            var instance = fiber.stateNode;\n            var shouldWarnIfMismatchDev = !didSuspend;\n            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.\n            fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n            // is a new ref we mark this as an update.\n            if (updatePayload !== null) {\n                return true;\n            }\n            return false;\n        }\n        function prepareToHydrateHostTextInstance(fiber) {\n            if (!supportsHydration) {\n                throw new Error(\"Expected prepareToHydrateHostTextInstance() to never be called. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n            }\n            var textInstance = fiber.stateNode;\n            var textContent = fiber.memoizedProps;\n            var shouldWarnIfMismatchDev = !didSuspend;\n            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber, shouldWarnIfMismatchDev);\n            if (shouldUpdate) {\n                // We assume that prepareToHydrateHostTextInstance is called in a context where the\n                // hydration parent is the parent host component of this host text.\n                var returnFiber = hydrationParentFiber;\n                if (returnFiber !== null) {\n                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n                    switch(returnFiber.tag){\n                        case HostRoot:\n                            {\n                                var parentContainer = returnFiber.stateNode.containerInfo;\n                                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);\n                                break;\n                            }\n                        case HostComponent:\n                            {\n                                var parentType = returnFiber.type;\n                                var parentProps = returnFiber.memoizedProps;\n                                var parentInstance = returnFiber.stateNode;\n                                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, isConcurrentMode);\n                                break;\n                            }\n                    }\n                }\n            }\n            return shouldUpdate;\n        }\n        function prepareToHydrateHostSuspenseInstance(fiber) {\n            if (!supportsHydration) {\n                throw new Error(\"Expected prepareToHydrateHostSuspenseInstance() to never be called. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n            }\n            var suspenseState = fiber.memoizedState;\n            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n            if (!suspenseInstance) {\n                throw new Error(\"Expected to have a hydrated suspense instance. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n            }\n            hydrateSuspenseInstance(suspenseInstance, fiber);\n        }\n        function skipPastDehydratedSuspenseInstance(fiber) {\n            if (!supportsHydration) {\n                throw new Error(\"Expected skipPastDehydratedSuspenseInstance() to never be called. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n            }\n            var suspenseState = fiber.memoizedState;\n            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n            if (!suspenseInstance) {\n                throw new Error(\"Expected to have a hydrated suspense instance. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n            }\n            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n        }\n        function popToNextHostParent(fiber) {\n            var parent = fiber.return;\n            while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent){\n                parent = parent.return;\n            }\n            hydrationParentFiber = parent;\n        }\n        function popHydrationState(fiber) {\n            if (!supportsHydration) {\n                return false;\n            }\n            if (fiber !== hydrationParentFiber) {\n                // We're deeper than the current hydration context, inside an inserted\n                // tree.\n                return false;\n            }\n            if (!isHydrating) {\n                // If we're not currently hydrating but we're in a hydration context, then\n                // we were an insertion and now need to pop up reenter hydration of our\n                // siblings.\n                popToNextHostParent(fiber);\n                isHydrating = true;\n                return false;\n            } // If we have any remaining hydratable nodes, we need to delete them now.\n            // We only do this deeper than head and body since they tend to have random\n            // other nodes in them. We also ignore components with pure text content in\n            // side of them. We also don't delete anything inside the root container.\n            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {\n                var nextInstance = nextHydratableInstance;\n                if (nextInstance) {\n                    if (shouldClientRenderOnMismatch(fiber)) {\n                        warnIfUnhydratedTailNodes(fiber);\n                        throwOnHydrationMismatch();\n                    } else {\n                        while(nextInstance){\n                            deleteHydratableInstance(fiber, nextInstance);\n                            nextInstance = getNextHydratableSibling(nextInstance);\n                        }\n                    }\n                }\n            }\n            popToNextHostParent(fiber);\n            if (fiber.tag === SuspenseComponent) {\n                nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n            } else {\n                nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\n            }\n            return true;\n        }\n        function hasUnhydratedTailNodes() {\n            return isHydrating && nextHydratableInstance !== null;\n        }\n        function warnIfUnhydratedTailNodes(fiber) {\n            var nextInstance = nextHydratableInstance;\n            while(nextInstance){\n                warnUnhydratedInstance(fiber, nextInstance);\n                nextInstance = getNextHydratableSibling(nextInstance);\n            }\n        }\n        function resetHydrationState() {\n            if (!supportsHydration) {\n                return;\n            }\n            hydrationParentFiber = null;\n            nextHydratableInstance = null;\n            isHydrating = false;\n            didSuspend = false;\n        }\n        function upgradeHydrationErrorsToRecoverable() {\n            if (hydrationErrors !== null) {\n                // Successfully completed a forced client render. The errors that occurred\n                // during the hydration attempt are now recovered. We will log them in\n                // commit phase, once the entire tree has finished.\n                queueRecoverableErrors(hydrationErrors);\n                hydrationErrors = null;\n            }\n        }\n        function getIsHydrating() {\n            return isHydrating;\n        }\n        function queueHydrationError(error) {\n            if (hydrationErrors === null) {\n                hydrationErrors = [\n                    error\n                ];\n            } else {\n                hydrationErrors.push(error);\n            }\n        }\n        var didWarnAboutMaps;\n        var didWarnAboutGenerators;\n        var didWarnAboutStringRefs;\n        var ownerHasKeyUseWarning;\n        var ownerHasFunctionTypeWarning;\n        var warnForMissingKey = function(child, returnFiber) {};\n        {\n            didWarnAboutMaps = false;\n            didWarnAboutGenerators = false;\n            didWarnAboutStringRefs = {};\n            /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */ ownerHasKeyUseWarning = {};\n            ownerHasFunctionTypeWarning = {};\n            warnForMissingKey = function(child, returnFiber) {\n                if (child === null || typeof child !== \"object\") {\n                    return;\n                }\n                if (!child._store || child._store.validated || child.key != null) {\n                    return;\n                }\n                if (typeof child._store !== \"object\") {\n                    throw new Error(\"React Component in warnForMissingKey should have a _store. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n                }\n                child._store.validated = true;\n                var componentName = getComponentNameFromFiber(returnFiber) || \"Component\";\n                if (ownerHasKeyUseWarning[componentName]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[componentName] = true;\n                error(\"Each child in a list should have a unique \" + '\"key\" prop. See https://reactjs.org/link/warning-keys for ' + \"more information.\");\n            };\n        }\n        function coerceRef(returnFiber, current, element) {\n            var mixedRef = element.ref;\n            if (mixedRef !== null && typeof mixedRef !== \"function\" && typeof mixedRef !== \"object\") {\n                {\n                    // TODO: Clean this up once we turn on the string ref warning for\n                    // everyone, because the strict mode case will no longer be relevant\n                    if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs\n                    // because these cannot be automatically converted to an arrow function\n                    // using a codemod. Therefore, we don't have to warn about string refs again.\n                    !(element._owner && element._self && element._owner.stateNode !== element._self)) {\n                        var componentName = getComponentNameFromFiber(returnFiber) || \"Component\";\n                        if (!didWarnAboutStringRefs[componentName]) {\n                            {\n                                error('A string ref, \"%s\", has been found within a strict mode tree. ' + \"String refs are a source of potential bugs and should be avoided. \" + \"We recommend using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", mixedRef);\n                            }\n                            didWarnAboutStringRefs[componentName] = true;\n                        }\n                    }\n                }\n                if (element._owner) {\n                    var owner = element._owner;\n                    var inst;\n                    if (owner) {\n                        var ownerFiber = owner;\n                        if (ownerFiber.tag !== ClassComponent) {\n                            throw new Error(\"Function components cannot have string refs. \" + \"We recommend using useRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\");\n                        }\n                        inst = ownerFiber.stateNode;\n                    }\n                    if (!inst) {\n                        throw new Error(\"Missing owner for string ref \" + mixedRef + \". This error is likely caused by a \" + \"bug in React. Please file an issue.\");\n                    } // Assigning this to a const so Flow knows it won't change in the closure\n                    var resolvedInst = inst;\n                    {\n                        checkPropStringCoercion(mixedRef, \"ref\");\n                    }\n                    var stringRef = \"\" + mixedRef; // Check if previous string ref matches new string ref\n                    if (current !== null && current.ref !== null && typeof current.ref === \"function\" && current.ref._stringRef === stringRef) {\n                        return current.ref;\n                    }\n                    var ref = function(value) {\n                        var refs = resolvedInst.refs;\n                        if (refs === emptyRefsObject) {\n                            // This is a lazy pooled frozen object, so we need to initialize.\n                            refs = resolvedInst.refs = {};\n                        }\n                        if (value === null) {\n                            delete refs[stringRef];\n                        } else {\n                            refs[stringRef] = value;\n                        }\n                    };\n                    ref._stringRef = stringRef;\n                    return ref;\n                } else {\n                    if (typeof mixedRef !== \"string\") {\n                        throw new Error(\"Expected ref to be a function, a string, an object returned by React.createRef(), or null.\");\n                    }\n                    if (!element._owner) {\n                        throw new Error(\"Element ref was specified as a string (\" + mixedRef + \") but no owner was set. This could happen for one of\" + \" the following reasons:\\n\" + \"1. You may be adding a ref to a function component\\n\" + \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" + \"3. You have multiple copies of React loaded\\n\" + \"See https://reactjs.org/link/refs-must-have-owner for more information.\");\n                    }\n                }\n            }\n            return mixedRef;\n        }\n        function throwOnInvalidObjectType(returnFiber, newChild) {\n            var childString = Object.prototype.toString.call(newChild);\n            throw new Error(\"Objects are not valid as a React child (found: \" + (childString === \"[object Object]\" ? \"object with keys {\" + Object.keys(newChild).join(\", \") + \"}\" : childString) + \"). \" + \"If you meant to render a collection of children, use an array \" + \"instead.\");\n        }\n        function warnOnFunctionType(returnFiber) {\n            {\n                var componentName = getComponentNameFromFiber(returnFiber) || \"Component\";\n                if (ownerHasFunctionTypeWarning[componentName]) {\n                    return;\n                }\n                ownerHasFunctionTypeWarning[componentName] = true;\n                error(\"Functions are not valid as a React child. This may happen if \" + \"you return a Component instead of <Component /> from render. \" + \"Or maybe you meant to call this function rather than return it.\");\n            }\n        }\n        function resolveLazy(lazyType) {\n            var payload = lazyType._payload;\n            var init = lazyType._init;\n            return init(payload);\n        } // This wrapper function exists because I expect to clone the code in each path\n        // to be able to optimize each path individually by branching early. This needs\n        // a compiler or we can do it manually. Helpers that don't need this branching\n        // live outside of this function.\n        function ChildReconciler(shouldTrackSideEffects) {\n            function deleteChild(returnFiber, childToDelete) {\n                if (!shouldTrackSideEffects) {\n                    // Noop.\n                    return;\n                }\n                var deletions = returnFiber.deletions;\n                if (deletions === null) {\n                    returnFiber.deletions = [\n                        childToDelete\n                    ];\n                    returnFiber.flags |= ChildDeletion;\n                } else {\n                    deletions.push(childToDelete);\n                }\n            }\n            function deleteRemainingChildren(returnFiber, currentFirstChild) {\n                if (!shouldTrackSideEffects) {\n                    // Noop.\n                    return null;\n                } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n                // assuming that after the first child we've already added everything.\n                var childToDelete = currentFirstChild;\n                while(childToDelete !== null){\n                    deleteChild(returnFiber, childToDelete);\n                    childToDelete = childToDelete.sibling;\n                }\n                return null;\n            }\n            function mapRemainingChildren(returnFiber, currentFirstChild) {\n                // Add the remaining children to a temporary map so that we can find them by\n                // keys quickly. Implicit (null) keys get added to this set with their index\n                // instead.\n                var existingChildren = new Map();\n                var existingChild = currentFirstChild;\n                while(existingChild !== null){\n                    if (existingChild.key !== null) {\n                        existingChildren.set(existingChild.key, existingChild);\n                    } else {\n                        existingChildren.set(existingChild.index, existingChild);\n                    }\n                    existingChild = existingChild.sibling;\n                }\n                return existingChildren;\n            }\n            function useFiber(fiber, pendingProps) {\n                // We currently set sibling to null and index to 0 here because it is easy\n                // to forget to do before returning it. E.g. for the single child case.\n                var clone = createWorkInProgress(fiber, pendingProps);\n                clone.index = 0;\n                clone.sibling = null;\n                return clone;\n            }\n            function placeChild(newFiber, lastPlacedIndex, newIndex) {\n                newFiber.index = newIndex;\n                if (!shouldTrackSideEffects) {\n                    // During hydration, the useId algorithm needs to know which fibers are\n                    // part of a list of children (arrays, iterators).\n                    newFiber.flags |= Forked;\n                    return lastPlacedIndex;\n                }\n                var current = newFiber.alternate;\n                if (current !== null) {\n                    var oldIndex = current.index;\n                    if (oldIndex < lastPlacedIndex) {\n                        // This is a move.\n                        newFiber.flags |= Placement;\n                        return lastPlacedIndex;\n                    } else {\n                        // This item can stay in place.\n                        return oldIndex;\n                    }\n                } else {\n                    // This is an insertion.\n                    newFiber.flags |= Placement;\n                    return lastPlacedIndex;\n                }\n            }\n            function placeSingleChild(newFiber) {\n                // This is simpler for the single child case. We only need to do a\n                // placement for inserting new children.\n                if (shouldTrackSideEffects && newFiber.alternate === null) {\n                    newFiber.flags |= Placement;\n                }\n                return newFiber;\n            }\n            function updateTextNode(returnFiber, current, textContent, lanes) {\n                if (current === null || current.tag !== HostText) {\n                    // Insert\n                    var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n                    created.return = returnFiber;\n                    return created;\n                } else {\n                    // Update\n                    var existing = useFiber(current, textContent);\n                    existing.return = returnFiber;\n                    return existing;\n                }\n            }\n            function updateElement(returnFiber, current, element, lanes) {\n                var elementType = element.type;\n                if (elementType === REACT_FRAGMENT_TYPE) {\n                    return updateFragment(returnFiber, current, element.props.children, lanes, element.key);\n                }\n                if (current !== null) {\n                    if (current.elementType === elementType || isCompatibleFamilyForHotReloading(current, element) || // Lazy types should reconcile their resolved type.\n                    // We need to do this after the Hot Reloading check above,\n                    // because hot reloading has different semantics than prod because\n                    // it doesn't resuspend. So we can't let the call below suspend.\n                    typeof elementType === \"object\" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {\n                        // Move based on index\n                        var existing = useFiber(current, element.props);\n                        existing.ref = coerceRef(returnFiber, current, element);\n                        existing.return = returnFiber;\n                        {\n                            existing._debugSource = element._source;\n                            existing._debugOwner = element._owner;\n                        }\n                        return existing;\n                    }\n                } // Insert\n                var created = createFiberFromElement(element, returnFiber.mode, lanes);\n                created.ref = coerceRef(returnFiber, current, element);\n                created.return = returnFiber;\n                return created;\n            }\n            function updatePortal(returnFiber, current, portal, lanes) {\n                if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n                    // Insert\n                    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n                    created.return = returnFiber;\n                    return created;\n                } else {\n                    // Update\n                    var existing = useFiber(current, portal.children || []);\n                    existing.return = returnFiber;\n                    return existing;\n                }\n            }\n            function updateFragment(returnFiber, current, fragment, lanes, key) {\n                if (current === null || current.tag !== Fragment) {\n                    // Insert\n                    var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n                    created.return = returnFiber;\n                    return created;\n                } else {\n                    // Update\n                    var existing = useFiber(current, fragment);\n                    existing.return = returnFiber;\n                    return existing;\n                }\n            }\n            function createChild(returnFiber, newChild, lanes) {\n                if (typeof newChild === \"string\" && newChild !== \"\" || typeof newChild === \"number\") {\n                    // Text nodes don't have keys. If the previous node is implicitly keyed\n                    // we can continue to replace it without aborting even if it is not a text\n                    // node.\n                    var created = createFiberFromText(\"\" + newChild, returnFiber.mode, lanes);\n                    created.return = returnFiber;\n                    return created;\n                }\n                if (typeof newChild === \"object\" && newChild !== null) {\n                    switch(newChild.$$typeof){\n                        case REACT_ELEMENT_TYPE:\n                            {\n                                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n                                _created.ref = coerceRef(returnFiber, null, newChild);\n                                _created.return = returnFiber;\n                                return _created;\n                            }\n                        case REACT_PORTAL_TYPE:\n                            {\n                                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n                                _created2.return = returnFiber;\n                                return _created2;\n                            }\n                        case REACT_LAZY_TYPE:\n                            {\n                                {\n                                    var payload = newChild._payload;\n                                    var init = newChild._init;\n                                    return createChild(returnFiber, init(payload), lanes);\n                                }\n                            }\n                    }\n                    if (isArray(newChild) || getIteratorFn(newChild)) {\n                        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n                        _created3.return = returnFiber;\n                        return _created3;\n                    }\n                    throwOnInvalidObjectType(returnFiber, newChild);\n                }\n                {\n                    if (typeof newChild === \"function\") {\n                        warnOnFunctionType(returnFiber);\n                    }\n                }\n                return null;\n            }\n            function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n                // Update the fiber if the keys match, otherwise return null.\n                var key = oldFiber !== null ? oldFiber.key : null;\n                if (typeof newChild === \"string\" && newChild !== \"\" || typeof newChild === \"number\") {\n                    // Text nodes don't have keys. If the previous node is implicitly keyed\n                    // we can continue to replace it without aborting even if it is not a text\n                    // node.\n                    if (key !== null) {\n                        return null;\n                    }\n                    return updateTextNode(returnFiber, oldFiber, \"\" + newChild, lanes);\n                }\n                if (typeof newChild === \"object\" && newChild !== null) {\n                    switch(newChild.$$typeof){\n                        case REACT_ELEMENT_TYPE:\n                            {\n                                if (newChild.key === key) {\n                                    return updateElement(returnFiber, oldFiber, newChild, lanes);\n                                } else {\n                                    return null;\n                                }\n                            }\n                        case REACT_PORTAL_TYPE:\n                            {\n                                if (newChild.key === key) {\n                                    return updatePortal(returnFiber, oldFiber, newChild, lanes);\n                                } else {\n                                    return null;\n                                }\n                            }\n                        case REACT_LAZY_TYPE:\n                            {\n                                {\n                                    var payload = newChild._payload;\n                                    var init = newChild._init;\n                                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n                                }\n                            }\n                    }\n                    if (isArray(newChild) || getIteratorFn(newChild)) {\n                        if (key !== null) {\n                            return null;\n                        }\n                        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n                    }\n                    throwOnInvalidObjectType(returnFiber, newChild);\n                }\n                {\n                    if (typeof newChild === \"function\") {\n                        warnOnFunctionType(returnFiber);\n                    }\n                }\n                return null;\n            }\n            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {\n                if (typeof newChild === \"string\" && newChild !== \"\" || typeof newChild === \"number\") {\n                    // Text nodes don't have keys, so we neither have to check the old nor\n                    // new node for the key. If both are text nodes, they match.\n                    var matchedFiber = existingChildren.get(newIdx) || null;\n                    return updateTextNode(returnFiber, matchedFiber, \"\" + newChild, lanes);\n                }\n                if (typeof newChild === \"object\" && newChild !== null) {\n                    switch(newChild.$$typeof){\n                        case REACT_ELEMENT_TYPE:\n                            {\n                                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n                                return updateElement(returnFiber, _matchedFiber, newChild, lanes);\n                            }\n                        case REACT_PORTAL_TYPE:\n                            {\n                                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n                                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);\n                            }\n                        case REACT_LAZY_TYPE:\n                            {\n                                var payload = newChild._payload;\n                                var init = newChild._init;\n                                return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);\n                            }\n                    }\n                    if (isArray(newChild) || getIteratorFn(newChild)) {\n                        var _matchedFiber3 = existingChildren.get(newIdx) || null;\n                        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);\n                    }\n                    throwOnInvalidObjectType(returnFiber, newChild);\n                }\n                {\n                    if (typeof newChild === \"function\") {\n                        warnOnFunctionType(returnFiber);\n                    }\n                }\n                return null;\n            }\n            /**\n   * Warns if there is a duplicate or missing key\n   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {\n                {\n                    if (typeof child !== \"object\" || child === null) {\n                        return knownKeys;\n                    }\n                    switch(child.$$typeof){\n                        case REACT_ELEMENT_TYPE:\n                        case REACT_PORTAL_TYPE:\n                            warnForMissingKey(child, returnFiber);\n                            var key = child.key;\n                            if (typeof key !== \"string\") {\n                                break;\n                            }\n                            if (knownKeys === null) {\n                                knownKeys = new Set();\n                                knownKeys.add(key);\n                                break;\n                            }\n                            if (!knownKeys.has(key)) {\n                                knownKeys.add(key);\n                                break;\n                            }\n                            error(\"Encountered two children with the same key, `%s`. \" + \"Keys should be unique so that components maintain their identity \" + \"across updates. Non-unique keys may cause children to be \" + \"duplicated and/or omitted — the behavior is unsupported and \" + \"could change in a future version.\", key);\n                            break;\n                        case REACT_LAZY_TYPE:\n                            {\n                                var payload = child._payload;\n                                var init = child._init;\n                                warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n                                break;\n                            }\n                    }\n                }\n                return knownKeys;\n            }\n            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\n                // This algorithm can't optimize by searching from both ends since we\n                // don't have backpointers on fibers. I'm trying to see how far we can get\n                // with that model. If it ends up not being worth the tradeoffs, we can\n                // add it later.\n                // Even with a two ended optimization, we'd want to optimize for the case\n                // where there are few changes and brute force the comparison instead of\n                // going for the Map. It'd like to explore hitting that path first in\n                // forward-only mode and only go for the Map once we notice that we need\n                // lots of look ahead. This doesn't handle reversal as well as two ended\n                // search but that's unusual. Besides, for the two ended optimization to\n                // work on Iterables, we'd need to copy the whole set.\n                // In this first iteration, we'll just live with hitting the bad case\n                // (adding everything to a Map) in for every insert/move.\n                // If you change this code, also update reconcileChildrenIterator() which\n                // uses the same algorithm.\n                {\n                    // First, validate keys.\n                    var knownKeys = null;\n                    for(var i = 0; i < newChildren.length; i++){\n                        var child = newChildren[i];\n                        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n                    }\n                }\n                var resultingFirstChild = null;\n                var previousNewFiber = null;\n                var oldFiber = currentFirstChild;\n                var lastPlacedIndex = 0;\n                var newIdx = 0;\n                var nextOldFiber = null;\n                for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){\n                    if (oldFiber.index > newIdx) {\n                        nextOldFiber = oldFiber;\n                        oldFiber = null;\n                    } else {\n                        nextOldFiber = oldFiber.sibling;\n                    }\n                    var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n                    if (newFiber === null) {\n                        // TODO: This breaks on empty slots like null children. That's\n                        // unfortunate because it triggers the slow path all the time. We need\n                        // a better way to communicate whether this was a miss or null,\n                        // boolean, undefined, etc.\n                        if (oldFiber === null) {\n                            oldFiber = nextOldFiber;\n                        }\n                        break;\n                    }\n                    if (shouldTrackSideEffects) {\n                        if (oldFiber && newFiber.alternate === null) {\n                            // We matched the slot, but we didn't reuse the existing fiber, so we\n                            // need to delete the existing child.\n                            deleteChild(returnFiber, oldFiber);\n                        }\n                    }\n                    lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n                    if (previousNewFiber === null) {\n                        // TODO: Move out of the loop. This only happens for the first run.\n                        resultingFirstChild = newFiber;\n                    } else {\n                        // TODO: Defer siblings if we're not at the right index for this slot.\n                        // I.e. if we had null values before, then we want to defer this\n                        // for each null value. However, we also don't want to call updateSlot\n                        // with the previous one.\n                        previousNewFiber.sibling = newFiber;\n                    }\n                    previousNewFiber = newFiber;\n                    oldFiber = nextOldFiber;\n                }\n                if (newIdx === newChildren.length) {\n                    // We've reached the end of the new children. We can delete the rest.\n                    deleteRemainingChildren(returnFiber, oldFiber);\n                    if (getIsHydrating()) {\n                        var numberOfForks = newIdx;\n                        pushTreeFork(returnFiber, numberOfForks);\n                    }\n                    return resultingFirstChild;\n                }\n                if (oldFiber === null) {\n                    // If we don't have any more existing children we can choose a fast path\n                    // since the rest will all be insertions.\n                    for(; newIdx < newChildren.length; newIdx++){\n                        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n                        if (_newFiber === null) {\n                            continue;\n                        }\n                        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n                        if (previousNewFiber === null) {\n                            // TODO: Move out of the loop. This only happens for the first run.\n                            resultingFirstChild = _newFiber;\n                        } else {\n                            previousNewFiber.sibling = _newFiber;\n                        }\n                        previousNewFiber = _newFiber;\n                    }\n                    if (getIsHydrating()) {\n                        var _numberOfForks = newIdx;\n                        pushTreeFork(returnFiber, _numberOfForks);\n                    }\n                    return resultingFirstChild;\n                } // Add all children to a key map for quick lookups.\n                var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n                for(; newIdx < newChildren.length; newIdx++){\n                    var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n                    if (_newFiber2 !== null) {\n                        if (shouldTrackSideEffects) {\n                            if (_newFiber2.alternate !== null) {\n                                // The new fiber is a work in progress, but if there exists a\n                                // current, that means that we reused the fiber. We need to delete\n                                // it from the child list so that we don't add it to the deletion\n                                // list.\n                                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n                            }\n                        }\n                        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n                        if (previousNewFiber === null) {\n                            resultingFirstChild = _newFiber2;\n                        } else {\n                            previousNewFiber.sibling = _newFiber2;\n                        }\n                        previousNewFiber = _newFiber2;\n                    }\n                }\n                if (shouldTrackSideEffects) {\n                    // Any existing children that weren't consumed above were deleted. We need\n                    // to add them to the deletion list.\n                    existingChildren.forEach(function(child) {\n                        return deleteChild(returnFiber, child);\n                    });\n                }\n                if (getIsHydrating()) {\n                    var _numberOfForks2 = newIdx;\n                    pushTreeFork(returnFiber, _numberOfForks2);\n                }\n                return resultingFirstChild;\n            }\n            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {\n                // This is the same implementation as reconcileChildrenArray(),\n                // but using the iterator instead.\n                var iteratorFn = getIteratorFn(newChildrenIterable);\n                if (typeof iteratorFn !== \"function\") {\n                    throw new Error(\"An object is not an iterable. This error is likely caused by a bug in \" + \"React. Please file an issue.\");\n                }\n                {\n                    // We don't support rendering Generators because it's a mutation.\n                    // See https://github.com/facebook/react/issues/12995\n                    if (typeof Symbol === \"function\" && // $FlowFixMe Flow doesn't know about toStringTag\n                    newChildrenIterable[Symbol.toStringTag] === \"Generator\") {\n                        if (!didWarnAboutGenerators) {\n                            error(\"Using Generators as children is unsupported and will likely yield \" + \"unexpected results because enumerating a generator mutates it. \" + \"You may convert it to an array with `Array.from()` or the \" + \"`[...spread]` operator before rendering. Keep in mind \" + \"you might need to polyfill these features for older browsers.\");\n                        }\n                        didWarnAboutGenerators = true;\n                    } // Warn about using Maps as children\n                    if (newChildrenIterable.entries === iteratorFn) {\n                        if (!didWarnAboutMaps) {\n                            error(\"Using Maps as children is not supported. \" + \"Use an array of keyed ReactElements instead.\");\n                        }\n                        didWarnAboutMaps = true;\n                    } // First, validate keys.\n                    // We'll get a different iterator later for the main pass.\n                    var _newChildren = iteratorFn.call(newChildrenIterable);\n                    if (_newChildren) {\n                        var knownKeys = null;\n                        var _step = _newChildren.next();\n                        for(; !_step.done; _step = _newChildren.next()){\n                            var child = _step.value;\n                            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n                        }\n                    }\n                }\n                var newChildren = iteratorFn.call(newChildrenIterable);\n                if (newChildren == null) {\n                    throw new Error(\"An iterable object provided no iterator.\");\n                }\n                var resultingFirstChild = null;\n                var previousNewFiber = null;\n                var oldFiber = currentFirstChild;\n                var lastPlacedIndex = 0;\n                var newIdx = 0;\n                var nextOldFiber = null;\n                var step = newChildren.next();\n                for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){\n                    if (oldFiber.index > newIdx) {\n                        nextOldFiber = oldFiber;\n                        oldFiber = null;\n                    } else {\n                        nextOldFiber = oldFiber.sibling;\n                    }\n                    var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n                    if (newFiber === null) {\n                        // TODO: This breaks on empty slots like null children. That's\n                        // unfortunate because it triggers the slow path all the time. We need\n                        // a better way to communicate whether this was a miss or null,\n                        // boolean, undefined, etc.\n                        if (oldFiber === null) {\n                            oldFiber = nextOldFiber;\n                        }\n                        break;\n                    }\n                    if (shouldTrackSideEffects) {\n                        if (oldFiber && newFiber.alternate === null) {\n                            // We matched the slot, but we didn't reuse the existing fiber, so we\n                            // need to delete the existing child.\n                            deleteChild(returnFiber, oldFiber);\n                        }\n                    }\n                    lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n                    if (previousNewFiber === null) {\n                        // TODO: Move out of the loop. This only happens for the first run.\n                        resultingFirstChild = newFiber;\n                    } else {\n                        // TODO: Defer siblings if we're not at the right index for this slot.\n                        // I.e. if we had null values before, then we want to defer this\n                        // for each null value. However, we also don't want to call updateSlot\n                        // with the previous one.\n                        previousNewFiber.sibling = newFiber;\n                    }\n                    previousNewFiber = newFiber;\n                    oldFiber = nextOldFiber;\n                }\n                if (step.done) {\n                    // We've reached the end of the new children. We can delete the rest.\n                    deleteRemainingChildren(returnFiber, oldFiber);\n                    if (getIsHydrating()) {\n                        var numberOfForks = newIdx;\n                        pushTreeFork(returnFiber, numberOfForks);\n                    }\n                    return resultingFirstChild;\n                }\n                if (oldFiber === null) {\n                    // If we don't have any more existing children we can choose a fast path\n                    // since the rest will all be insertions.\n                    for(; !step.done; newIdx++, step = newChildren.next()){\n                        var _newFiber3 = createChild(returnFiber, step.value, lanes);\n                        if (_newFiber3 === null) {\n                            continue;\n                        }\n                        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n                        if (previousNewFiber === null) {\n                            // TODO: Move out of the loop. This only happens for the first run.\n                            resultingFirstChild = _newFiber3;\n                        } else {\n                            previousNewFiber.sibling = _newFiber3;\n                        }\n                        previousNewFiber = _newFiber3;\n                    }\n                    if (getIsHydrating()) {\n                        var _numberOfForks3 = newIdx;\n                        pushTreeFork(returnFiber, _numberOfForks3);\n                    }\n                    return resultingFirstChild;\n                } // Add all children to a key map for quick lookups.\n                var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n                for(; !step.done; newIdx++, step = newChildren.next()){\n                    var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);\n                    if (_newFiber4 !== null) {\n                        if (shouldTrackSideEffects) {\n                            if (_newFiber4.alternate !== null) {\n                                // The new fiber is a work in progress, but if there exists a\n                                // current, that means that we reused the fiber. We need to delete\n                                // it from the child list so that we don't add it to the deletion\n                                // list.\n                                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n                            }\n                        }\n                        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n                        if (previousNewFiber === null) {\n                            resultingFirstChild = _newFiber4;\n                        } else {\n                            previousNewFiber.sibling = _newFiber4;\n                        }\n                        previousNewFiber = _newFiber4;\n                    }\n                }\n                if (shouldTrackSideEffects) {\n                    // Any existing children that weren't consumed above were deleted. We need\n                    // to add them to the deletion list.\n                    existingChildren.forEach(function(child) {\n                        return deleteChild(returnFiber, child);\n                    });\n                }\n                if (getIsHydrating()) {\n                    var _numberOfForks4 = newIdx;\n                    pushTreeFork(returnFiber, _numberOfForks4);\n                }\n                return resultingFirstChild;\n            }\n            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n                // There's no need to check for keys on text nodes since we don't have a\n                // way to define them.\n                if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n                    // We already have an existing node so let's just update it and delete\n                    // the rest.\n                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n                    var existing = useFiber(currentFirstChild, textContent);\n                    existing.return = returnFiber;\n                    return existing;\n                } // The existing first child is not a text node so we need to create one\n                // and delete the existing ones.\n                deleteRemainingChildren(returnFiber, currentFirstChild);\n                var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n                created.return = returnFiber;\n                return created;\n            }\n            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {\n                var key = element.key;\n                var child = currentFirstChild;\n                while(child !== null){\n                    // TODO: If key === null and child.key === null, then this only applies to\n                    // the first item in the list.\n                    if (child.key === key) {\n                        var elementType = element.type;\n                        if (elementType === REACT_FRAGMENT_TYPE) {\n                            if (child.tag === Fragment) {\n                                deleteRemainingChildren(returnFiber, child.sibling);\n                                var existing = useFiber(child, element.props.children);\n                                existing.return = returnFiber;\n                                {\n                                    existing._debugSource = element._source;\n                                    existing._debugOwner = element._owner;\n                                }\n                                return existing;\n                            }\n                        } else {\n                            if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.\n                            // We need to do this after the Hot Reloading check above,\n                            // because hot reloading has different semantics than prod because\n                            // it doesn't resuspend. So we can't let the call below suspend.\n                            typeof elementType === \"object\" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {\n                                deleteRemainingChildren(returnFiber, child.sibling);\n                                var _existing = useFiber(child, element.props);\n                                _existing.ref = coerceRef(returnFiber, child, element);\n                                _existing.return = returnFiber;\n                                {\n                                    _existing._debugSource = element._source;\n                                    _existing._debugOwner = element._owner;\n                                }\n                                return _existing;\n                            }\n                        } // Didn't match.\n                        deleteRemainingChildren(returnFiber, child);\n                        break;\n                    } else {\n                        deleteChild(returnFiber, child);\n                    }\n                    child = child.sibling;\n                }\n                if (element.type === REACT_FRAGMENT_TYPE) {\n                    var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n                    created.return = returnFiber;\n                    return created;\n                } else {\n                    var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\n                    _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n                    _created4.return = returnFiber;\n                    return _created4;\n                }\n            }\n            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {\n                var key = portal.key;\n                var child = currentFirstChild;\n                while(child !== null){\n                    // TODO: If key === null and child.key === null, then this only applies to\n                    // the first item in the list.\n                    if (child.key === key) {\n                        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n                            deleteRemainingChildren(returnFiber, child.sibling);\n                            var existing = useFiber(child, portal.children || []);\n                            existing.return = returnFiber;\n                            return existing;\n                        } else {\n                            deleteRemainingChildren(returnFiber, child);\n                            break;\n                        }\n                    } else {\n                        deleteChild(returnFiber, child);\n                    }\n                    child = child.sibling;\n                }\n                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n                created.return = returnFiber;\n                return created;\n            } // This API will tag the children with the side-effect of the reconciliation\n            // itself. They will be added to the side-effect list as we pass through the\n            // children and the parent.\n            function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n                // This function is not recursive.\n                // If the top level item is an array, we treat it as a set of children,\n                // not as a fragment. Nested arrays on the other hand will be treated as\n                // fragment nodes. Recursion happens at the normal flow.\n                // Handle top level unkeyed fragments as if they were arrays.\n                // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n                // We treat the ambiguous cases above the same.\n                var isUnkeyedTopLevelFragment = typeof newChild === \"object\" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n                if (isUnkeyedTopLevelFragment) {\n                    newChild = newChild.props.children;\n                } // Handle object types\n                if (typeof newChild === \"object\" && newChild !== null) {\n                    switch(newChild.$$typeof){\n                        case REACT_ELEMENT_TYPE:\n                            return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n                        case REACT_PORTAL_TYPE:\n                            return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n                        case REACT_LAZY_TYPE:\n                            {\n                                var payload = newChild._payload;\n                                var init = newChild._init; // TODO: This function is supposed to be non-recursive.\n                                return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);\n                            }\n                    }\n                    if (isArray(newChild)) {\n                        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n                    }\n                    if (getIteratorFn(newChild)) {\n                        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\n                    }\n                    throwOnInvalidObjectType(returnFiber, newChild);\n                }\n                if (typeof newChild === \"string\" && newChild !== \"\" || typeof newChild === \"number\") {\n                    return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, \"\" + newChild, lanes));\n                }\n                {\n                    if (typeof newChild === \"function\") {\n                        warnOnFunctionType(returnFiber);\n                    }\n                }\n                return deleteRemainingChildren(returnFiber, currentFirstChild);\n            }\n            return reconcileChildFibers;\n        }\n        var reconcileChildFibers = ChildReconciler(true);\n        var mountChildFibers = ChildReconciler(false);\n        function cloneChildFibers(current, workInProgress) {\n            if (current !== null && workInProgress.child !== current.child) {\n                throw new Error(\"Resuming work not yet implemented.\");\n            }\n            if (workInProgress.child === null) {\n                return;\n            }\n            var currentChild = workInProgress.child;\n            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n            workInProgress.child = newChild;\n            newChild.return = workInProgress;\n            while(currentChild.sibling !== null){\n                currentChild = currentChild.sibling;\n                newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n                newChild.return = workInProgress;\n            }\n            newChild.sibling = null;\n        } // Reset a workInProgress child set to prepare it for a second pass.\n        function resetChildFibers(workInProgress, lanes) {\n            var child = workInProgress.child;\n            while(child !== null){\n                resetWorkInProgress(child, lanes);\n                child = child.sibling;\n            }\n        }\n        var NO_CONTEXT = {};\n        var contextStackCursor$1 = createCursor(NO_CONTEXT);\n        var contextFiberStackCursor = createCursor(NO_CONTEXT);\n        var rootInstanceStackCursor = createCursor(NO_CONTEXT);\n        function requiredContext(c) {\n            if (c === NO_CONTEXT) {\n                throw new Error(\"Expected host context to exist. This error is likely caused by a bug \" + \"in React. Please file an issue.\");\n            }\n            return c;\n        }\n        function getRootHostContainer() {\n            var rootInstance = requiredContext(rootInstanceStackCursor.current);\n            return rootInstance;\n        }\n        function pushHostContainer(fiber, nextRootInstance) {\n            // Push current root instance onto the stack;\n            // This allows us to reset root when portals are popped.\n            push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n            // This enables us to pop only Fibers that provide unique contexts.\n            push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n            // However, we can't just call getRootHostContext() and push it because\n            // we'd have a different number of entries on the stack depending on\n            // whether getRootHostContext() throws somewhere in renderer code or not.\n            // So we push an empty value first. This lets us safely unwind on errors.\n            push(contextStackCursor$1, NO_CONTEXT, fiber);\n            var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.\n            pop(contextStackCursor$1, fiber);\n            push(contextStackCursor$1, nextRootContext, fiber);\n        }\n        function popHostContainer(fiber) {\n            pop(contextStackCursor$1, fiber);\n            pop(contextFiberStackCursor, fiber);\n            pop(rootInstanceStackCursor, fiber);\n        }\n        function getHostContext() {\n            var context = requiredContext(contextStackCursor$1.current);\n            return context;\n        }\n        function pushHostContext(fiber) {\n            var rootInstance = requiredContext(rootInstanceStackCursor.current);\n            var context = requiredContext(contextStackCursor$1.current);\n            var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.\n            if (context === nextContext) {\n                return;\n            } // Track the context and the Fiber that provided it.\n            // This enables us to pop only Fibers that provide unique contexts.\n            push(contextFiberStackCursor, fiber, fiber);\n            push(contextStackCursor$1, nextContext, fiber);\n        }\n        function popHostContext(fiber) {\n            // Do not pop unless this Fiber provided the current context.\n            // pushHostContext() only pushes Fibers that provide unique contexts.\n            if (contextFiberStackCursor.current !== fiber) {\n                return;\n            }\n            pop(contextStackCursor$1, fiber);\n            pop(contextFiberStackCursor, fiber);\n        }\n        var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is\n        // inherited deeply down the subtree. The upper bits only affect\n        // this immediate suspense boundary and gets reset each new\n        // boundary or suspense list.\n        var SubtreeSuspenseContextMask = 1; // Subtree Flags:\n        // InvisibleParentSuspenseContext indicates that one of our parent Suspense\n        // boundaries is not currently showing visible main content.\n        // Either because it is already showing a fallback or is not mounted at all.\n        // We can use this to determine if it is desirable to trigger a fallback at\n        // the parent. If not, then we might need to trigger undesirable boundaries\n        // and/or suspend the commit to avoid hiding the parent content.\n        var InvisibleParentSuspenseContext = 1; // Shallow Flags:\n        // ForceSuspenseFallback can be used by SuspenseList to force newly added\n        // items into their fallback state during one of the render passes.\n        var ForceSuspenseFallback = 2;\n        var suspenseStackCursor = createCursor(DefaultSuspenseContext);\n        function hasSuspenseContext(parentContext, flag) {\n            return (parentContext & flag) !== 0;\n        }\n        function setDefaultShallowSuspenseContext(parentContext) {\n            return parentContext & SubtreeSuspenseContextMask;\n        }\n        function setShallowSuspenseContext(parentContext, shallowContext) {\n            return parentContext & SubtreeSuspenseContextMask | shallowContext;\n        }\n        function addSubtreeSuspenseContext(parentContext, subtreeContext) {\n            return parentContext | subtreeContext;\n        }\n        function pushSuspenseContext(fiber, newContext) {\n            push(suspenseStackCursor, newContext, fiber);\n        }\n        function popSuspenseContext(fiber) {\n            pop(suspenseStackCursor, fiber);\n        }\n        function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {\n            // If it was the primary children that just suspended, capture and render the\n            // fallback. Otherwise, don't capture and bubble to the next boundary.\n            var nextState = workInProgress.memoizedState;\n            if (nextState !== null) {\n                if (nextState.dehydrated !== null) {\n                    // A dehydrated boundary always captures.\n                    return true;\n                }\n                return false;\n            }\n            var props = workInProgress.memoizedProps; // Regular boundaries always capture.\n            {\n                return true;\n            }\n        }\n        function findFirstSuspended(row) {\n            var node = row;\n            while(node !== null){\n                if (node.tag === SuspenseComponent) {\n                    var state = node.memoizedState;\n                    if (state !== null) {\n                        var dehydrated = state.dehydrated;\n                        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {\n                            return node;\n                        }\n                    }\n                } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't\n                // keep track of whether it suspended or not.\n                node.memoizedProps.revealOrder !== undefined) {\n                    var didSuspend = (node.flags & DidCapture) !== NoFlags;\n                    if (didSuspend) {\n                        return node;\n                    }\n                } else if (node.child !== null) {\n                    node.child.return = node;\n                    node = node.child;\n                    continue;\n                }\n                if (node === row) {\n                    return null;\n                }\n                while(node.sibling === null){\n                    if (node.return === null || node.return === row) {\n                        return null;\n                    }\n                    node = node.return;\n                }\n                node.sibling.return = node.return;\n                node = node.sibling;\n            }\n            return null;\n        }\n        var NoFlags$1 = /*   */ 0; // Represents whether effect should fire.\n        var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.\n        var Insertion = /*  */ 2;\n        var Layout = /*    */ 4;\n        var Passive$1 = /*   */ 8;\n        // and should be reset before starting a new render.\n        // This tracks which mutable sources need to be reset after a render.\n        var workInProgressSources = [];\n        function resetWorkInProgressVersions() {\n            for(var i = 0; i < workInProgressSources.length; i++){\n                var mutableSource = workInProgressSources[i];\n                if (isPrimaryRenderer) {\n                    mutableSource._workInProgressVersionPrimary = null;\n                } else {\n                    mutableSource._workInProgressVersionSecondary = null;\n                }\n            }\n            workInProgressSources.length = 0;\n        }\n        // This ensures that the version used for server rendering matches the one\n        // that is eventually read during hydration.\n        // If they don't match there's a potential tear and a full deopt render is required.\n        function registerMutableSourceForHydration(root, mutableSource) {\n            var getVersion = mutableSource._getVersion;\n            var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.\n            // Retaining it forever may interfere with GC.\n            if (root.mutableSourceEagerHydrationData == null) {\n                root.mutableSourceEagerHydrationData = [\n                    mutableSource,\n                    version\n                ];\n            } else {\n                root.mutableSourceEagerHydrationData.push(mutableSource, version);\n            }\n        }\n        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;\n        var didWarnAboutMismatchedHooksForComponent;\n        var didWarnUncachedGetSnapshot;\n        {\n            didWarnAboutMismatchedHooksForComponent = new Set();\n        }\n        // These are set right before calling the component.\n        var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n        // the work-in-progress hook.\n        var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n        // current hook list is the list that belongs to the current fiber. The\n        // work-in-progress hook list is a new list that will be added to the\n        // work-in-progress fiber.\n        var currentHook = null;\n        var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n        // does not get reset if we do another render pass; only when we're completely\n        // finished evaluating this component. This is an optimization so we know\n        // whether we need to clear render phase updates after a throw.\n        var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n        // gets reset after each attempt.\n        // TODO: Maybe there's some way to consolidate this with\n        // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n        var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.\n        var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during\n        // hydration). This counter is global, so client ids are not stable across\n        // render attempts.\n        var globalClientIdCounter = 0;\n        var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n        var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\n        // The list stores the order of hooks used during the initial render (mount).\n        // Subsequent renders (updates) reference this list.\n        var hookTypesDev = null;\n        var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\n        // the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n        // When true, such Hooks will always be \"remounted\". Only used during hot reload.\n        var ignorePreviousDependencies = false;\n        function mountHookTypesDev() {\n            {\n                var hookName = currentHookNameInDev;\n                if (hookTypesDev === null) {\n                    hookTypesDev = [\n                        hookName\n                    ];\n                } else {\n                    hookTypesDev.push(hookName);\n                }\n            }\n        }\n        function updateHookTypesDev() {\n            {\n                var hookName = currentHookNameInDev;\n                if (hookTypesDev !== null) {\n                    hookTypesUpdateIndexDev++;\n                    if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n                        warnOnHookMismatchInDev(hookName);\n                    }\n                }\n            }\n        }\n        function checkDepsAreArrayDev(deps) {\n            {\n                if (deps !== undefined && deps !== null && !isArray(deps)) {\n                    // Verify deps, but only on mount to avoid extra checks.\n                    // It's unlikely their type would change as usually you define them inline.\n                    error(\"%s received a final argument that is not an array (instead, received `%s`). When \" + \"specified, the final argument must be an array.\", currentHookNameInDev, typeof deps);\n                }\n            }\n        }\n        function warnOnHookMismatchInDev(currentHookName) {\n            {\n                var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n                if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n                    didWarnAboutMismatchedHooksForComponent.add(componentName);\n                    if (hookTypesDev !== null) {\n                        var table = \"\";\n                        var secondColumnStart = 30;\n                        for(var i = 0; i <= hookTypesUpdateIndexDev; i++){\n                            var oldHookName = hookTypesDev[i];\n                            var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n                            var row = i + 1 + \". \" + oldHookName; // Extra space so second column lines up\n                            // lol @ IE not supporting String#repeat\n                            while(row.length < secondColumnStart){\n                                row += \" \";\n                            }\n                            row += newHookName + \"\\n\";\n                            table += row;\n                        }\n                        error(\"React has detected a change in the order of Hooks called by %s. \" + \"This will lead to bugs and errors if not fixed. \" + \"For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n\" + \"   Previous render            Next render\\n\" + \"   ------------------------------------------------------\\n\" + \"%s\" + \"   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\", componentName, table);\n                    }\n                }\n            }\n        }\n        function throwInvalidHookError() {\n            throw new Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for\" + \" one of the following reasons:\\n\" + \"1. You might have mismatching versions of React and the renderer (such as React DOM)\\n\" + \"2. You might be breaking the Rules of Hooks\\n\" + \"3. You might have more than one copy of React in the same app\\n\" + \"See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\");\n        }\n        function areHookInputsEqual(nextDeps, prevDeps) {\n            {\n                if (ignorePreviousDependencies) {\n                    // Only true when this component is being hot reloaded.\n                    return false;\n                }\n            }\n            if (prevDeps === null) {\n                {\n                    error(\"%s received a final argument during this render, but not during \" + \"the previous render. Even though the final argument is optional, \" + \"its type cannot change between renders.\", currentHookNameInDev);\n                }\n                return false;\n            }\n            {\n                // Don't bother comparing lengths in prod because these arrays should be\n                // passed inline.\n                if (nextDeps.length !== prevDeps.length) {\n                    error(\"The final argument passed to %s changed size between renders. The \" + \"order and size of this array must remain constant.\\n\\n\" + \"Previous: %s\\n\" + \"Incoming: %s\", currentHookNameInDev, \"[\" + prevDeps.join(\", \") + \"]\", \"[\" + nextDeps.join(\", \") + \"]\");\n                }\n            }\n            for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){\n                if (objectIs(nextDeps[i], prevDeps[i])) {\n                    continue;\n                }\n                return false;\n            }\n            return true;\n        }\n        function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n            renderLanes = nextRenderLanes;\n            currentlyRenderingFiber$1 = workInProgress;\n            {\n                hookTypesDev = current !== null ? current._debugHookTypes : null;\n                hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n                ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n            }\n            workInProgress.memoizedState = null;\n            workInProgress.updateQueue = null;\n            workInProgress.lanes = NoLanes; // The following should have already been reset\n            // currentHook = null;\n            // workInProgressHook = null;\n            // didScheduleRenderPhaseUpdate = false;\n            // localIdCounter = 0;\n            // TODO Warn if no hooks are used at all during mount, then some are used during update.\n            // Currently we will identify the update render as a mount because memoizedState === null.\n            // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n            // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n            // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n            // so memoizedState would be null during updates and mounts.\n            {\n                if (current !== null && current.memoizedState !== null) {\n                    ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n                } else if (hookTypesDev !== null) {\n                    // This dispatcher handles an edge case where a component is updating,\n                    // but no stateful hooks have been used.\n                    // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n                    // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n                    // This dispatcher does that.\n                    ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;\n                } else {\n                    ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n                }\n            }\n            var children = Component(props, secondArg); // Check if there was a render phase update\n            if (didScheduleRenderPhaseUpdateDuringThisPass) {\n                // Keep rendering in a loop for as long as render phase updates continue to\n                // be scheduled. Use a counter to prevent infinite loops.\n                var numberOfReRenders = 0;\n                do {\n                    didScheduleRenderPhaseUpdateDuringThisPass = false;\n                    localIdCounter = 0;\n                    if (numberOfReRenders >= RE_RENDER_LIMIT) {\n                        throw new Error(\"Too many re-renders. React limits the number of renders to prevent \" + \"an infinite loop.\");\n                    }\n                    numberOfReRenders += 1;\n                    {\n                        // Even when hot reloading, allow dependencies to stabilize\n                        // after first render to prevent infinite render phase updates.\n                        ignorePreviousDependencies = false;\n                    }\n                    currentHook = null;\n                    workInProgressHook = null;\n                    workInProgress.updateQueue = null;\n                    {\n                        // Also validate hook order for cascading updates.\n                        hookTypesUpdateIndexDev = -1;\n                    }\n                    ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;\n                    children = Component(props, secondArg);\n                }while (didScheduleRenderPhaseUpdateDuringThisPass);\n            } // We can assume the previous dispatcher is always this one, since we set it\n            // at the beginning of the render phase and there's no re-entrance.\n            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n            {\n                workInProgress._debugHookTypes = hookTypesDev;\n            }\n            // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n            renderLanes = NoLanes;\n            currentlyRenderingFiber$1 = null;\n            currentHook = null;\n            workInProgressHook = null;\n            {\n                currentHookNameInDev = null;\n                hookTypesDev = null;\n                hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last\n                // render. If this fires, it suggests that we incorrectly reset the static\n                // flags in some other part of the codebase. This has happened before, for\n                // example, in the SuspenseList implementation.\n                if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird\n                // and creates false positives. To make this work in legacy mode, we'd\n                // need to mark fibers that commit in an incomplete state, somehow. For\n                // now I'll disable the warning that most of the bugs that would trigger\n                // it are either exclusive to concurrent mode or exist in both.\n                (current.mode & ConcurrentMode) !== NoMode) {\n                    error(\"Internal React error: Expected static flag was missing. Please \" + \"notify the React team.\");\n                }\n            }\n            didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\n            // localIdCounter = 0;\n            if (didRenderTooFewHooks) {\n                throw new Error(\"Rendered fewer hooks than expected. This may be caused by an accidental \" + \"early return statement.\");\n            }\n            return children;\n        }\n        function checkDidRenderIdHook() {\n            // This should be called immediately after every renderWithHooks call.\n            // Conceptually, it's part of the return value of renderWithHooks; it's only a\n            // separate function to avoid using an array tuple.\n            var didRenderIdHook = localIdCounter !== 0;\n            localIdCounter = 0;\n            return didRenderIdHook;\n        }\n        function bailoutHooks(current, workInProgress, lanes) {\n            workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\n            // complete phase (bubbleProperties).\n            if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n                workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);\n            } else {\n                workInProgress.flags &= ~(Passive | Update);\n            }\n            current.lanes = removeLanes(current.lanes, lanes);\n        }\n        function resetHooksAfterThrow() {\n            // We can assume the previous dispatcher is always this one, since we set it\n            // at the beginning of the render phase and there's no re-entrance.\n            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n            if (didScheduleRenderPhaseUpdate) {\n                // There were render phase updates. These are only valid for this render\n                // phase, which we are now aborting. Remove the updates from the queues so\n                // they do not persist to the next render. Do not remove updates from hooks\n                // that weren't processed.\n                //\n                // Only reset the updates from the queue if it has a clone. If it does\n                // not have a clone, that means it wasn't processed, and the updates were\n                // scheduled before we entered the render phase.\n                var hook = currentlyRenderingFiber$1.memoizedState;\n                while(hook !== null){\n                    var queue = hook.queue;\n                    if (queue !== null) {\n                        queue.pending = null;\n                    }\n                    hook = hook.next;\n                }\n                didScheduleRenderPhaseUpdate = false;\n            }\n            renderLanes = NoLanes;\n            currentlyRenderingFiber$1 = null;\n            currentHook = null;\n            workInProgressHook = null;\n            {\n                hookTypesDev = null;\n                hookTypesUpdateIndexDev = -1;\n                currentHookNameInDev = null;\n                isUpdatingOpaqueValueInRenderPhase = false;\n            }\n            didScheduleRenderPhaseUpdateDuringThisPass = false;\n            localIdCounter = 0;\n        }\n        function mountWorkInProgressHook() {\n            var hook = {\n                memoizedState: null,\n                baseState: null,\n                baseQueue: null,\n                queue: null,\n                next: null\n            };\n            if (workInProgressHook === null) {\n                // This is the first hook in the list\n                currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n            } else {\n                // Append to the end of the list\n                workInProgressHook = workInProgressHook.next = hook;\n            }\n            return workInProgressHook;\n        }\n        function updateWorkInProgressHook() {\n            // This function is used both for updates and for re-renders triggered by a\n            // render phase update. It assumes there is either a current hook we can\n            // clone, or a work-in-progress hook from a previous render pass that we can\n            // use as a base. When we reach the end of the base list, we must switch to\n            // the dispatcher used for mounts.\n            var nextCurrentHook;\n            if (currentHook === null) {\n                var current = currentlyRenderingFiber$1.alternate;\n                if (current !== null) {\n                    nextCurrentHook = current.memoizedState;\n                } else {\n                    nextCurrentHook = null;\n                }\n            } else {\n                nextCurrentHook = currentHook.next;\n            }\n            var nextWorkInProgressHook;\n            if (workInProgressHook === null) {\n                nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n            } else {\n                nextWorkInProgressHook = workInProgressHook.next;\n            }\n            if (nextWorkInProgressHook !== null) {\n                // There's already a work-in-progress. Reuse it.\n                workInProgressHook = nextWorkInProgressHook;\n                nextWorkInProgressHook = workInProgressHook.next;\n                currentHook = nextCurrentHook;\n            } else {\n                // Clone from the current hook.\n                if (nextCurrentHook === null) {\n                    throw new Error(\"Rendered more hooks than during the previous render.\");\n                }\n                currentHook = nextCurrentHook;\n                var newHook = {\n                    memoizedState: currentHook.memoizedState,\n                    baseState: currentHook.baseState,\n                    baseQueue: currentHook.baseQueue,\n                    queue: currentHook.queue,\n                    next: null\n                };\n                if (workInProgressHook === null) {\n                    // This is the first hook in the list.\n                    currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n                } else {\n                    // Append to the end of the list.\n                    workInProgressHook = workInProgressHook.next = newHook;\n                }\n            }\n            return workInProgressHook;\n        }\n        function createFunctionComponentUpdateQueue() {\n            return {\n                lastEffect: null,\n                stores: null\n            };\n        }\n        function basicStateReducer(state, action) {\n            // $FlowFixMe: Flow doesn't like mixed types\n            return typeof action === \"function\" ? action(state) : action;\n        }\n        function mountReducer(reducer, initialArg, init) {\n            var hook = mountWorkInProgressHook();\n            var initialState;\n            if (init !== undefined) {\n                initialState = init(initialArg);\n            } else {\n                initialState = initialArg;\n            }\n            hook.memoizedState = hook.baseState = initialState;\n            var queue = {\n                pending: null,\n                interleaved: null,\n                lanes: NoLanes,\n                dispatch: null,\n                lastRenderedReducer: reducer,\n                lastRenderedState: initialState\n            };\n            hook.queue = queue;\n            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\n            return [\n                hook.memoizedState,\n                dispatch\n            ];\n        }\n        function updateReducer(reducer, initialArg, init) {\n            var hook = updateWorkInProgressHook();\n            var queue = hook.queue;\n            if (queue === null) {\n                throw new Error(\"Should have a queue. This is likely a bug in React. Please file an issue.\");\n            }\n            queue.lastRenderedReducer = reducer;\n            var current = currentHook; // The last rebase update that is NOT part of the base state.\n            var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.\n            var pendingQueue = queue.pending;\n            if (pendingQueue !== null) {\n                // We have new updates that haven't been processed yet.\n                // We'll add them to the base queue.\n                if (baseQueue !== null) {\n                    // Merge the pending queue and the base queue.\n                    var baseFirst = baseQueue.next;\n                    var pendingFirst = pendingQueue.next;\n                    baseQueue.next = pendingFirst;\n                    pendingQueue.next = baseFirst;\n                }\n                {\n                    if (current.baseQueue !== baseQueue) {\n                        // Internal invariant that should never happen, but feasibly could in\n                        // the future if we implement resuming, or some form of that.\n                        error(\"Internal error: Expected work-in-progress queue to be a clone. \" + \"This is a bug in React.\");\n                    }\n                }\n                current.baseQueue = baseQueue = pendingQueue;\n                queue.pending = null;\n            }\n            if (baseQueue !== null) {\n                // We have a queue to process.\n                var first = baseQueue.next;\n                var newState = current.baseState;\n                var newBaseState = null;\n                var newBaseQueueFirst = null;\n                var newBaseQueueLast = null;\n                var update = first;\n                do {\n                    var updateLane = update.lane;\n                    if (!isSubsetOfLanes(renderLanes, updateLane)) {\n                        // Priority is insufficient. Skip this update. If this is the first\n                        // skipped update, the previous update/state is the new base\n                        // update/state.\n                        var clone = {\n                            lane: updateLane,\n                            action: update.action,\n                            hasEagerState: update.hasEagerState,\n                            eagerState: update.eagerState,\n                            next: null\n                        };\n                        if (newBaseQueueLast === null) {\n                            newBaseQueueFirst = newBaseQueueLast = clone;\n                            newBaseState = newState;\n                        } else {\n                            newBaseQueueLast = newBaseQueueLast.next = clone;\n                        } // Update the remaining priority in the queue.\n                        // TODO: Don't need to accumulate this. Instead, we can remove\n                        // renderLanes from the original lanes.\n                        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n                        markSkippedUpdateLanes(updateLane);\n                    } else {\n                        // This update does have sufficient priority.\n                        if (newBaseQueueLast !== null) {\n                            var _clone = {\n                                // This update is going to be committed so we never want uncommit\n                                // it. Using NoLane works because 0 is a subset of all bitmasks, so\n                                // this will never be skipped by the check above.\n                                lane: NoLane,\n                                action: update.action,\n                                hasEagerState: update.hasEagerState,\n                                eagerState: update.eagerState,\n                                next: null\n                            };\n                            newBaseQueueLast = newBaseQueueLast.next = _clone;\n                        } // Process this update.\n                        if (update.hasEagerState) {\n                            // If this update is a state update (not a reducer) and was processed eagerly,\n                            // we can use the eagerly computed state\n                            newState = update.eagerState;\n                        } else {\n                            var action = update.action;\n                            newState = reducer(newState, action);\n                        }\n                    }\n                    update = update.next;\n                }while (update !== null && update !== first);\n                if (newBaseQueueLast === null) {\n                    newBaseState = newState;\n                } else {\n                    newBaseQueueLast.next = newBaseQueueFirst;\n                } // Mark that the fiber performed work, but only if the new state is\n                // different from the current state.\n                if (!objectIs(newState, hook.memoizedState)) {\n                    markWorkInProgressReceivedUpdate();\n                }\n                hook.memoizedState = newState;\n                hook.baseState = newBaseState;\n                hook.baseQueue = newBaseQueueLast;\n                queue.lastRenderedState = newState;\n            } // Interleaved updates are stored on a separate queue. We aren't going to\n            // process them during this render, but we do need to track which lanes\n            // are remaining.\n            var lastInterleaved = queue.interleaved;\n            if (lastInterleaved !== null) {\n                var interleaved = lastInterleaved;\n                do {\n                    var interleavedLane = interleaved.lane;\n                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);\n                    markSkippedUpdateLanes(interleavedLane);\n                    interleaved = interleaved.next;\n                }while (interleaved !== lastInterleaved);\n            } else if (baseQueue === null) {\n                // `queue.lanes` is used for entangling transitions. We can set it back to\n                // zero once the queue is empty.\n                queue.lanes = NoLanes;\n            }\n            var dispatch = queue.dispatch;\n            return [\n                hook.memoizedState,\n                dispatch\n            ];\n        }\n        function rerenderReducer(reducer, initialArg, init) {\n            var hook = updateWorkInProgressHook();\n            var queue = hook.queue;\n            if (queue === null) {\n                throw new Error(\"Should have a queue. This is likely a bug in React. Please file an issue.\");\n            }\n            queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n            // work-in-progress hook.\n            var dispatch = queue.dispatch;\n            var lastRenderPhaseUpdate = queue.pending;\n            var newState = hook.memoizedState;\n            if (lastRenderPhaseUpdate !== null) {\n                // The queue doesn't persist past this render pass.\n                queue.pending = null;\n                var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n                var update = firstRenderPhaseUpdate;\n                do {\n                    // Process this render phase update. We don't have to check the\n                    // priority because it will always be the same as the current\n                    // render's.\n                    var action = update.action;\n                    newState = reducer(newState, action);\n                    update = update.next;\n                }while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n                // different from the current state.\n                if (!objectIs(newState, hook.memoizedState)) {\n                    markWorkInProgressReceivedUpdate();\n                }\n                hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n                // the base state unless the queue is empty.\n                // TODO: Not sure if this is the desired semantics, but it's what we\n                // do for gDSFP. I can't remember why.\n                if (hook.baseQueue === null) {\n                    hook.baseState = newState;\n                }\n                queue.lastRenderedState = newState;\n            }\n            return [\n                newState,\n                dispatch\n            ];\n        }\n        function mountMutableSource(source, getSnapshot, subscribe) {\n            {\n                return undefined;\n            }\n        }\n        function updateMutableSource(source, getSnapshot, subscribe) {\n            {\n                return undefined;\n            }\n        }\n        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n            var fiber = currentlyRenderingFiber$1;\n            var hook = mountWorkInProgressHook();\n            var nextSnapshot;\n            var isHydrating = getIsHydrating();\n            if (isHydrating) {\n                if (getServerSnapshot === undefined) {\n                    throw new Error(\"Missing getServerSnapshot, which is required for \" + \"server-rendered content. Will revert to client rendering.\");\n                }\n                nextSnapshot = getServerSnapshot();\n                {\n                    if (!didWarnUncachedGetSnapshot) {\n                        if (nextSnapshot !== getServerSnapshot()) {\n                            error(\"The result of getServerSnapshot should be cached to avoid an infinite loop\");\n                            didWarnUncachedGetSnapshot = true;\n                        }\n                    }\n                }\n            } else {\n                nextSnapshot = getSnapshot();\n                {\n                    if (!didWarnUncachedGetSnapshot) {\n                        var cachedSnapshot = getSnapshot();\n                        if (!objectIs(nextSnapshot, cachedSnapshot)) {\n                            error(\"The result of getSnapshot should be cached to avoid an infinite loop\");\n                            didWarnUncachedGetSnapshot = true;\n                        }\n                    }\n                }\n                // Right before committing, we will walk the tree and check if any of the\n                // stores were mutated.\n                //\n                // We won't do this if we're hydrating server-rendered content, because if\n                // the content is stale, it's already visible anyway. Instead we'll patch\n                // it up in a passive effect.\n                var root = getWorkInProgressRoot();\n                if (root === null) {\n                    throw new Error(\"Expected a work-in-progress root. This is a bug in React. Please file an issue.\");\n                }\n                if (!includesBlockingLane(root, renderLanes)) {\n                    pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n                }\n            } // Read the current snapshot from the store on every render. This breaks the\n            // normal rules of React, and only works because store updates are\n            // always synchronous.\n            hook.memoizedState = nextSnapshot;\n            var inst = {\n                value: nextSnapshot,\n                getSnapshot: getSnapshot\n            };\n            hook.queue = inst; // Schedule an effect to subscribe to the store.\n            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [\n                subscribe\n            ]); // Schedule an effect to update the mutable instance fields. We will update\n            // this whenever subscribe, getSnapshot, or value changes. Because there's no\n            // clean-up function, and we track the deps correctly, we can call pushEffect\n            // directly, without storing any additional state. For the same reason, we\n            // don't need to set a static flag, either.\n            // TODO: We can move this to the passive phase once we add a pre-commit\n            // consistency check. See the next comment.\n            fiber.flags |= Passive;\n            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);\n            return nextSnapshot;\n        }\n        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n            var fiber = currentlyRenderingFiber$1;\n            var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\n            // normal rules of React, and only works because store updates are\n            // always synchronous.\n            var nextSnapshot = getSnapshot();\n            {\n                if (!didWarnUncachedGetSnapshot) {\n                    var cachedSnapshot = getSnapshot();\n                    if (!objectIs(nextSnapshot, cachedSnapshot)) {\n                        error(\"The result of getSnapshot should be cached to avoid an infinite loop\");\n                        didWarnUncachedGetSnapshot = true;\n                    }\n                }\n            }\n            var prevSnapshot = hook.memoizedState;\n            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n            if (snapshotChanged) {\n                hook.memoizedState = nextSnapshot;\n                markWorkInProgressReceivedUpdate();\n            }\n            var inst = hook.queue;\n            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [\n                subscribe\n            ]); // Whenever getSnapshot or subscribe changes, we need to check in the\n            // commit phase if there was an interleaved mutation. In concurrent mode\n            // this can happen all the time, but even in synchronous mode, an earlier\n            // effect may have mutated the store.\n            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by\n            // checking whether we scheduled a subscription effect above.\n            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\n                fiber.flags |= Passive;\n                pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.\n                // Right before committing, we will walk the tree and check if any of the\n                // stores were mutated.\n                var root = getWorkInProgressRoot();\n                if (root === null) {\n                    throw new Error(\"Expected a work-in-progress root. This is a bug in React. Please file an issue.\");\n                }\n                if (!includesBlockingLane(root, renderLanes)) {\n                    pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n                }\n            }\n            return nextSnapshot;\n        }\n        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n            fiber.flags |= StoreConsistency;\n            var check = {\n                getSnapshot: getSnapshot,\n                value: renderedSnapshot\n            };\n            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n            if (componentUpdateQueue === null) {\n                componentUpdateQueue = createFunctionComponentUpdateQueue();\n                currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n                componentUpdateQueue.stores = [\n                    check\n                ];\n            } else {\n                var stores = componentUpdateQueue.stores;\n                if (stores === null) {\n                    componentUpdateQueue.stores = [\n                        check\n                    ];\n                } else {\n                    stores.push(check);\n                }\n            }\n        }\n        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n            // These are updated in the passive phase\n            inst.value = nextSnapshot;\n            inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\n            // have been in an event that fired before the passive effects, or it could\n            // have been in a layout effect. In that case, we would have used the old\n            // snapsho and getSnapshot values to bail out. We need to check one more time.\n            if (checkIfSnapshotChanged(inst)) {\n                // Force a re-render.\n                forceStoreRerender(fiber);\n            }\n        }\n        function subscribeToStore(fiber, inst, subscribe) {\n            var handleStoreChange = function() {\n                // The store changed. Check if the snapshot changed since the last time we\n                // read from the store.\n                if (checkIfSnapshotChanged(inst)) {\n                    // Force a re-render.\n                    forceStoreRerender(fiber);\n                }\n            }; // Subscribe to the store and return a clean-up function.\n            return subscribe(handleStoreChange);\n        }\n        function checkIfSnapshotChanged(inst) {\n            var latestGetSnapshot = inst.getSnapshot;\n            var prevValue = inst.value;\n            try {\n                var nextValue = latestGetSnapshot();\n                return !objectIs(prevValue, nextValue);\n            } catch (error) {\n                return true;\n            }\n        }\n        function forceStoreRerender(fiber) {\n            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n        }\n        function mountState(initialState) {\n            var hook = mountWorkInProgressHook();\n            if (typeof initialState === \"function\") {\n                // $FlowFixMe: Flow doesn't like mixed types\n                initialState = initialState();\n            }\n            hook.memoizedState = hook.baseState = initialState;\n            var queue = {\n                pending: null,\n                interleaved: null,\n                lanes: NoLanes,\n                dispatch: null,\n                lastRenderedReducer: basicStateReducer,\n                lastRenderedState: initialState\n            };\n            hook.queue = queue;\n            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n            return [\n                hook.memoizedState,\n                dispatch\n            ];\n        }\n        function updateState(initialState) {\n            return updateReducer(basicStateReducer);\n        }\n        function rerenderState(initialState) {\n            return rerenderReducer(basicStateReducer);\n        }\n        function pushEffect(tag, create, destroy, deps) {\n            var effect = {\n                tag: tag,\n                create: create,\n                destroy: destroy,\n                deps: deps,\n                // Circular\n                next: null\n            };\n            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n            if (componentUpdateQueue === null) {\n                componentUpdateQueue = createFunctionComponentUpdateQueue();\n                currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n                componentUpdateQueue.lastEffect = effect.next = effect;\n            } else {\n                var lastEffect = componentUpdateQueue.lastEffect;\n                if (lastEffect === null) {\n                    componentUpdateQueue.lastEffect = effect.next = effect;\n                } else {\n                    var firstEffect = lastEffect.next;\n                    lastEffect.next = effect;\n                    effect.next = firstEffect;\n                    componentUpdateQueue.lastEffect = effect;\n                }\n            }\n            return effect;\n        }\n        function mountRef(initialValue) {\n            var hook = mountWorkInProgressHook();\n            {\n                var _ref2 = {\n                    current: initialValue\n                };\n                hook.memoizedState = _ref2;\n                return _ref2;\n            }\n        }\n        function updateRef(initialValue) {\n            var hook = updateWorkInProgressHook();\n            return hook.memoizedState;\n        }\n        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n            var hook = mountWorkInProgressHook();\n            var nextDeps = deps === undefined ? null : deps;\n            currentlyRenderingFiber$1.flags |= fiberFlags;\n            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);\n        }\n        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n            var hook = updateWorkInProgressHook();\n            var nextDeps = deps === undefined ? null : deps;\n            var destroy = undefined;\n            if (currentHook !== null) {\n                var prevEffect = currentHook.memoizedState;\n                destroy = prevEffect.destroy;\n                if (nextDeps !== null) {\n                    var prevDeps = prevEffect.deps;\n                    if (areHookInputsEqual(nextDeps, prevDeps)) {\n                        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n                        return;\n                    }\n                }\n            }\n            currentlyRenderingFiber$1.flags |= fiberFlags;\n            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);\n        }\n        function mountEffect(create, deps) {\n            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n                return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);\n            } else {\n                return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);\n            }\n        }\n        function updateEffect(create, deps) {\n            return updateEffectImpl(Passive, Passive$1, create, deps);\n        }\n        function mountInsertionEffect(create, deps) {\n            return mountEffectImpl(Update, Insertion, create, deps);\n        }\n        function updateInsertionEffect(create, deps) {\n            return updateEffectImpl(Update, Insertion, create, deps);\n        }\n        function mountLayoutEffect(create, deps) {\n            var fiberFlags = Update;\n            {\n                fiberFlags |= LayoutStatic;\n            }\n            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n                fiberFlags |= MountLayoutDev;\n            }\n            return mountEffectImpl(fiberFlags, Layout, create, deps);\n        }\n        function updateLayoutEffect(create, deps) {\n            return updateEffectImpl(Update, Layout, create, deps);\n        }\n        function imperativeHandleEffect(create, ref) {\n            if (typeof ref === \"function\") {\n                var refCallback = ref;\n                var _inst = create();\n                refCallback(_inst);\n                return function() {\n                    refCallback(null);\n                };\n            } else if (ref !== null && ref !== undefined) {\n                var refObject = ref;\n                {\n                    if (!refObject.hasOwnProperty(\"current\")) {\n                        error(\"Expected useImperativeHandle() first argument to either be a \" + \"ref callback or React.createRef() object. Instead received: %s.\", \"an object with keys {\" + Object.keys(refObject).join(\", \") + \"}\");\n                    }\n                }\n                var _inst2 = create();\n                refObject.current = _inst2;\n                return function() {\n                    refObject.current = null;\n                };\n            }\n        }\n        function mountImperativeHandle(ref, create, deps) {\n            {\n                if (typeof create !== \"function\") {\n                    error(\"Expected useImperativeHandle() second argument to be a function \" + \"that creates a handle. Instead received: %s.\", create !== null ? typeof create : \"null\");\n                }\n            }\n            var effectDeps = deps !== null && deps !== undefined ? deps.concat([\n                ref\n            ]) : null;\n            var fiberFlags = Update;\n            {\n                fiberFlags |= LayoutStatic;\n            }\n            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n                fiberFlags |= MountLayoutDev;\n            }\n            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n        }\n        function updateImperativeHandle(ref, create, deps) {\n            {\n                if (typeof create !== \"function\") {\n                    error(\"Expected useImperativeHandle() second argument to be a function \" + \"that creates a handle. Instead received: %s.\", create !== null ? typeof create : \"null\");\n                }\n            }\n            var effectDeps = deps !== null && deps !== undefined ? deps.concat([\n                ref\n            ]) : null;\n            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n        }\n        function mountDebugValue(value, formatterFn) {\n        // The react-debug-hooks package injects its own implementation\n        // so that e.g. DevTools can display custom hook values.\n        }\n        var updateDebugValue = mountDebugValue;\n        function mountCallback(callback, deps) {\n            var hook = mountWorkInProgressHook();\n            var nextDeps = deps === undefined ? null : deps;\n            hook.memoizedState = [\n                callback,\n                nextDeps\n            ];\n            return callback;\n        }\n        function updateCallback(callback, deps) {\n            var hook = updateWorkInProgressHook();\n            var nextDeps = deps === undefined ? null : deps;\n            var prevState = hook.memoizedState;\n            if (prevState !== null) {\n                if (nextDeps !== null) {\n                    var prevDeps = prevState[1];\n                    if (areHookInputsEqual(nextDeps, prevDeps)) {\n                        return prevState[0];\n                    }\n                }\n            }\n            hook.memoizedState = [\n                callback,\n                nextDeps\n            ];\n            return callback;\n        }\n        function mountMemo(nextCreate, deps) {\n            var hook = mountWorkInProgressHook();\n            var nextDeps = deps === undefined ? null : deps;\n            var nextValue = nextCreate();\n            hook.memoizedState = [\n                nextValue,\n                nextDeps\n            ];\n            return nextValue;\n        }\n        function updateMemo(nextCreate, deps) {\n            var hook = updateWorkInProgressHook();\n            var nextDeps = deps === undefined ? null : deps;\n            var prevState = hook.memoizedState;\n            if (prevState !== null) {\n                // Assume these are defined. If they're not, areHookInputsEqual will warn.\n                if (nextDeps !== null) {\n                    var prevDeps = prevState[1];\n                    if (areHookInputsEqual(nextDeps, prevDeps)) {\n                        return prevState[0];\n                    }\n                }\n            }\n            var nextValue = nextCreate();\n            hook.memoizedState = [\n                nextValue,\n                nextDeps\n            ];\n            return nextValue;\n        }\n        function mountDeferredValue(value) {\n            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];\n            mountEffect(function() {\n                var prevTransition = ReactCurrentBatchConfig$1.transition;\n                ReactCurrentBatchConfig$1.transition = {};\n                try {\n                    setValue(value);\n                } finally{\n                    ReactCurrentBatchConfig$1.transition = prevTransition;\n                }\n            }, [\n                value\n            ]);\n            return prevValue;\n        }\n        function updateDeferredValue(value) {\n            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];\n            updateEffect(function() {\n                var prevTransition = ReactCurrentBatchConfig$1.transition;\n                ReactCurrentBatchConfig$1.transition = {};\n                try {\n                    setValue(value);\n                } finally{\n                    ReactCurrentBatchConfig$1.transition = prevTransition;\n                }\n            }, [\n                value\n            ]);\n            return prevValue;\n        }\n        function rerenderDeferredValue(value) {\n            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];\n            updateEffect(function() {\n                var prevTransition = ReactCurrentBatchConfig$1.transition;\n                ReactCurrentBatchConfig$1.transition = {};\n                try {\n                    setValue(value);\n                } finally{\n                    ReactCurrentBatchConfig$1.transition = prevTransition;\n                }\n            }, [\n                value\n            ]);\n            return prevValue;\n        }\n        function startTransition(setPending, callback, options) {\n            var previousPriority = getCurrentUpdatePriority();\n            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\n            setPending(true);\n            var prevTransition = ReactCurrentBatchConfig$1.transition;\n            ReactCurrentBatchConfig$1.transition = {};\n            var currentTransition = ReactCurrentBatchConfig$1.transition;\n            {\n                ReactCurrentBatchConfig$1.transition._updatedFibers = new Set();\n            }\n            try {\n                setPending(false);\n                callback();\n            } finally{\n                setCurrentUpdatePriority(previousPriority);\n                ReactCurrentBatchConfig$1.transition = prevTransition;\n                {\n                    if (prevTransition === null && currentTransition._updatedFibers) {\n                        var updatedFibersCount = currentTransition._updatedFibers.size;\n                        if (updatedFibersCount > 10) {\n                            warn(\"Detected a large number of updates inside startTransition. \" + \"If this is due to a subscription please re-write it to use React provided hooks. \" + \"Otherwise concurrent mode guarantees are off the table.\");\n                        }\n                        currentTransition._updatedFibers.clear();\n                    }\n                }\n            }\n        }\n        function mountTransition() {\n            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1]; // The `start` method never changes.\n            var start = startTransition.bind(null, setPending);\n            var hook = mountWorkInProgressHook();\n            hook.memoizedState = start;\n            return [\n                isPending,\n                start\n            ];\n        }\n        function updateTransition() {\n            var _updateState2 = updateState(), isPending = _updateState2[0];\n            var hook = updateWorkInProgressHook();\n            var start = hook.memoizedState;\n            return [\n                isPending,\n                start\n            ];\n        }\n        function rerenderTransition() {\n            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];\n            var hook = updateWorkInProgressHook();\n            var start = hook.memoizedState;\n            return [\n                isPending,\n                start\n            ];\n        }\n        var isUpdatingOpaqueValueInRenderPhase = false;\n        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {\n            {\n                return isUpdatingOpaqueValueInRenderPhase;\n            }\n        }\n        function mountId() {\n            var hook = mountWorkInProgressHook();\n            var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\n            // should do this in Fiber, too? Deferring this decision for now because\n            // there's no other place to store the prefix except for an internal field on\n            // the public createRoot object, which the fiber tree does not currently have\n            // a reference to.\n            var identifierPrefix = root.identifierPrefix;\n            var id;\n            if (getIsHydrating()) {\n                var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.\n                id = \":\" + identifierPrefix + \"R\" + treeId; // Unless this is the first id at this level, append a number at the end\n                // that represents the position of this useId hook among all the useId\n                // hooks for this fiber.\n                var localId = localIdCounter++;\n                if (localId > 0) {\n                    id += \"H\" + localId.toString(32);\n                }\n                id += \":\";\n            } else {\n                // Use a lowercase r prefix for client-generated ids.\n                var globalClientId = globalClientIdCounter++;\n                id = \":\" + identifierPrefix + \"r\" + globalClientId.toString(32) + \":\";\n            }\n            hook.memoizedState = id;\n            return id;\n        }\n        function updateId() {\n            var hook = updateWorkInProgressHook();\n            var id = hook.memoizedState;\n            return id;\n        }\n        function dispatchReducerAction(fiber, queue, action) {\n            {\n                if (typeof arguments[3] === \"function\") {\n                    error(\"State updates from the useState() and useReducer() Hooks don't support the \" + \"second callback argument. To execute a side effect after \" + \"rendering, declare it in the component body with useEffect().\");\n                }\n            }\n            var lane = requestUpdateLane(fiber);\n            var update = {\n                lane: lane,\n                action: action,\n                hasEagerState: false,\n                eagerState: null,\n                next: null\n            };\n            if (isRenderPhaseUpdate(fiber)) {\n                enqueueRenderPhaseUpdate(queue, update);\n            } else {\n                enqueueUpdate$1(fiber, queue, update);\n                var eventTime = requestEventTime();\n                var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n                if (root !== null) {\n                    entangleTransitionUpdate(root, queue, lane);\n                }\n            }\n            markUpdateInDevTools(fiber, lane);\n        }\n        function dispatchSetState(fiber, queue, action) {\n            {\n                if (typeof arguments[3] === \"function\") {\n                    error(\"State updates from the useState() and useReducer() Hooks don't support the \" + \"second callback argument. To execute a side effect after \" + \"rendering, declare it in the component body with useEffect().\");\n                }\n            }\n            var lane = requestUpdateLane(fiber);\n            var update = {\n                lane: lane,\n                action: action,\n                hasEagerState: false,\n                eagerState: null,\n                next: null\n            };\n            if (isRenderPhaseUpdate(fiber)) {\n                enqueueRenderPhaseUpdate(queue, update);\n            } else {\n                enqueueUpdate$1(fiber, queue, update);\n                var alternate = fiber.alternate;\n                if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n                    // The queue is currently empty, which means we can eagerly compute the\n                    // next state before entering the render phase. If the new state is the\n                    // same as the current state, we may be able to bail out entirely.\n                    var lastRenderedReducer = queue.lastRenderedReducer;\n                    if (lastRenderedReducer !== null) {\n                        var prevDispatcher;\n                        {\n                            prevDispatcher = ReactCurrentDispatcher$1.current;\n                            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                        }\n                        try {\n                            var currentState = queue.lastRenderedState;\n                            var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n                            // it, on the update object. If the reducer hasn't changed by the\n                            // time we enter the render phase, then the eager state can be used\n                            // without calling the reducer again.\n                            update.hasEagerState = true;\n                            update.eagerState = eagerState;\n                            if (objectIs(eagerState, currentState)) {\n                                // Fast path. We can bail out without scheduling React to re-render.\n                                // It's still possible that we'll need to rebase this update later,\n                                // if the component re-renders for a different reason and by that\n                                // time the reducer has changed.\n                                return;\n                            }\n                        } catch (error) {} finally{\n                            {\n                                ReactCurrentDispatcher$1.current = prevDispatcher;\n                            }\n                        }\n                    }\n                }\n                var eventTime = requestEventTime();\n                var root = scheduleUpdateOnFiber(fiber, lane, eventTime);\n                if (root !== null) {\n                    entangleTransitionUpdate(root, queue, lane);\n                }\n            }\n            markUpdateInDevTools(fiber, lane);\n        }\n        function isRenderPhaseUpdate(fiber) {\n            var alternate = fiber.alternate;\n            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\n        }\n        function enqueueRenderPhaseUpdate(queue, update) {\n            // This is a render phase update. Stash it in a lazily-created map of\n            // queue -> linked list of updates. After this render pass, we'll restart\n            // and apply the stashed updates on top of the work-in-progress hook.\n            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n            var pending = queue.pending;\n            if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n            } else {\n                update.next = pending.next;\n                pending.next = update;\n            }\n            queue.pending = update;\n        }\n        function enqueueUpdate$1(fiber, queue, update, lane) {\n            if (isInterleavedUpdate(fiber)) {\n                var interleaved = queue.interleaved;\n                if (interleaved === null) {\n                    // This is the first update. Create a circular list.\n                    update.next = update; // At the end of the current render, this queue's interleaved updates will\n                    // be transferred to the pending queue.\n                    pushInterleavedQueue(queue);\n                } else {\n                    update.next = interleaved.next;\n                    interleaved.next = update;\n                }\n                queue.interleaved = update;\n            } else {\n                var pending = queue.pending;\n                if (pending === null) {\n                    // This is the first update. Create a circular list.\n                    update.next = update;\n                } else {\n                    update.next = pending.next;\n                    pending.next = update;\n                }\n                queue.pending = update;\n            }\n        }\n        function entangleTransitionUpdate(root, queue, lane) {\n            if (isTransitionLane(lane)) {\n                var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\n                // must have finished. We can remove them from the shared queue, which\n                // represents a superset of the actually pending lanes. In some cases we\n                // may entangle more than we need to, but that's OK. In fact it's worse if\n                // we *don't* entangle when we should.\n                queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n                var newQueueLanes = mergeLanes(queueLanes, lane);\n                queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n                // the lane finished since the last time we entangled it. So we need to\n                // entangle it again, just to be sure.\n                markRootEntangled(root, newQueueLanes);\n            }\n        }\n        function markUpdateInDevTools(fiber, lane, action) {\n            {\n                markStateUpdateScheduled(fiber, lane);\n            }\n        }\n        var ContextOnlyDispatcher = {\n            readContext: readContext,\n            useCallback: throwInvalidHookError,\n            useContext: throwInvalidHookError,\n            useEffect: throwInvalidHookError,\n            useImperativeHandle: throwInvalidHookError,\n            useInsertionEffect: throwInvalidHookError,\n            useLayoutEffect: throwInvalidHookError,\n            useMemo: throwInvalidHookError,\n            useReducer: throwInvalidHookError,\n            useRef: throwInvalidHookError,\n            useState: throwInvalidHookError,\n            useDebugValue: throwInvalidHookError,\n            useDeferredValue: throwInvalidHookError,\n            useTransition: throwInvalidHookError,\n            useMutableSource: throwInvalidHookError,\n            useSyncExternalStore: throwInvalidHookError,\n            useId: throwInvalidHookError,\n            unstable_isNewReconciler: enableNewReconciler\n        };\n        var HooksDispatcherOnMountInDEV = null;\n        var HooksDispatcherOnMountWithHookTypesInDEV = null;\n        var HooksDispatcherOnUpdateInDEV = null;\n        var HooksDispatcherOnRerenderInDEV = null;\n        var InvalidNestedHooksDispatcherOnMountInDEV = null;\n        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;\n        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n        {\n            var warnInvalidContextAccess = function() {\n                error(\"Context can only be read while React is rendering. \" + \"In classes, you can read it in the render method or getDerivedStateFromProps. \" + \"In function components, you can read it directly in the function body, but not \" + \"inside Hooks like useReducer() or useMemo().\");\n            };\n            var warnInvalidHookAccess = function() {\n                error(\"Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. \" + \"You can only call Hooks at the top level of your React function. \" + \"For more information, see \" + \"https://reactjs.org/link/rules-of-hooks\");\n            };\n            HooksDispatcherOnMountInDEV = {\n                readContext: function(context) {\n                    return readContext(context);\n                },\n                useCallback: function(callback, deps) {\n                    currentHookNameInDev = \"useCallback\";\n                    mountHookTypesDev();\n                    checkDepsAreArrayDev(deps);\n                    return mountCallback(callback, deps);\n                },\n                useContext: function(context) {\n                    currentHookNameInDev = \"useContext\";\n                    mountHookTypesDev();\n                    return readContext(context);\n                },\n                useEffect: function(create, deps) {\n                    currentHookNameInDev = \"useEffect\";\n                    mountHookTypesDev();\n                    checkDepsAreArrayDev(deps);\n                    return mountEffect(create, deps);\n                },\n                useImperativeHandle: function(ref, create, deps) {\n                    currentHookNameInDev = \"useImperativeHandle\";\n                    mountHookTypesDev();\n                    checkDepsAreArrayDev(deps);\n                    return mountImperativeHandle(ref, create, deps);\n                },\n                useInsertionEffect: function(create, deps) {\n                    currentHookNameInDev = \"useInsertionEffect\";\n                    mountHookTypesDev();\n                    checkDepsAreArrayDev(deps);\n                    return mountInsertionEffect(create, deps);\n                },\n                useLayoutEffect: function(create, deps) {\n                    currentHookNameInDev = \"useLayoutEffect\";\n                    mountHookTypesDev();\n                    checkDepsAreArrayDev(deps);\n                    return mountLayoutEffect(create, deps);\n                },\n                useMemo: function(create, deps) {\n                    currentHookNameInDev = \"useMemo\";\n                    mountHookTypesDev();\n                    checkDepsAreArrayDev(deps);\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountMemo(create, deps);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useReducer: function(reducer, initialArg, init) {\n                    currentHookNameInDev = \"useReducer\";\n                    mountHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountReducer(reducer, initialArg, init);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useRef: function(initialValue) {\n                    currentHookNameInDev = \"useRef\";\n                    mountHookTypesDev();\n                    return mountRef(initialValue);\n                },\n                useState: function(initialState) {\n                    currentHookNameInDev = \"useState\";\n                    mountHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountState(initialState);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useDebugValue: function(value, formatterFn) {\n                    currentHookNameInDev = \"useDebugValue\";\n                    mountHookTypesDev();\n                    return mountDebugValue();\n                },\n                useDeferredValue: function(value) {\n                    currentHookNameInDev = \"useDeferredValue\";\n                    mountHookTypesDev();\n                    return mountDeferredValue(value);\n                },\n                useTransition: function() {\n                    currentHookNameInDev = \"useTransition\";\n                    mountHookTypesDev();\n                    return mountTransition();\n                },\n                useMutableSource: function(source, getSnapshot, subscribe) {\n                    currentHookNameInDev = \"useMutableSource\";\n                    mountHookTypesDev();\n                    return mountMutableSource();\n                },\n                useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {\n                    currentHookNameInDev = \"useSyncExternalStore\";\n                    mountHookTypesDev();\n                    return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n                },\n                useId: function() {\n                    currentHookNameInDev = \"useId\";\n                    mountHookTypesDev();\n                    return mountId();\n                },\n                unstable_isNewReconciler: enableNewReconciler\n            };\n            HooksDispatcherOnMountWithHookTypesInDEV = {\n                readContext: function(context) {\n                    return readContext(context);\n                },\n                useCallback: function(callback, deps) {\n                    currentHookNameInDev = \"useCallback\";\n                    updateHookTypesDev();\n                    return mountCallback(callback, deps);\n                },\n                useContext: function(context) {\n                    currentHookNameInDev = \"useContext\";\n                    updateHookTypesDev();\n                    return readContext(context);\n                },\n                useEffect: function(create, deps) {\n                    currentHookNameInDev = \"useEffect\";\n                    updateHookTypesDev();\n                    return mountEffect(create, deps);\n                },\n                useImperativeHandle: function(ref, create, deps) {\n                    currentHookNameInDev = \"useImperativeHandle\";\n                    updateHookTypesDev();\n                    return mountImperativeHandle(ref, create, deps);\n                },\n                useInsertionEffect: function(create, deps) {\n                    currentHookNameInDev = \"useInsertionEffect\";\n                    updateHookTypesDev();\n                    return mountInsertionEffect(create, deps);\n                },\n                useLayoutEffect: function(create, deps) {\n                    currentHookNameInDev = \"useLayoutEffect\";\n                    updateHookTypesDev();\n                    return mountLayoutEffect(create, deps);\n                },\n                useMemo: function(create, deps) {\n                    currentHookNameInDev = \"useMemo\";\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountMemo(create, deps);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useReducer: function(reducer, initialArg, init) {\n                    currentHookNameInDev = \"useReducer\";\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountReducer(reducer, initialArg, init);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useRef: function(initialValue) {\n                    currentHookNameInDev = \"useRef\";\n                    updateHookTypesDev();\n                    return mountRef(initialValue);\n                },\n                useState: function(initialState) {\n                    currentHookNameInDev = \"useState\";\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountState(initialState);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useDebugValue: function(value, formatterFn) {\n                    currentHookNameInDev = \"useDebugValue\";\n                    updateHookTypesDev();\n                    return mountDebugValue();\n                },\n                useDeferredValue: function(value) {\n                    currentHookNameInDev = \"useDeferredValue\";\n                    updateHookTypesDev();\n                    return mountDeferredValue(value);\n                },\n                useTransition: function() {\n                    currentHookNameInDev = \"useTransition\";\n                    updateHookTypesDev();\n                    return mountTransition();\n                },\n                useMutableSource: function(source, getSnapshot, subscribe) {\n                    currentHookNameInDev = \"useMutableSource\";\n                    updateHookTypesDev();\n                    return mountMutableSource();\n                },\n                useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {\n                    currentHookNameInDev = \"useSyncExternalStore\";\n                    updateHookTypesDev();\n                    return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n                },\n                useId: function() {\n                    currentHookNameInDev = \"useId\";\n                    updateHookTypesDev();\n                    return mountId();\n                },\n                unstable_isNewReconciler: enableNewReconciler\n            };\n            HooksDispatcherOnUpdateInDEV = {\n                readContext: function(context) {\n                    return readContext(context);\n                },\n                useCallback: function(callback, deps) {\n                    currentHookNameInDev = \"useCallback\";\n                    updateHookTypesDev();\n                    return updateCallback(callback, deps);\n                },\n                useContext: function(context) {\n                    currentHookNameInDev = \"useContext\";\n                    updateHookTypesDev();\n                    return readContext(context);\n                },\n                useEffect: function(create, deps) {\n                    currentHookNameInDev = \"useEffect\";\n                    updateHookTypesDev();\n                    return updateEffect(create, deps);\n                },\n                useImperativeHandle: function(ref, create, deps) {\n                    currentHookNameInDev = \"useImperativeHandle\";\n                    updateHookTypesDev();\n                    return updateImperativeHandle(ref, create, deps);\n                },\n                useInsertionEffect: function(create, deps) {\n                    currentHookNameInDev = \"useInsertionEffect\";\n                    updateHookTypesDev();\n                    return updateInsertionEffect(create, deps);\n                },\n                useLayoutEffect: function(create, deps) {\n                    currentHookNameInDev = \"useLayoutEffect\";\n                    updateHookTypesDev();\n                    return updateLayoutEffect(create, deps);\n                },\n                useMemo: function(create, deps) {\n                    currentHookNameInDev = \"useMemo\";\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return updateMemo(create, deps);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useReducer: function(reducer, initialArg, init) {\n                    currentHookNameInDev = \"useReducer\";\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return updateReducer(reducer, initialArg, init);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useRef: function(initialValue) {\n                    currentHookNameInDev = \"useRef\";\n                    updateHookTypesDev();\n                    return updateRef();\n                },\n                useState: function(initialState) {\n                    currentHookNameInDev = \"useState\";\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return updateState(initialState);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useDebugValue: function(value, formatterFn) {\n                    currentHookNameInDev = \"useDebugValue\";\n                    updateHookTypesDev();\n                    return updateDebugValue();\n                },\n                useDeferredValue: function(value) {\n                    currentHookNameInDev = \"useDeferredValue\";\n                    updateHookTypesDev();\n                    return updateDeferredValue(value);\n                },\n                useTransition: function() {\n                    currentHookNameInDev = \"useTransition\";\n                    updateHookTypesDev();\n                    return updateTransition();\n                },\n                useMutableSource: function(source, getSnapshot, subscribe) {\n                    currentHookNameInDev = \"useMutableSource\";\n                    updateHookTypesDev();\n                    return updateMutableSource();\n                },\n                useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {\n                    currentHookNameInDev = \"useSyncExternalStore\";\n                    updateHookTypesDev();\n                    return updateSyncExternalStore(subscribe, getSnapshot);\n                },\n                useId: function() {\n                    currentHookNameInDev = \"useId\";\n                    updateHookTypesDev();\n                    return updateId();\n                },\n                unstable_isNewReconciler: enableNewReconciler\n            };\n            HooksDispatcherOnRerenderInDEV = {\n                readContext: function(context) {\n                    return readContext(context);\n                },\n                useCallback: function(callback, deps) {\n                    currentHookNameInDev = \"useCallback\";\n                    updateHookTypesDev();\n                    return updateCallback(callback, deps);\n                },\n                useContext: function(context) {\n                    currentHookNameInDev = \"useContext\";\n                    updateHookTypesDev();\n                    return readContext(context);\n                },\n                useEffect: function(create, deps) {\n                    currentHookNameInDev = \"useEffect\";\n                    updateHookTypesDev();\n                    return updateEffect(create, deps);\n                },\n                useImperativeHandle: function(ref, create, deps) {\n                    currentHookNameInDev = \"useImperativeHandle\";\n                    updateHookTypesDev();\n                    return updateImperativeHandle(ref, create, deps);\n                },\n                useInsertionEffect: function(create, deps) {\n                    currentHookNameInDev = \"useInsertionEffect\";\n                    updateHookTypesDev();\n                    return updateInsertionEffect(create, deps);\n                },\n                useLayoutEffect: function(create, deps) {\n                    currentHookNameInDev = \"useLayoutEffect\";\n                    updateHookTypesDev();\n                    return updateLayoutEffect(create, deps);\n                },\n                useMemo: function(create, deps) {\n                    currentHookNameInDev = \"useMemo\";\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n                    try {\n                        return updateMemo(create, deps);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useReducer: function(reducer, initialArg, init) {\n                    currentHookNameInDev = \"useReducer\";\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n                    try {\n                        return rerenderReducer(reducer, initialArg, init);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useRef: function(initialValue) {\n                    currentHookNameInDev = \"useRef\";\n                    updateHookTypesDev();\n                    return updateRef();\n                },\n                useState: function(initialState) {\n                    currentHookNameInDev = \"useState\";\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n                    try {\n                        return rerenderState(initialState);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useDebugValue: function(value, formatterFn) {\n                    currentHookNameInDev = \"useDebugValue\";\n                    updateHookTypesDev();\n                    return updateDebugValue();\n                },\n                useDeferredValue: function(value) {\n                    currentHookNameInDev = \"useDeferredValue\";\n                    updateHookTypesDev();\n                    return rerenderDeferredValue(value);\n                },\n                useTransition: function() {\n                    currentHookNameInDev = \"useTransition\";\n                    updateHookTypesDev();\n                    return rerenderTransition();\n                },\n                useMutableSource: function(source, getSnapshot, subscribe) {\n                    currentHookNameInDev = \"useMutableSource\";\n                    updateHookTypesDev();\n                    return updateMutableSource();\n                },\n                useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {\n                    currentHookNameInDev = \"useSyncExternalStore\";\n                    updateHookTypesDev();\n                    return updateSyncExternalStore(subscribe, getSnapshot);\n                },\n                useId: function() {\n                    currentHookNameInDev = \"useId\";\n                    updateHookTypesDev();\n                    return updateId();\n                },\n                unstable_isNewReconciler: enableNewReconciler\n            };\n            InvalidNestedHooksDispatcherOnMountInDEV = {\n                readContext: function(context) {\n                    warnInvalidContextAccess();\n                    return readContext(context);\n                },\n                useCallback: function(callback, deps) {\n                    currentHookNameInDev = \"useCallback\";\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountCallback(callback, deps);\n                },\n                useContext: function(context) {\n                    currentHookNameInDev = \"useContext\";\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return readContext(context);\n                },\n                useEffect: function(create, deps) {\n                    currentHookNameInDev = \"useEffect\";\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountEffect(create, deps);\n                },\n                useImperativeHandle: function(ref, create, deps) {\n                    currentHookNameInDev = \"useImperativeHandle\";\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountImperativeHandle(ref, create, deps);\n                },\n                useInsertionEffect: function(create, deps) {\n                    currentHookNameInDev = \"useInsertionEffect\";\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountInsertionEffect(create, deps);\n                },\n                useLayoutEffect: function(create, deps) {\n                    currentHookNameInDev = \"useLayoutEffect\";\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountLayoutEffect(create, deps);\n                },\n                useMemo: function(create, deps) {\n                    currentHookNameInDev = \"useMemo\";\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountMemo(create, deps);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useReducer: function(reducer, initialArg, init) {\n                    currentHookNameInDev = \"useReducer\";\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountReducer(reducer, initialArg, init);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useRef: function(initialValue) {\n                    currentHookNameInDev = \"useRef\";\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountRef(initialValue);\n                },\n                useState: function(initialState) {\n                    currentHookNameInDev = \"useState\";\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n                    try {\n                        return mountState(initialState);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useDebugValue: function(value, formatterFn) {\n                    currentHookNameInDev = \"useDebugValue\";\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountDebugValue();\n                },\n                useDeferredValue: function(value) {\n                    currentHookNameInDev = \"useDeferredValue\";\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountDeferredValue(value);\n                },\n                useTransition: function() {\n                    currentHookNameInDev = \"useTransition\";\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountTransition();\n                },\n                useMutableSource: function(source, getSnapshot, subscribe) {\n                    currentHookNameInDev = \"useMutableSource\";\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountMutableSource();\n                },\n                useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {\n                    currentHookNameInDev = \"useSyncExternalStore\";\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n                },\n                useId: function() {\n                    currentHookNameInDev = \"useId\";\n                    warnInvalidHookAccess();\n                    mountHookTypesDev();\n                    return mountId();\n                },\n                unstable_isNewReconciler: enableNewReconciler\n            };\n            InvalidNestedHooksDispatcherOnUpdateInDEV = {\n                readContext: function(context) {\n                    warnInvalidContextAccess();\n                    return readContext(context);\n                },\n                useCallback: function(callback, deps) {\n                    currentHookNameInDev = \"useCallback\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateCallback(callback, deps);\n                },\n                useContext: function(context) {\n                    currentHookNameInDev = \"useContext\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return readContext(context);\n                },\n                useEffect: function(create, deps) {\n                    currentHookNameInDev = \"useEffect\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateEffect(create, deps);\n                },\n                useImperativeHandle: function(ref, create, deps) {\n                    currentHookNameInDev = \"useImperativeHandle\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateImperativeHandle(ref, create, deps);\n                },\n                useInsertionEffect: function(create, deps) {\n                    currentHookNameInDev = \"useInsertionEffect\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateInsertionEffect(create, deps);\n                },\n                useLayoutEffect: function(create, deps) {\n                    currentHookNameInDev = \"useLayoutEffect\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateLayoutEffect(create, deps);\n                },\n                useMemo: function(create, deps) {\n                    currentHookNameInDev = \"useMemo\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return updateMemo(create, deps);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useReducer: function(reducer, initialArg, init) {\n                    currentHookNameInDev = \"useReducer\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return updateReducer(reducer, initialArg, init);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useRef: function(initialValue) {\n                    currentHookNameInDev = \"useRef\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateRef();\n                },\n                useState: function(initialState) {\n                    currentHookNameInDev = \"useState\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return updateState(initialState);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useDebugValue: function(value, formatterFn) {\n                    currentHookNameInDev = \"useDebugValue\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateDebugValue();\n                },\n                useDeferredValue: function(value) {\n                    currentHookNameInDev = \"useDeferredValue\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateDeferredValue(value);\n                },\n                useTransition: function() {\n                    currentHookNameInDev = \"useTransition\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateTransition();\n                },\n                useMutableSource: function(source, getSnapshot, subscribe) {\n                    currentHookNameInDev = \"useMutableSource\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateMutableSource();\n                },\n                useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {\n                    currentHookNameInDev = \"useSyncExternalStore\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateSyncExternalStore(subscribe, getSnapshot);\n                },\n                useId: function() {\n                    currentHookNameInDev = \"useId\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateId();\n                },\n                unstable_isNewReconciler: enableNewReconciler\n            };\n            InvalidNestedHooksDispatcherOnRerenderInDEV = {\n                readContext: function(context) {\n                    warnInvalidContextAccess();\n                    return readContext(context);\n                },\n                useCallback: function(callback, deps) {\n                    currentHookNameInDev = \"useCallback\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateCallback(callback, deps);\n                },\n                useContext: function(context) {\n                    currentHookNameInDev = \"useContext\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return readContext(context);\n                },\n                useEffect: function(create, deps) {\n                    currentHookNameInDev = \"useEffect\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateEffect(create, deps);\n                },\n                useImperativeHandle: function(ref, create, deps) {\n                    currentHookNameInDev = \"useImperativeHandle\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateImperativeHandle(ref, create, deps);\n                },\n                useInsertionEffect: function(create, deps) {\n                    currentHookNameInDev = \"useInsertionEffect\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateInsertionEffect(create, deps);\n                },\n                useLayoutEffect: function(create, deps) {\n                    currentHookNameInDev = \"useLayoutEffect\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateLayoutEffect(create, deps);\n                },\n                useMemo: function(create, deps) {\n                    currentHookNameInDev = \"useMemo\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return updateMemo(create, deps);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useReducer: function(reducer, initialArg, init) {\n                    currentHookNameInDev = \"useReducer\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return rerenderReducer(reducer, initialArg, init);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useRef: function(initialValue) {\n                    currentHookNameInDev = \"useRef\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateRef();\n                },\n                useState: function(initialState) {\n                    currentHookNameInDev = \"useState\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    var prevDispatcher = ReactCurrentDispatcher$1.current;\n                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n                    try {\n                        return rerenderState(initialState);\n                    } finally{\n                        ReactCurrentDispatcher$1.current = prevDispatcher;\n                    }\n                },\n                useDebugValue: function(value, formatterFn) {\n                    currentHookNameInDev = \"useDebugValue\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateDebugValue();\n                },\n                useDeferredValue: function(value) {\n                    currentHookNameInDev = \"useDeferredValue\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return rerenderDeferredValue(value);\n                },\n                useTransition: function() {\n                    currentHookNameInDev = \"useTransition\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return rerenderTransition();\n                },\n                useMutableSource: function(source, getSnapshot, subscribe) {\n                    currentHookNameInDev = \"useMutableSource\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateMutableSource();\n                },\n                useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {\n                    currentHookNameInDev = \"useSyncExternalStore\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateSyncExternalStore(subscribe, getSnapshot);\n                },\n                useId: function() {\n                    currentHookNameInDev = \"useId\";\n                    warnInvalidHookAccess();\n                    updateHookTypesDev();\n                    return updateId();\n                },\n                unstable_isNewReconciler: enableNewReconciler\n            };\n        }\n        var now$2 = Scheduler.unstable_now;\n        var commitTime = 0;\n        var layoutEffectStartTime = -1;\n        var profilerStartTime = -1;\n        var passiveEffectStartTime = -1;\n        /**\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n *\n * The overall sequence is:\n *   1. render\n *   2. commit (and call `onRender`, `onCommit`)\n *   3. check for nested updates\n *   4. flush passive effects (and call `onPostCommit`)\n *\n * Nested updates are identified in step 3 above,\n * but step 4 still applies to the work that was just committed.\n * We use two flags to track nested updates then:\n * one tracks whether the upcoming update is a nested update,\n * and the other tracks whether the current update was a nested update.\n * The first value gets synced to the second at the start of the render phase.\n */ var currentUpdateIsNested = false;\n        var nestedUpdateScheduled = false;\n        function isCurrentUpdateNested() {\n            return currentUpdateIsNested;\n        }\n        function markNestedUpdateScheduled() {\n            {\n                nestedUpdateScheduled = true;\n            }\n        }\n        function resetNestedUpdateFlag() {\n            {\n                currentUpdateIsNested = false;\n                nestedUpdateScheduled = false;\n            }\n        }\n        function syncNestedUpdateFlag() {\n            {\n                currentUpdateIsNested = nestedUpdateScheduled;\n                nestedUpdateScheduled = false;\n            }\n        }\n        function getCommitTime() {\n            return commitTime;\n        }\n        function recordCommitTime() {\n            commitTime = now$2();\n        }\n        function startProfilerTimer(fiber) {\n            profilerStartTime = now$2();\n            if (fiber.actualStartTime < 0) {\n                fiber.actualStartTime = now$2();\n            }\n        }\n        function stopProfilerTimerIfRunning(fiber) {\n            profilerStartTime = -1;\n        }\n        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n            if (profilerStartTime >= 0) {\n                var elapsedTime = now$2() - profilerStartTime;\n                fiber.actualDuration += elapsedTime;\n                if (overrideBaseTime) {\n                    fiber.selfBaseDuration = elapsedTime;\n                }\n                profilerStartTime = -1;\n            }\n        }\n        function recordLayoutEffectDuration(fiber) {\n            if (layoutEffectStartTime >= 0) {\n                var elapsedTime = now$2() - layoutEffectStartTime;\n                layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n                // Or the root (for the DevTools Profiler to read)\n                var parentFiber = fiber.return;\n                while(parentFiber !== null){\n                    switch(parentFiber.tag){\n                        case HostRoot:\n                            var root = parentFiber.stateNode;\n                            root.effectDuration += elapsedTime;\n                            return;\n                        case Profiler:\n                            var parentStateNode = parentFiber.stateNode;\n                            parentStateNode.effectDuration += elapsedTime;\n                            return;\n                    }\n                    parentFiber = parentFiber.return;\n                }\n            }\n        }\n        function recordPassiveEffectDuration(fiber) {\n            if (passiveEffectStartTime >= 0) {\n                var elapsedTime = now$2() - passiveEffectStartTime;\n                passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n                // Or the root (for the DevTools Profiler to read)\n                var parentFiber = fiber.return;\n                while(parentFiber !== null){\n                    switch(parentFiber.tag){\n                        case HostRoot:\n                            var root = parentFiber.stateNode;\n                            if (root !== null) {\n                                root.passiveEffectDuration += elapsedTime;\n                            }\n                            return;\n                        case Profiler:\n                            var parentStateNode = parentFiber.stateNode;\n                            if (parentStateNode !== null) {\n                                // Detached fibers have their state node cleared out.\n                                // In this case, the return pointer is also cleared out,\n                                // so we won't be able to report the time spent in this Profiler's subtree.\n                                parentStateNode.passiveEffectDuration += elapsedTime;\n                            }\n                            return;\n                    }\n                    parentFiber = parentFiber.return;\n                }\n            }\n        }\n        function startLayoutEffectTimer() {\n            layoutEffectStartTime = now$2();\n        }\n        function startPassiveEffectTimer() {\n            passiveEffectStartTime = now$2();\n        }\n        function transferActualDuration(fiber) {\n            // Transfer time spent rendering these children so we don't lose it\n            // after we rerender. This is used as a helper in special cases\n            // where we should count the work of multiple passes.\n            var child = fiber.child;\n            while(child){\n                fiber.actualDuration += child.actualDuration;\n                child = child.sibling;\n            }\n        }\n        function createCapturedValue(value, source) {\n            // If the value is an error, call this function immediately after it is thrown\n            // so the stack is accurate.\n            return {\n                value: value,\n                source: source,\n                stack: getStackByFiberInDevAndProd(source)\n            };\n        }\n        // This module is forked in different environments.\n        // By default, return `true` to log errors to the console.\n        // Forks can return `false` if this isn't desirable.\n        function showErrorDialog(boundary, errorInfo) {\n            return true;\n        }\n        function logCapturedError(boundary, errorInfo) {\n            try {\n                var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n                // This enables renderers like ReactNative to better manage redbox behavior.\n                if (logError === false) {\n                    return;\n                }\n                var error = errorInfo.value;\n                if (true) {\n                    var source = errorInfo.source;\n                    var stack = errorInfo.stack;\n                    var componentStack = stack !== null ? stack : \"\"; // Browsers support silencing uncaught errors by calling\n                    // `preventDefault()` in window `error` handler.\n                    // We record this information as an expando on the error.\n                    if (error != null && error._suppressLogging) {\n                        if (boundary.tag === ClassComponent) {\n                            // The error is recoverable and was silenced.\n                            // Ignore it and don't print the stack addendum.\n                            // This is handy for testing error boundaries without noise.\n                            return;\n                        } // The error is fatal. Since the silencing might have\n                        // been accidental, we'll surface it anyway.\n                        // However, the browser would have silenced the original error\n                        // so we'll print it first, and then print the stack addendum.\n                        console[\"error\"](error); // Don't transform to our wrapper\n                    // For a more detailed description of this block, see:\n                    // https://github.com/facebook/react/pull/13384\n                    }\n                    var componentName = source ? getComponentNameFromFiber(source) : null;\n                    var componentNameMessage = componentName ? \"The above error occurred in the <\" + componentName + \"> component:\" : \"The above error occurred in one of your React components:\";\n                    var errorBoundaryMessage;\n                    if (boundary.tag === HostRoot) {\n                        errorBoundaryMessage = \"Consider adding an error boundary to your tree to customize error handling behavior.\\n\" + \"Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.\";\n                    } else {\n                        var errorBoundaryName = getComponentNameFromFiber(boundary) || \"Anonymous\";\n                        errorBoundaryMessage = \"React will try to recreate this component tree from scratch \" + (\"using the error boundary you provided, \" + errorBoundaryName + \".\");\n                    }\n                    var combinedMessage = componentNameMessage + \"\\n\" + componentStack + \"\\n\\n\" + (\"\" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.\n                    // We don't include the original error message and JS stack because the browser\n                    // has already printed it. Even if the application swallows the error, it is still\n                    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n                    console[\"error\"](combinedMessage); // Don't transform to our wrapper\n                } else {}\n            } catch (e) {\n                // This method must not throw, or React internal state will get messed up.\n                // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n                // we want to report this error outside of the normal stack as a last resort.\n                // https://github.com/facebook/react/issues/13188\n                setTimeout(function() {\n                    throw e;\n                });\n            }\n        }\n        var PossiblyWeakMap$1 = typeof WeakMap === \"function\" ? WeakMap : Map;\n        function createRootErrorUpdate(fiber, errorInfo, lane) {\n            var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.\n            update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n            // being called \"element\".\n            update.payload = {\n                element: null\n            };\n            var error = errorInfo.value;\n            update.callback = function() {\n                onUncaughtError(error);\n                logCapturedError(fiber, errorInfo);\n            };\n            return update;\n        }\n        function createClassErrorUpdate(fiber, errorInfo, lane) {\n            var update = createUpdate(NoTimestamp, lane);\n            update.tag = CaptureUpdate;\n            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n            if (typeof getDerivedStateFromError === \"function\") {\n                var error$1 = errorInfo.value;\n                update.payload = function() {\n                    return getDerivedStateFromError(error$1);\n                };\n                update.callback = function() {\n                    {\n                        markFailedErrorBoundaryForHotReloading(fiber);\n                    }\n                    logCapturedError(fiber, errorInfo);\n                };\n            }\n            var inst = fiber.stateNode;\n            if (inst !== null && typeof inst.componentDidCatch === \"function\") {\n                update.callback = function callback() {\n                    {\n                        markFailedErrorBoundaryForHotReloading(fiber);\n                    }\n                    logCapturedError(fiber, errorInfo);\n                    if (typeof getDerivedStateFromError !== \"function\") {\n                        // To preserve the preexisting retry behavior of error boundaries,\n                        // we keep track of which ones already failed during this batch.\n                        // This gets reset before we yield back to the browser.\n                        // TODO: Warn in strict mode if getDerivedStateFromError is\n                        // not defined.\n                        markLegacyErrorBoundaryAsFailed(this);\n                    }\n                    var error$1 = errorInfo.value;\n                    var stack = errorInfo.stack;\n                    this.componentDidCatch(error$1, {\n                        componentStack: stack !== null ? stack : \"\"\n                    });\n                    {\n                        if (typeof getDerivedStateFromError !== \"function\") {\n                            // If componentDidCatch is the only error boundary method defined,\n                            // then it needs to call setState to recover from errors.\n                            // If no state update is scheduled then the boundary will swallow the error.\n                            if (!includesSomeLane(fiber.lanes, SyncLane)) {\n                                error(\"%s: Error boundaries should implement getDerivedStateFromError(). \" + \"In that method, return a state update to display an error message or fallback UI.\", getComponentNameFromFiber(fiber) || \"Unknown\");\n                            }\n                        }\n                    }\n                };\n            }\n            return update;\n        }\n        function attachPingListener(root, wakeable, lanes) {\n            // Attach a ping listener\n            //\n            // The data might resolve before we have a chance to commit the fallback. Or,\n            // in the case of a refresh, we'll never commit a fallback. So we need to\n            // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n            // try rendering the tree again.\n            //\n            // Only attach a listener if one does not already exist for the lanes\n            // we're currently rendering (which acts like a \"thread ID\" here).\n            //\n            // We only need to do this in concurrent mode. Legacy Suspense always\n            // commits fallbacks synchronously, so there are no pings.\n            var pingCache = root.pingCache;\n            var threadIDs;\n            if (pingCache === null) {\n                pingCache = root.pingCache = new PossiblyWeakMap$1();\n                threadIDs = new Set();\n                pingCache.set(wakeable, threadIDs);\n            } else {\n                threadIDs = pingCache.get(wakeable);\n                if (threadIDs === undefined) {\n                    threadIDs = new Set();\n                    pingCache.set(wakeable, threadIDs);\n                }\n            }\n            if (!threadIDs.has(lanes)) {\n                // Memoize using the thread ID to prevent redundant listeners.\n                threadIDs.add(lanes);\n                var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n                {\n                    if (isDevToolsPresent) {\n                        // If we have pending work still, restore the original updaters\n                        restorePendingUpdaters(root, lanes);\n                    }\n                }\n                wakeable.then(ping, ping);\n            }\n        }\n        function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {\n            // Retry listener\n            //\n            // If the fallback does commit, we need to attach a different type of\n            // listener. This one schedules an update on the Suspense boundary to turn\n            // the fallback state off.\n            //\n            // Stash the wakeable on the boundary fiber so we can access it in the\n            // commit phase.\n            //\n            // When the wakeable resolves, we'll attempt to render the boundary\n            // again (\"retry\").\n            var wakeables = suspenseBoundary.updateQueue;\n            if (wakeables === null) {\n                var updateQueue = new Set();\n                updateQueue.add(wakeable);\n                suspenseBoundary.updateQueue = updateQueue;\n            } else {\n                wakeables.add(wakeable);\n            }\n        }\n        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n            // A legacy mode Suspense quirk, only relevant to hook components.\n            var tag = sourceFiber.tag;\n            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {\n                var currentSource = sourceFiber.alternate;\n                if (currentSource) {\n                    sourceFiber.updateQueue = currentSource.updateQueue;\n                    sourceFiber.memoizedState = currentSource.memoizedState;\n                    sourceFiber.lanes = currentSource.lanes;\n                } else {\n                    sourceFiber.updateQueue = null;\n                    sourceFiber.memoizedState = null;\n                }\n            }\n        }\n        function getNearestSuspenseBoundaryToCapture(returnFiber) {\n            var node = returnFiber;\n            do {\n                if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {\n                    return node;\n                } // This boundary already captured during this render. Continue to the next\n                // boundary.\n                node = node.return;\n            }while (node !== null);\n            return null;\n        }\n        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\n            // This marks a Suspense boundary so that when we're unwinding the stack,\n            // it captures the suspended \"exception\" and does a second (fallback) pass.\n            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n                // Legacy Mode Suspense\n                //\n                // If the boundary is in legacy mode, we should *not*\n                // suspend the commit. Pretend as if the suspended component rendered\n                // null and keep rendering. When the Suspense boundary completes,\n                // we'll do a second pass to render the fallback.\n                if (suspenseBoundary === returnFiber) {\n                    // Special case where we suspended while reconciling the children of\n                    // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n                    // when a React.lazy component is a direct child of a\n                    // Suspense boundary.\n                    //\n                    // Suspense boundaries are implemented as multiple fibers, but they\n                    // are a single conceptual unit. The legacy mode behavior where we\n                    // pretend the suspended fiber committed as `null` won't work,\n                    // because in this case the \"suspended\" fiber is the inner\n                    // Offscreen wrapper.\n                    //\n                    // Because the contents of the boundary haven't started rendering\n                    // yet (i.e. nothing in the tree has partially rendered) we can\n                    // switch to the regular, concurrent mode behavior: mark the\n                    // boundary with ShouldCapture and enter the unwind phase.\n                    suspenseBoundary.flags |= ShouldCapture;\n                } else {\n                    suspenseBoundary.flags |= DidCapture;\n                    sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\n                    // But we shouldn't call any lifecycle methods or callbacks. Remove\n                    // all lifecycle effect tags.\n                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n                    if (supportsPersistence && enablePersistentOffscreenHostContainer) {\n                        // Another legacy Suspense quirk. In persistent mode, if this is the\n                        // initial mount, override the props of the host container to hide\n                        // its contents.\n                        var currentSuspenseBoundary = suspenseBoundary.alternate;\n                        if (currentSuspenseBoundary === null) {\n                            var offscreenFiber = suspenseBoundary.child;\n                            var offscreenContainer = offscreenFiber.child;\n                            if (offscreenContainer !== null) {\n                                var children = offscreenContainer.memoizedProps.children;\n                                var containerProps = getOffscreenContainerProps(\"hidden\", children);\n                                offscreenContainer.pendingProps = containerProps;\n                                offscreenContainer.memoizedProps = containerProps;\n                            }\n                        }\n                    }\n                    if (sourceFiber.tag === ClassComponent) {\n                        var currentSourceFiber = sourceFiber.alternate;\n                        if (currentSourceFiber === null) {\n                            // This is a new mount. Change the tag so it's not mistaken for a\n                            // completed class component. For example, we should not call\n                            // componentWillUnmount if it is deleted.\n                            sourceFiber.tag = IncompleteClassComponent;\n                        } else {\n                            // When we try rendering again, we should not reuse the current fiber,\n                            // since it's known to be in an inconsistent state. Use a force update to\n                            // prevent a bail out.\n                            var update = createUpdate(NoTimestamp, SyncLane);\n                            update.tag = ForceUpdate;\n                            enqueueUpdate(sourceFiber, update);\n                        }\n                    } // The source fiber did not complete. Mark it with Sync priority to\n                    // indicate that it still has pending work.\n                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n                }\n                return suspenseBoundary;\n            } // Confirmed that the boundary is in a concurrent mode tree. Continue\n            // with the normal suspend path.\n            //\n            // After this we'll use a set of heuristics to determine whether this\n            // render pass will run to completion or restart or \"suspend\" the commit.\n            // The actual logic for this is spread out in different places.\n            //\n            // This first principle is that if we're going to suspend when we complete\n            // a root, then we should also restart if we get an update or ping that\n            // might unsuspend it, and vice versa. The only reason to suspend is\n            // because you think you might want to restart before committing. However,\n            // it doesn't make sense to restart only while in the period we're suspended.\n            //\n            // Restarting too aggressively is also not good because it starves out any\n            // intermediate loading state. So we use heuristics to determine when.\n            // Suspense Heuristics\n            //\n            // If nothing threw a Promise or all the same fallbacks are already showing,\n            // then don't suspend/restart.\n            //\n            // If this is an initial render of a new tree of Suspense boundaries and\n            // those trigger a fallback, then don't suspend/restart. We want to ensure\n            // that we can show the initial loading state as quickly as possible.\n            //\n            // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n            // a fallback, then we should always suspend/restart. Transitions apply\n            // to this case. If none is defined, JND is used instead.\n            //\n            // If we're already showing a fallback and it gets \"retried\", allowing us to show\n            // another level, but there's still an inner boundary that would show a fallback,\n            // then we suspend/restart for 500ms since the last time we showed a fallback\n            // anywhere in the tree. This effectively throttles progressive loading into a\n            // consistent train of commits. This also gives us an opportunity to restart to\n            // get to the completed state slightly earlier.\n            //\n            // If there's ambiguity due to batching it's resolved in preference of:\n            // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n            //\n            // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n            // ensure that new initial loading states can commit as soon as possible.\n            suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\n            // the begin phase to prevent an early bailout.\n            suspenseBoundary.lanes = rootRenderLanes;\n            return suspenseBoundary;\n        }\n        function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n            // The source fiber did not complete.\n            sourceFiber.flags |= Incomplete;\n            {\n                if (isDevToolsPresent) {\n                    // If we have pending work still, restore the original updaters\n                    restorePendingUpdaters(root, rootRenderLanes);\n                }\n            }\n            if (value !== null && typeof value === \"object\" && typeof value.then === \"function\") {\n                // This is a wakeable. The component suspended.\n                var wakeable = value;\n                resetSuspendedComponent(sourceFiber);\n                var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n                if (suspenseBoundary !== null) {\n                    suspenseBoundary.flags &= ~ForceClientRender;\n                    markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always\n                    // commits fallbacks synchronously, so there are no pings.\n                    if (suspenseBoundary.mode & ConcurrentMode) {\n                        attachPingListener(root, wakeable, rootRenderLanes);\n                    }\n                    attachRetryListener(suspenseBoundary, root, wakeable);\n                    return;\n                } else {\n                    // No boundary was found. Unless this is a sync update, this is OK.\n                    // We can suspend and wait for more data to arrive.\n                    if (!includesSyncLane(rootRenderLanes)) {\n                        // This is not a sync update. Suspend. Since we're not activating a\n                        // Suspense boundary, this will unwind all the way to the root without\n                        // performing a second pass to render a fallback. (This is arguably how\n                        // refresh transitions should work, too, since we're not going to commit\n                        // the fallbacks anyway.)\n                        //\n                        // This case also applies to initial hydration.\n                        attachPingListener(root, wakeable, rootRenderLanes);\n                        renderDidSuspendDelayIfPossible();\n                        return;\n                    } // This is a sync/discrete update. We treat this case like an error\n                    // because discrete renders are expected to produce a complete tree\n                    // synchronously to maintain consistency with external state.\n                    var uncaughtSuspenseError = new Error(\"A component suspended while responding to synchronous input. This \" + \"will cause the UI to be replaced with a loading indicator. To \" + \"fix, updates that suspend should be wrapped \" + \"with startTransition.\"); // If we're outside a transition, fall through to the regular error path.\n                    // The error will be caught by the nearest suspense boundary.\n                    value = uncaughtSuspenseError;\n                }\n            } else {\n                // This is a regular error, not a Suspense wakeable.\n                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n                    markDidSuspendWhileHydratingDEV();\n                    var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by\n                    // discarding the dehydrated content and switching to a client render.\n                    // Instead of surfacing the error, find the nearest Suspense boundary\n                    // and render it again without hydration.\n                    if (_suspenseBoundary !== null) {\n                        if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {\n                            // Set a flag to indicate that we should try rendering the normal\n                            // children again, not the fallback.\n                            _suspenseBoundary.flags |= ForceClientRender;\n                        }\n                        markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should\n                        // still log it so it can be fixed.\n                        queueHydrationError(value);\n                        return;\n                    }\n                }\n            } // We didn't find a boundary that could handle this type of exception. Start\n            // over and traverse parent path again, this time treating the exception\n            // as an error.\n            renderDidError(value);\n            value = createCapturedValue(value, sourceFiber);\n            var workInProgress = returnFiber;\n            do {\n                switch(workInProgress.tag){\n                    case HostRoot:\n                        {\n                            var _errorInfo = value;\n                            workInProgress.flags |= ShouldCapture;\n                            var lane = pickArbitraryLane(rootRenderLanes);\n                            workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n                            var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);\n                            enqueueCapturedUpdate(workInProgress, update);\n                            return;\n                        }\n                    case ClassComponent:\n                        // Capture and retry\n                        var errorInfo = value;\n                        var ctor = workInProgress.type;\n                        var instance = workInProgress.stateNode;\n                        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === \"function\" || instance !== null && typeof instance.componentDidCatch === \"function\" && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n                            workInProgress.flags |= ShouldCapture;\n                            var _lane = pickArbitraryLane(rootRenderLanes);\n                            workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state\n                            var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);\n                            enqueueCapturedUpdate(workInProgress, _update);\n                            return;\n                        }\n                        break;\n                }\n                workInProgress = workInProgress.return;\n            }while (workInProgress !== null);\n        }\n        function getSuspendedCache() {\n            {\n                return null;\n            }\n        }\n        function markUpdate(workInProgress) {\n            // Tag the fiber with an update effect. This turns a Placement into\n            // a PlacementAndUpdate.\n            workInProgress.flags |= Update;\n        }\n        function markRef(workInProgress) {\n            workInProgress.flags |= Ref;\n            {\n                workInProgress.flags |= RefStatic;\n            }\n        }\n        function hadNoMutationsEffects(current, completedWork) {\n            var didBailout = current !== null && current.child === completedWork.child;\n            if (didBailout) {\n                return true;\n            }\n            if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n                return false;\n            } // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n            // then we only have to check the `completedWork.subtreeFlags`.\n            var child = completedWork.child;\n            while(child !== null){\n                if ((child.flags & MutationMask) !== NoFlags || (child.subtreeFlags & MutationMask) !== NoFlags) {\n                    return false;\n                }\n                child = child.sibling;\n            }\n            return true;\n        }\n        var appendAllChildren;\n        var updateHostContainer;\n        var updateHostComponent;\n        var updateHostText;\n        if (supportsMutation) {\n            // Mutation mode\n            appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {\n                // We only have the top Fiber that was created but we need recurse down its\n                // children to find all the terminal nodes.\n                var node = workInProgress.child;\n                while(node !== null){\n                    if (node.tag === HostComponent || node.tag === HostText) {\n                        appendInitialChild(parent, node.stateNode);\n                    } else if (node.tag === HostPortal) ;\n                    else if (node.child !== null) {\n                        node.child.return = node;\n                        node = node.child;\n                        continue;\n                    }\n                    if (node === workInProgress) {\n                        return;\n                    }\n                    while(node.sibling === null){\n                        if (node.return === null || node.return === workInProgress) {\n                            return;\n                        }\n                        node = node.return;\n                    }\n                    node.sibling.return = node.return;\n                    node = node.sibling;\n                }\n            };\n            updateHostContainer = function(current, workInProgress) {};\n            updateHostComponent = function(current, workInProgress, type, newProps, rootContainerInstance) {\n                // If we have an alternate, that means this is an update and we need to\n                // schedule a side-effect to do the updates.\n                var oldProps = current.memoizedProps;\n                if (oldProps === newProps) {\n                    // In mutation mode, this is sufficient for a bailout because\n                    // we won't touch this node even if children changed.\n                    return;\n                } // If we get updated because one of our children updated, we don't\n                // have newProps so we'll have to reuse them.\n                // TODO: Split the update API as separate for the props vs. children.\n                // Even better would be if children weren't special cased at all tho.\n                var instance = workInProgress.stateNode;\n                var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host\n                // component is hitting the resume path. Figure out why. Possibly\n                // related to `hidden`.\n                var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.\n                workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n                // is a new ref we mark this as an update. All the work is done in commitWork.\n                if (updatePayload) {\n                    markUpdate(workInProgress);\n                }\n            };\n            updateHostText = function(current, workInProgress, oldText, newText) {\n                // If the text differs, mark it as an update. All the work in done in commitWork.\n                if (oldText !== newText) {\n                    markUpdate(workInProgress);\n                }\n            };\n        } else if (supportsPersistence) {\n            // Persistent host tree mode\n            appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {\n                // We only have the top Fiber that was created but we need recurse down its\n                // children to find all the terminal nodes.\n                var node = workInProgress.child;\n                while(node !== null){\n                    // eslint-disable-next-line no-labels\n                    if (node.tag === HostComponent) {\n                        var instance = node.stateNode;\n                        if (needsVisibilityToggle && isHidden) {\n                            // This child is inside a timed out tree. Hide it.\n                            var props = node.memoizedProps;\n                            var type = node.type;\n                            instance = cloneHiddenInstance(instance, type, props, node);\n                        }\n                        appendInitialChild(parent, instance);\n                    } else if (node.tag === HostText) {\n                        var _instance = node.stateNode;\n                        if (needsVisibilityToggle && isHidden) {\n                            // This child is inside a timed out tree. Hide it.\n                            var text = node.memoizedProps;\n                            _instance = cloneHiddenTextInstance(_instance, text, node);\n                        }\n                        appendInitialChild(parent, _instance);\n                    } else if (node.tag === HostPortal) ;\n                    else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n                        // The children in this boundary are hidden. Toggle their visibility\n                        // before appending.\n                        var child = node.child;\n                        if (child !== null) {\n                            child.return = node;\n                        }\n                        {\n                            appendAllChildren(parent, node, true, true);\n                        }\n                    } else if (node.child !== null) {\n                        node.child.return = node;\n                        node = node.child;\n                        continue;\n                    } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n                    node = node;\n                    if (node === workInProgress) {\n                        return;\n                    }\n                    while(node.sibling === null){\n                        if (node.return === null || node.return === workInProgress) {\n                            return;\n                        }\n                        node = node.return;\n                    }\n                    node.sibling.return = node.return;\n                    node = node.sibling;\n                }\n            }; // An unfortunate fork of appendAllChildren because we have two different parent types.\n            var appendAllChildrenToContainer = function(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {\n                // We only have the top Fiber that was created but we need recurse down its\n                // children to find all the terminal nodes.\n                var node = workInProgress.child;\n                while(node !== null){\n                    // eslint-disable-next-line no-labels\n                    if (node.tag === HostComponent) {\n                        var instance = node.stateNode;\n                        if (needsVisibilityToggle && isHidden) {\n                            // This child is inside a timed out tree. Hide it.\n                            var props = node.memoizedProps;\n                            var type = node.type;\n                            instance = cloneHiddenInstance(instance, type, props, node);\n                        }\n                        appendChildToContainerChildSet(containerChildSet, instance);\n                    } else if (node.tag === HostText) {\n                        var _instance2 = node.stateNode;\n                        if (needsVisibilityToggle && isHidden) {\n                            // This child is inside a timed out tree. Hide it.\n                            var text = node.memoizedProps;\n                            _instance2 = cloneHiddenTextInstance(_instance2, text, node);\n                        }\n                        appendChildToContainerChildSet(containerChildSet, _instance2);\n                    } else if (node.tag === HostPortal) ;\n                    else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n                        // The children in this boundary are hidden. Toggle their visibility\n                        // before appending.\n                        var child = node.child;\n                        if (child !== null) {\n                            child.return = node;\n                        }\n                        {\n                            appendAllChildrenToContainer(containerChildSet, node, true, true);\n                        }\n                    } else if (node.child !== null) {\n                        node.child.return = node;\n                        node = node.child;\n                        continue;\n                    } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n                    node = node;\n                    if (node === workInProgress) {\n                        return;\n                    }\n                    while(node.sibling === null){\n                        if (node.return === null || node.return === workInProgress) {\n                            return;\n                        }\n                        node = node.return;\n                    }\n                    node.sibling.return = node.return;\n                    node = node.sibling;\n                }\n            };\n            updateHostContainer = function(current, workInProgress) {\n                var portalOrRoot = workInProgress.stateNode;\n                var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n                if (childrenUnchanged) ;\n                else {\n                    var container = portalOrRoot.containerInfo;\n                    var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.\n                    appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n                    portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.\n                    markUpdate(workInProgress);\n                    finalizeContainerChildren(container, newChildSet);\n                }\n            };\n            updateHostComponent = function(current, workInProgress, type, newProps, rootContainerInstance) {\n                var currentInstance = current.stateNode;\n                var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.\n                // This guarantees that we can reuse all of them.\n                var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n                if (childrenUnchanged && oldProps === newProps) {\n                    // No changes, just reuse the existing instance.\n                    // Note that this might release a previous clone.\n                    workInProgress.stateNode = currentInstance;\n                    return;\n                }\n                var recyclableInstance = workInProgress.stateNode;\n                var currentHostContext = getHostContext();\n                var updatePayload = null;\n                if (oldProps !== newProps) {\n                    updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);\n                }\n                if (childrenUnchanged && updatePayload === null) {\n                    // No changes, just reuse the existing instance.\n                    // Note that this might release a previous clone.\n                    workInProgress.stateNode = currentInstance;\n                    return;\n                }\n                var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);\n                if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {\n                    markUpdate(workInProgress);\n                }\n                workInProgress.stateNode = newInstance;\n                if (childrenUnchanged) {\n                    // If there are no other effects in this tree, we need to flag this node as having one.\n                    // Even though we're not going to use it for anything.\n                    // Otherwise parents won't know that there are new children to propagate upwards.\n                    markUpdate(workInProgress);\n                } else {\n                    // If children might have changed, we have to add them all to the set.\n                    appendAllChildren(newInstance, workInProgress, false, false);\n                }\n            };\n            updateHostText = function(current, workInProgress, oldText, newText) {\n                if (oldText !== newText) {\n                    // If the text content differs, we'll create a new text instance for it.\n                    var rootContainerInstance = getRootHostContainer();\n                    var currentHostContext = getHostContext();\n                    workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n                    // This lets the parents know that at least one of their children has changed.\n                    markUpdate(workInProgress);\n                } else {\n                    workInProgress.stateNode = current.stateNode;\n                }\n            };\n        } else {\n            // No host operations\n            updateHostContainer = function(current, workInProgress) {};\n            updateHostComponent = function(current, workInProgress, type, newProps, rootContainerInstance) {};\n            updateHostText = function(current, workInProgress, oldText, newText) {};\n        }\n        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n            if (getIsHydrating()) {\n                // If we're hydrating, we should consume as many items as we can\n                // so we don't leave any behind.\n                return;\n            }\n            switch(renderState.tailMode){\n                case \"hidden\":\n                    {\n                        // Any insertions at the end of the tail list after this point\n                        // should be invisible. If there are already mounted boundaries\n                        // anything before them are not considered for collapsing.\n                        // Therefore we need to go through the whole tail to find if\n                        // there are any.\n                        var tailNode = renderState.tail;\n                        var lastTailNode = null;\n                        while(tailNode !== null){\n                            if (tailNode.alternate !== null) {\n                                lastTailNode = tailNode;\n                            }\n                            tailNode = tailNode.sibling;\n                        } // Next we're simply going to delete all insertions after the\n                        // last rendered item.\n                        if (lastTailNode === null) {\n                            // All remaining items in the tail are insertions.\n                            renderState.tail = null;\n                        } else {\n                            // Detach the insertion after the last node that was already\n                            // inserted.\n                            lastTailNode.sibling = null;\n                        }\n                        break;\n                    }\n                case \"collapsed\":\n                    {\n                        // Any insertions at the end of the tail list after this point\n                        // should be invisible. If there are already mounted boundaries\n                        // anything before them are not considered for collapsing.\n                        // Therefore we need to go through the whole tail to find if\n                        // there are any.\n                        var _tailNode = renderState.tail;\n                        var _lastTailNode = null;\n                        while(_tailNode !== null){\n                            if (_tailNode.alternate !== null) {\n                                _lastTailNode = _tailNode;\n                            }\n                            _tailNode = _tailNode.sibling;\n                        } // Next we're simply going to delete all insertions after the\n                        // last rendered item.\n                        if (_lastTailNode === null) {\n                            // All remaining items in the tail are insertions.\n                            if (!hasRenderedATailFallback && renderState.tail !== null) {\n                                // We suspended during the head. We want to show at least one\n                                // row at the tail. So we'll keep on and cut off the rest.\n                                renderState.tail.sibling = null;\n                            } else {\n                                renderState.tail = null;\n                            }\n                        } else {\n                            // Detach the insertion after the last node that was already\n                            // inserted.\n                            _lastTailNode.sibling = null;\n                        }\n                        break;\n                    }\n            }\n        }\n        function bubbleProperties(completedWork) {\n            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\n            var newChildLanes = NoLanes;\n            var subtreeFlags = NoFlags;\n            if (!didBailout) {\n                // Bubble up the earliest expiration time.\n                if ((completedWork.mode & ProfileMode) !== NoMode) {\n                    // In profiling mode, resetChildExpirationTime is also used to reset\n                    // profiler durations.\n                    var actualDuration = completedWork.actualDuration;\n                    var treeBaseDuration = completedWork.selfBaseDuration;\n                    var child = completedWork.child;\n                    while(child !== null){\n                        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n                        subtreeFlags |= child.subtreeFlags;\n                        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will\n                        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n                        // When work is done, it should bubble to the parent's actualDuration. If\n                        // the fiber has not been cloned though, (meaning no work was done), then\n                        // this value will reflect the amount of time spent working on a previous\n                        // render. In that case it should not bubble. We determine whether it was\n                        // cloned by comparing the child pointer.\n                        actualDuration += child.actualDuration;\n                        treeBaseDuration += child.treeBaseDuration;\n                        child = child.sibling;\n                    }\n                    completedWork.actualDuration = actualDuration;\n                    completedWork.treeBaseDuration = treeBaseDuration;\n                } else {\n                    var _child = completedWork.child;\n                    while(_child !== null){\n                        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\n                        subtreeFlags |= _child.subtreeFlags;\n                        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code\n                        // smell because it assumes the commit phase is never concurrent with\n                        // the render phase. Will address during refactor to alternate model.\n                        _child.return = completedWork;\n                        _child = _child.sibling;\n                    }\n                }\n                completedWork.subtreeFlags |= subtreeFlags;\n            } else {\n                // Bubble up the earliest expiration time.\n                if ((completedWork.mode & ProfileMode) !== NoMode) {\n                    // In profiling mode, resetChildExpirationTime is also used to reset\n                    // profiler durations.\n                    var _treeBaseDuration = completedWork.selfBaseDuration;\n                    var _child2 = completedWork.child;\n                    while(_child2 !== null){\n                        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n                        // so we should bubble those up even during a bailout. All the other\n                        // flags have a lifetime only of a single render + commit, so we should\n                        // ignore them.\n                        subtreeFlags |= _child2.subtreeFlags & StaticMask;\n                        subtreeFlags |= _child2.flags & StaticMask;\n                        _treeBaseDuration += _child2.treeBaseDuration;\n                        _child2 = _child2.sibling;\n                    }\n                    completedWork.treeBaseDuration = _treeBaseDuration;\n                } else {\n                    var _child3 = completedWork.child;\n                    while(_child3 !== null){\n                        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n                        // so we should bubble those up even during a bailout. All the other\n                        // flags have a lifetime only of a single render + commit, so we should\n                        // ignore them.\n                        subtreeFlags |= _child3.subtreeFlags & StaticMask;\n                        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\n                        // smell because it assumes the commit phase is never concurrent with\n                        // the render phase. Will address during refactor to alternate model.\n                        _child3.return = completedWork;\n                        _child3 = _child3.sibling;\n                    }\n                }\n                completedWork.subtreeFlags |= subtreeFlags;\n            }\n            completedWork.childLanes = newChildLanes;\n            return didBailout;\n        }\n        function completeWork(current, workInProgress, renderLanes) {\n            var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\n            // to the current tree provider fiber is just as fast and less error-prone.\n            // Ideally we would have a special version of the work loop only\n            // for hydration.\n            popTreeContext(workInProgress);\n            switch(workInProgress.tag){\n                case IndeterminateComponent:\n                case LazyComponent:\n                case SimpleMemoComponent:\n                case FunctionComponent:\n                case ForwardRef:\n                case Fragment:\n                case Mode:\n                case Profiler:\n                case ContextConsumer:\n                case MemoComponent:\n                    bubbleProperties(workInProgress);\n                    return null;\n                case ClassComponent:\n                    {\n                        var Component = workInProgress.type;\n                        if (isContextProvider(Component)) {\n                            popContext(workInProgress);\n                        }\n                        bubbleProperties(workInProgress);\n                        return null;\n                    }\n                case HostRoot:\n                    {\n                        var fiberRoot = workInProgress.stateNode;\n                        popHostContainer(workInProgress);\n                        popTopLevelContextObject(workInProgress);\n                        resetWorkInProgressVersions();\n                        if (fiberRoot.pendingContext) {\n                            fiberRoot.context = fiberRoot.pendingContext;\n                            fiberRoot.pendingContext = null;\n                        }\n                        if (current === null || current.child === null) {\n                            // If we hydrated, pop so that we can delete any remaining children\n                            // that weren't hydrated.\n                            var wasHydrated = popHydrationState(workInProgress);\n                            if (wasHydrated) {\n                                // If we hydrated, then we'll need to schedule an update for\n                                // the commit side-effects on the root.\n                                markUpdate(workInProgress);\n                            } else {\n                                if (current !== null) {\n                                    var prevState = current.memoizedState;\n                                    if (!prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)\n                                    (workInProgress.flags & ForceClientRender) !== NoFlags) {\n                                        // Schedule an effect to clear this container at the start of the\n                                        // next commit. This handles the case of React rendering into a\n                                        // container with previous children. It's also safe to do for\n                                        // updates too, because current.child would only be null if the\n                                        // previous render was null (so the container would already\n                                        // be empty).\n                                        workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\n                                        // recoverable errors during first hydration attempt. If so, add\n                                        // them to a queue so we can log them in the commit phase.\n                                        upgradeHydrationErrorsToRecoverable();\n                                    }\n                                }\n                            }\n                        }\n                        updateHostContainer(current, workInProgress);\n                        bubbleProperties(workInProgress);\n                        return null;\n                    }\n                case HostComponent:\n                    {\n                        popHostContext(workInProgress);\n                        var rootContainerInstance = getRootHostContainer();\n                        var type = workInProgress.type;\n                        if (current !== null && workInProgress.stateNode != null) {\n                            updateHostComponent(current, workInProgress, type, newProps, rootContainerInstance);\n                            if (current.ref !== workInProgress.ref) {\n                                markRef(workInProgress);\n                            }\n                        } else {\n                            if (!newProps) {\n                                if (workInProgress.stateNode === null) {\n                                    throw new Error(\"We must have new props for new mounts. This error is likely \" + \"caused by a bug in React. Please file an issue.\");\n                                } // This can happen when we abort work.\n                                bubbleProperties(workInProgress);\n                                return null;\n                            }\n                            var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n                            // \"stack\" as the parent. Then append children as we go in beginWork\n                            // or completeWork depending on whether we want to add them top->down or\n                            // bottom->up. Top->down is faster in IE11.\n                            var _wasHydrated = popHydrationState(workInProgress);\n                            if (_wasHydrated) {\n                                // TODO: Move this and createInstance step into the beginPhase\n                                // to consolidate.\n                                if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {\n                                    // If changes to the hydrated node need to be applied at the\n                                    // commit-phase we mark this as such.\n                                    markUpdate(workInProgress);\n                                }\n                            } else {\n                                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);\n                                appendAllChildren(instance, workInProgress, false, false);\n                                workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.\n                                // (eg DOM renderer supports auto-focus for certain elements).\n                                // Make sure such renderers get scheduled for later work.\n                                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {\n                                    markUpdate(workInProgress);\n                                }\n                            }\n                            if (workInProgress.ref !== null) {\n                                // If there is a ref on a host node we need to schedule a callback\n                                markRef(workInProgress);\n                            }\n                        }\n                        bubbleProperties(workInProgress);\n                        return null;\n                    }\n                case HostText:\n                    {\n                        var newText = newProps;\n                        if (current && workInProgress.stateNode != null) {\n                            var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n                            // to schedule a side-effect to do the updates.\n                            updateHostText(current, workInProgress, oldText, newText);\n                        } else {\n                            if (typeof newText !== \"string\") {\n                                if (workInProgress.stateNode === null) {\n                                    throw new Error(\"We must have new props for new mounts. This error is likely \" + \"caused by a bug in React. Please file an issue.\");\n                                } // This can happen when we abort work.\n                            }\n                            var _rootContainerInstance = getRootHostContainer();\n                            var _currentHostContext = getHostContext();\n                            var _wasHydrated2 = popHydrationState(workInProgress);\n                            if (_wasHydrated2) {\n                                if (prepareToHydrateHostTextInstance(workInProgress)) {\n                                    markUpdate(workInProgress);\n                                }\n                            } else {\n                                workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);\n                            }\n                        }\n                        bubbleProperties(workInProgress);\n                        return null;\n                    }\n                case SuspenseComponent:\n                    {\n                        popSuspenseContext(workInProgress);\n                        var nextState = workInProgress.memoizedState;\n                        {\n                            if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {\n                                warnIfUnhydratedTailNodes(workInProgress);\n                                resetHydrationState();\n                                workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\n                                return workInProgress;\n                            }\n                            if (nextState !== null && nextState.dehydrated !== null) {\n                                // We might be inside a hydration state the first time we're picking up this\n                                // Suspense boundary, and also after we've reentered it for further hydration.\n                                var _wasHydrated3 = popHydrationState(workInProgress);\n                                if (current === null) {\n                                    if (!_wasHydrated3) {\n                                        throw new Error(\"A dehydrated suspense component was completed without a hydrated node. \" + \"This is probably a bug in React.\");\n                                    }\n                                    prepareToHydrateHostSuspenseInstance(workInProgress);\n                                    bubbleProperties(workInProgress);\n                                    {\n                                        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                                            var isTimedOutSuspense = nextState !== null;\n                                            if (isTimedOutSuspense) {\n                                                // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                                                var primaryChildFragment = workInProgress.child;\n                                                if (primaryChildFragment !== null) {\n                                                    // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                                                    workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    return null;\n                                } else {\n                                    // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n                                    // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n                                    resetHydrationState();\n                                    if ((workInProgress.flags & DidCapture) === NoFlags) {\n                                        // This boundary did not suspend so it's now hydrated and unsuspended.\n                                        workInProgress.memoizedState = null;\n                                    } // If nothing suspended, we need to schedule an effect to mark this boundary\n                                    // as having hydrated so events know that they're free to be invoked.\n                                    // It's also a signal to replay events and the suspense callback.\n                                    // If something suspended, schedule an effect to attach retry listeners.\n                                    // So we might as well always mark this.\n                                    workInProgress.flags |= Update;\n                                    bubbleProperties(workInProgress);\n                                    {\n                                        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                                            var _isTimedOutSuspense = nextState !== null;\n                                            if (_isTimedOutSuspense) {\n                                                // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                                                var _primaryChildFragment = workInProgress.child;\n                                                if (_primaryChildFragment !== null) {\n                                                    // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                                                    workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    return null;\n                                }\n                            } // Successfully completed this tree. If this was a forced client render,\n                            // there may have been recoverable errors during first hydration\n                            // attempt. If so, add them to a queue so we can log them in the\n                            // commit phase.\n                            upgradeHydrationErrorsToRecoverable();\n                        }\n                        if ((workInProgress.flags & DidCapture) !== NoFlags) {\n                            // Something suspended. Re-render with the fallback children.\n                            workInProgress.lanes = renderLanes; // Do not reset the effect list.\n                            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                                transferActualDuration(workInProgress);\n                            } // Don't bubble properties in this case.\n                            return workInProgress;\n                        }\n                        var nextDidTimeout = nextState !== null;\n                        var prevDidTimeout = false;\n                        if (current === null) {\n                            popHydrationState(workInProgress);\n                        } else {\n                            var _prevState = current.memoizedState;\n                            prevDidTimeout = _prevState !== null;\n                        }\n                        // an effect to toggle the subtree's visibility. When we switch from\n                        // fallback -> primary, the inner Offscreen fiber schedules this effect\n                        // as part of its normal complete phase. But when we switch from\n                        // primary -> fallback, the inner Offscreen fiber does not have a complete\n                        // phase. So we need to schedule its effect here.\n                        //\n                        // We also use this flag to connect/disconnect the effects, but the same\n                        // logic applies: when re-connecting, the Offscreen fiber's complete\n                        // phase will handle scheduling the effect. It's only when the fallback\n                        // is active that we have to do anything special.\n                        if (nextDidTimeout && !prevDidTimeout) {\n                            var _offscreenFiber = workInProgress.child;\n                            _offscreenFiber.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything\n                            // in the concurrent tree already suspended during this render.\n                            // This is a known bug.\n                            if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n                                // TODO: Move this back to throwException because this is too late\n                                // if this is a large tree which is common for initial loads. We\n                                // don't know if we should restart a render or not until we get\n                                // this marker, and this is too late.\n                                // If this render already had a ping or lower pri updates,\n                                // and this is the first time we know we're going to suspend we\n                                // should be able to immediately restart from within throwException.\n                                var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);\n                                if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {\n                                    // If this was in an invisible tree or a new render, then showing\n                                    // this boundary is ok.\n                                    renderDidSuspend();\n                                } else {\n                                    // Otherwise, we're going to have to hide content so we should\n                                    // suspend for longer if possible.\n                                    renderDidSuspendDelayIfPossible();\n                                }\n                            }\n                        }\n                        var wakeables = workInProgress.updateQueue;\n                        if (wakeables !== null) {\n                            // Schedule an effect to attach a retry listener to the promise.\n                            // TODO: Move to passive phase\n                            workInProgress.flags |= Update;\n                        }\n                        bubbleProperties(workInProgress);\n                        {\n                            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                                if (nextDidTimeout) {\n                                    // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                                    var _primaryChildFragment2 = workInProgress.child;\n                                    if (_primaryChildFragment2 !== null) {\n                                        // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                                        workInProgress.treeBaseDuration -= _primaryChildFragment2.treeBaseDuration;\n                                    }\n                                }\n                            }\n                        }\n                        return null;\n                    }\n                case HostPortal:\n                    popHostContainer(workInProgress);\n                    updateHostContainer(current, workInProgress);\n                    if (current === null) {\n                        preparePortalMount(workInProgress.stateNode.containerInfo);\n                    }\n                    bubbleProperties(workInProgress);\n                    return null;\n                case ContextProvider:\n                    // Pop provider fiber\n                    var context = workInProgress.type._context;\n                    popProvider(context, workInProgress);\n                    bubbleProperties(workInProgress);\n                    return null;\n                case IncompleteClassComponent:\n                    {\n                        // Same as class component case. I put it down here so that the tags are\n                        // sequential to ensure this switch is compiled to a jump table.\n                        var _Component = workInProgress.type;\n                        if (isContextProvider(_Component)) {\n                            popContext(workInProgress);\n                        }\n                        bubbleProperties(workInProgress);\n                        return null;\n                    }\n                case SuspenseListComponent:\n                    {\n                        popSuspenseContext(workInProgress);\n                        var renderState = workInProgress.memoizedState;\n                        if (renderState === null) {\n                            // We're running in the default, \"independent\" mode.\n                            // We don't do anything in this mode.\n                            bubbleProperties(workInProgress);\n                            return null;\n                        }\n                        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n                        var renderedTail = renderState.rendering;\n                        if (renderedTail === null) {\n                            // We just rendered the head.\n                            if (!didSuspendAlready) {\n                                // This is the first pass. We need to figure out if anything is still\n                                // suspended in the rendered set.\n                                // If new content unsuspended, but there's still some content that\n                                // didn't. Then we need to do a second pass that forces everything\n                                // to keep showing their fallbacks.\n                                // We might be suspended if something in this render pass suspended, or\n                                // something in the previous committed pass suspended. Otherwise,\n                                // there's no chance so we can skip the expensive call to\n                                // findFirstSuspended.\n                                var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);\n                                if (!cannotBeSuspended) {\n                                    var row = workInProgress.child;\n                                    while(row !== null){\n                                        var suspended = findFirstSuspended(row);\n                                        if (suspended !== null) {\n                                            didSuspendAlready = true;\n                                            workInProgress.flags |= DidCapture;\n                                            cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n                                            // part of the second pass. In that case nothing will subscribe to\n                                            // its thenables. Instead, we'll transfer its thenables to the\n                                            // SuspenseList so that it can retry if they resolve.\n                                            // There might be multiple of these in the list but since we're\n                                            // going to wait for all of them anyway, it doesn't really matter\n                                            // which ones gets to ping. In theory we could get clever and keep\n                                            // track of how many dependencies remain but it gets tricky because\n                                            // in the meantime, we can add/remove/change items and dependencies.\n                                            // We might bail out of the loop before finding any but that\n                                            // doesn't matter since that means that the other boundaries that\n                                            // we did find already has their listeners attached.\n                                            var newThenables = suspended.updateQueue;\n                                            if (newThenables !== null) {\n                                                workInProgress.updateQueue = newThenables;\n                                                workInProgress.flags |= Update;\n                                            } // Rerender the whole list, but this time, we'll force fallbacks\n                                            // to stay in place.\n                                            // Reset the effect flags before doing the second pass since that's now invalid.\n                                            // Reset the child fibers to their original state.\n                                            workInProgress.subtreeFlags = NoFlags;\n                                            resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately\n                                            // rerender the children.\n                                            pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.\n                                            return workInProgress.child;\n                                        }\n                                        row = row.sibling;\n                                    }\n                                }\n                                if (renderState.tail !== null && now$1() > getRenderTargetTime()) {\n                                    // We have already passed our CPU deadline but we still have rows\n                                    // left in the tail. We'll just give up further attempts to render\n                                    // the main content and only render fallbacks.\n                                    workInProgress.flags |= DidCapture;\n                                    didSuspendAlready = true;\n                                    cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n                                    // to get it started back up to attempt the next item. While in terms\n                                    // of priority this work has the same priority as this current render,\n                                    // it's not part of the same transition once the transition has\n                                    // committed. If it's sync, we still want to yield so that it can be\n                                    // painted. Conceptually, this is really the same as pinging.\n                                    // We can use any RetryLane even if it's the one currently rendering\n                                    // since we're leaving it behind on this node.\n                                    workInProgress.lanes = SomeRetryLane;\n                                }\n                            } else {\n                                cutOffTailIfNeeded(renderState, false);\n                            } // Next we're going to render the tail.\n                        } else {\n                            // Append the rendered row to the child list.\n                            if (!didSuspendAlready) {\n                                var _suspended = findFirstSuspended(renderedTail);\n                                if (_suspended !== null) {\n                                    workInProgress.flags |= DidCapture;\n                                    didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n                                    // get lost if this row ends up dropped during a second pass.\n                                    var _newThenables = _suspended.updateQueue;\n                                    if (_newThenables !== null) {\n                                        workInProgress.updateQueue = _newThenables;\n                                        workInProgress.flags |= Update;\n                                    }\n                                    cutOffTailIfNeeded(renderState, true); // This might have been modified.\n                                    if (renderState.tail === null && renderState.tailMode === \"hidden\" && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.\n                                    ) {\n                                        // We're done.\n                                        bubbleProperties(workInProgress);\n                                        return null;\n                                    }\n                                } else if (// time we have to render. So rendering one more row would likely\n                                // exceed it.\n                                now$1() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n                                    // We have now passed our CPU deadline and we'll just give up further\n                                    // attempts to render the main content and only render fallbacks.\n                                    // The assumption is that this is usually faster.\n                                    workInProgress.flags |= DidCapture;\n                                    didSuspendAlready = true;\n                                    cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n                                    // to get it started back up to attempt the next item. While in terms\n                                    // of priority this work has the same priority as this current render,\n                                    // it's not part of the same transition once the transition has\n                                    // committed. If it's sync, we still want to yield so that it can be\n                                    // painted. Conceptually, this is really the same as pinging.\n                                    // We can use any RetryLane even if it's the one currently rendering\n                                    // since we're leaving it behind on this node.\n                                    workInProgress.lanes = SomeRetryLane;\n                                }\n                            }\n                            if (renderState.isBackwards) {\n                                // The effect list of the backwards tail will have been added\n                                // to the end. This breaks the guarantee that life-cycles fire in\n                                // sibling order but that isn't a strong guarantee promised by React.\n                                // Especially since these might also just pop in during future commits.\n                                // Append to the beginning of the list.\n                                renderedTail.sibling = workInProgress.child;\n                                workInProgress.child = renderedTail;\n                            } else {\n                                var previousSibling = renderState.last;\n                                if (previousSibling !== null) {\n                                    previousSibling.sibling = renderedTail;\n                                } else {\n                                    workInProgress.child = renderedTail;\n                                }\n                                renderState.last = renderedTail;\n                            }\n                        }\n                        if (renderState.tail !== null) {\n                            // We still have tail rows to render.\n                            // Pop a row.\n                            var next = renderState.tail;\n                            renderState.rendering = next;\n                            renderState.tail = next.sibling;\n                            renderState.renderingStartTime = now$1();\n                            next.sibling = null; // Restore the context.\n                            // TODO: We can probably just avoid popping it instead and only\n                            // setting it the first time we go from not suspended to suspended.\n                            var suspenseContext = suspenseStackCursor.current;\n                            if (didSuspendAlready) {\n                                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n                            } else {\n                                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n                            }\n                            pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.\n                            // Don't bubble properties in this case.\n                            return next;\n                        }\n                        bubbleProperties(workInProgress);\n                        return null;\n                    }\n                case ScopeComponent:\n                    {\n                        break;\n                    }\n                case OffscreenComponent:\n                case LegacyHiddenComponent:\n                    {\n                        popRenderLanes(workInProgress);\n                        var _nextState = workInProgress.memoizedState;\n                        var nextIsHidden = _nextState !== null;\n                        if (current !== null) {\n                            var _prevState2 = current.memoizedState;\n                            var prevIsHidden = _prevState2 !== null;\n                            if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {\n                                workInProgress.flags |= Visibility;\n                            }\n                        }\n                        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n                            bubbleProperties(workInProgress);\n                        } else {\n                            // Don't bubble properties for hidden children unless we're rendering\n                            // at offscreen priority.\n                            if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {\n                                bubbleProperties(workInProgress);\n                                if (supportsMutation) {\n                                    // Check if there was an insertion or update in the hidden subtree.\n                                    // If so, we need to hide those nodes in the commit phase, so\n                                    // schedule a visibility effect.\n                                    if (workInProgress.subtreeFlags & (Placement | Update)) {\n                                        workInProgress.flags |= Visibility;\n                                    }\n                                }\n                            }\n                        }\n                        return null;\n                    }\n                case CacheComponent:\n                    {\n                        return null;\n                    }\n                case TracingMarkerComponent:\n                    {\n                        return null;\n                    }\n            }\n            throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + \"React. Please file an issue.\");\n        }\n        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n        var didReceiveUpdate = false;\n        var didWarnAboutBadClass;\n        var didWarnAboutModulePatternComponent;\n        var didWarnAboutContextTypeOnFunctionComponent;\n        var didWarnAboutGetDerivedStateOnFunctionComponent;\n        var didWarnAboutFunctionRefs;\n        var didWarnAboutReassigningProps;\n        var didWarnAboutRevealOrder;\n        var didWarnAboutTailOptions;\n        {\n            didWarnAboutBadClass = {};\n            didWarnAboutModulePatternComponent = {};\n            didWarnAboutContextTypeOnFunctionComponent = {};\n            didWarnAboutGetDerivedStateOnFunctionComponent = {};\n            didWarnAboutFunctionRefs = {};\n            didWarnAboutReassigningProps = false;\n            didWarnAboutRevealOrder = {};\n            didWarnAboutTailOptions = {};\n        }\n        function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n            if (current === null) {\n                // If this is a fresh new component that hasn't been rendered yet, we\n                // won't update its child set by applying minimal side-effects. Instead,\n                // we will add them all to the child before it gets rendered. That means\n                // we can optimize this reconciliation pass by not tracking side-effects.\n                workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n            } else {\n                // If the current child is the same as the work in progress, it means that\n                // we haven't yet started any work on these children. Therefore, we use\n                // the clone algorithm to create a copy of all the current children.\n                // If we had any progressed work already, that is invalid at this point so\n                // let's throw it out.\n                workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n            }\n        }\n        function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n            // This function is fork of reconcileChildren. It's used in cases where we\n            // want to reconcile without matching against the existing set. This has the\n            // effect of all current children being unmounted; even if the type and key\n            // are the same, the old child is unmounted and a new child is created.\n            //\n            // To do this, we're going to go through the reconcile algorithm twice. In\n            // the first pass, we schedule a deletion for all the current children by\n            // passing null.\n            workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we\n            // pass null in place of where we usually pass the current child set. This has\n            // the effect of remounting all children regardless of whether their\n            // identities match.\n            workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n        }\n        function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n            // TODO: current can be non-null here even if the component\n            // hasn't yet mounted. This happens after the first render suspends.\n            // We'll need to figure out if this is fine or can cause issues.\n            {\n                if (workInProgress.type !== workInProgress.elementType) {\n                    // Lazy component props can't be validated in createElement\n                    // because they're only guaranteed to be resolved here.\n                    var innerPropTypes = Component.propTypes;\n                    if (innerPropTypes) {\n                        checkPropTypes(innerPropTypes, nextProps, \"prop\", getComponentNameFromType(Component));\n                    }\n                }\n            }\n            var render = Component.render;\n            var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent\n            var nextChildren;\n            var hasId;\n            prepareToReadContext(workInProgress, renderLanes);\n            {\n                markComponentRenderStarted(workInProgress);\n            }\n            {\n                ReactCurrentOwner$1.current = workInProgress;\n                setIsRendering(true);\n                nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n                hasId = checkDidRenderIdHook();\n                if (workInProgress.mode & StrictLegacyMode) {\n                    setIsStrictModeForDevtools(true);\n                    try {\n                        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n                        hasId = checkDidRenderIdHook();\n                    } finally{\n                        setIsStrictModeForDevtools(false);\n                    }\n                }\n                setIsRendering(false);\n            }\n            {\n                markComponentRenderStopped();\n            }\n            if (current !== null && !didReceiveUpdate) {\n                bailoutHooks(current, workInProgress, renderLanes);\n                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n            }\n            if (getIsHydrating() && hasId) {\n                pushMaterializedTreeId(workInProgress);\n            } // React DevTools reads this flag.\n            workInProgress.flags |= PerformedWork;\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n            if (current === null) {\n                var type = Component.type;\n                if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.\n                Component.defaultProps === undefined) {\n                    var resolvedType = type;\n                    {\n                        resolvedType = resolveFunctionForHotReloading(type);\n                    }\n                    // and with only the default shallow comparison, we upgrade it\n                    // to a SimpleMemoComponent to allow fast path updates.\n                    workInProgress.tag = SimpleMemoComponent;\n                    workInProgress.type = resolvedType;\n                    {\n                        validateFunctionComponentInDev(workInProgress, type);\n                    }\n                    return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\n                }\n                {\n                    var innerPropTypes = type.propTypes;\n                    if (innerPropTypes) {\n                        // Inner memo component props aren't currently validated in createElement.\n                        // We could move it there, but we'd still need this for lazy code path.\n                        checkPropTypes(innerPropTypes, nextProps, \"prop\", getComponentNameFromType(type));\n                    }\n                }\n                var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n                child.ref = workInProgress.ref;\n                child.return = workInProgress;\n                workInProgress.child = child;\n                return child;\n            }\n            {\n                var _type = Component.type;\n                var _innerPropTypes = _type.propTypes;\n                if (_innerPropTypes) {\n                    // Inner memo component props aren't currently validated in createElement.\n                    // We could move it there, but we'd still need this for lazy code path.\n                    checkPropTypes(_innerPropTypes, nextProps, \"prop\", getComponentNameFromType(_type));\n                }\n            }\n            var currentChild = current.child; // This is always exactly one child\n            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n            if (!hasScheduledUpdateOrContext) {\n                // This will be the props with resolved defaultProps,\n                // unlike current.memoizedProps which will be the unresolved ones.\n                var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n                var compare = Component.compare;\n                compare = compare !== null ? compare : shallowEqual;\n                if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n                }\n            } // React DevTools reads this flag.\n            workInProgress.flags |= PerformedWork;\n            var newChild = createWorkInProgress(currentChild, nextProps);\n            newChild.ref = workInProgress.ref;\n            newChild.return = workInProgress;\n            workInProgress.child = newChild;\n            return newChild;\n        }\n        function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n            // TODO: current can be non-null here even if the component\n            // hasn't yet mounted. This happens when the inner render suspends.\n            // We'll need to figure out if this is fine or can cause issues.\n            {\n                if (workInProgress.type !== workInProgress.elementType) {\n                    // Lazy component props can't be validated in createElement\n                    // because they're only guaranteed to be resolved here.\n                    var outerMemoType = workInProgress.elementType;\n                    if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n                        // We warn when you define propTypes on lazy()\n                        // so let's just skip over it to find memo() outer wrapper.\n                        // Inner props for memo are validated later.\n                        var lazyComponent = outerMemoType;\n                        var payload = lazyComponent._payload;\n                        var init = lazyComponent._init;\n                        try {\n                            outerMemoType = init(payload);\n                        } catch (x) {\n                            outerMemoType = null;\n                        } // Inner propTypes will be validated in the function component path.\n                        var outerPropTypes = outerMemoType && outerMemoType.propTypes;\n                        if (outerPropTypes) {\n                            checkPropTypes(outerPropTypes, nextProps, \"prop\", getComponentNameFromType(outerMemoType));\n                        }\n                    }\n                }\n            }\n            if (current !== null) {\n                var prevProps = current.memoizedProps;\n                if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {\n                    didReceiveUpdate = false;\n                    if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n                        // The pending lanes were cleared at the beginning of beginWork. We're\n                        // about to bail out, but there might be other lanes that weren't\n                        // included in the current render. Usually, the priority level of the\n                        // remaining updates is accumulated during the evaluation of the\n                        // component (i.e. when processing the update queue). But since since\n                        // we're bailing out early *without* evaluating the component, we need\n                        // to account for it here, too. Reset to the value of the current fiber.\n                        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n                        // because a MemoComponent fiber does not have hooks or an update queue;\n                        // rather, it wraps around an inner component, which may or may not\n                        // contains hooks.\n                        // TODO: Move the reset at in beginWork out of the common path so that\n                        // this is no longer necessary.\n                        workInProgress.lanes = current.lanes;\n                        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n                    } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n                        // This is a special case that only exists for legacy mode.\n                        // See https://github.com/facebook/react/pull/19216.\n                        didReceiveUpdate = true;\n                    }\n                }\n            }\n            return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n        }\n        function updateOffscreenComponent(current, workInProgress, renderLanes) {\n            var nextProps = workInProgress.pendingProps;\n            var nextChildren = nextProps.children;\n            var prevState = current !== null ? current.memoizedState : null;\n            if (nextProps.mode === \"hidden\" || enableLegacyHidden) {\n                // Rendering a hidden tree.\n                if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n                    // In legacy sync mode, don't defer the subtree. Render it now.\n                    var nextState = {\n                        baseLanes: NoLanes,\n                        cachePool: null\n                    };\n                    workInProgress.memoizedState = nextState;\n                    pushRenderLanes(workInProgress, renderLanes);\n                } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n                    var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out\n                    // and resume this tree later.\n                    var nextBaseLanes;\n                    if (prevState !== null) {\n                        var prevBaseLanes = prevState.baseLanes;\n                        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n                    } else {\n                        nextBaseLanes = renderLanes;\n                    } // Schedule this fiber to re-render at offscreen priority. Then bailout.\n                    workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);\n                    var _nextState = {\n                        baseLanes: nextBaseLanes,\n                        cachePool: spawnedCachePool\n                    };\n                    workInProgress.memoizedState = _nextState;\n                    workInProgress.updateQueue = null;\n                    // to avoid a push/pop misalignment.\n                    pushRenderLanes(workInProgress, nextBaseLanes);\n                    return null;\n                } else {\n                    // This is the second render. The surrounding visible content has already\n                    // committed. Now we resume rendering the hidden tree.\n                    // Rendering at offscreen, so we can clear the base lanes.\n                    var _nextState2 = {\n                        baseLanes: NoLanes,\n                        cachePool: null\n                    };\n                    workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.\n                    var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;\n                    pushRenderLanes(workInProgress, subtreeRenderLanes);\n                }\n            } else {\n                // Rendering a visible tree.\n                var _subtreeRenderLanes;\n                if (prevState !== null) {\n                    // We're going from hidden -> visible.\n                    _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n                    workInProgress.memoizedState = null;\n                } else {\n                    // We weren't previously hidden, and we still aren't, so there's nothing\n                    // special to do. Need to push to the stack regardless, though, to avoid\n                    // a push/pop misalignment.\n                    _subtreeRenderLanes = renderLanes;\n                }\n                pushRenderLanes(workInProgress, _subtreeRenderLanes);\n            }\n            {\n                reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n                return workInProgress.child;\n            }\n        }\n        function updateFragment(current, workInProgress, renderLanes) {\n            var nextChildren = workInProgress.pendingProps;\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function updateMode(current, workInProgress, renderLanes) {\n            var nextChildren = workInProgress.pendingProps.children;\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function updateProfiler(current, workInProgress, renderLanes) {\n            {\n                workInProgress.flags |= Update;\n                {\n                    // Reset effect durations for the next eventual effect phase.\n                    // These are reset during render to allow the DevTools commit hook a chance to read them,\n                    var stateNode = workInProgress.stateNode;\n                    stateNode.effectDuration = 0;\n                    stateNode.passiveEffectDuration = 0;\n                }\n            }\n            var nextProps = workInProgress.pendingProps;\n            var nextChildren = nextProps.children;\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function markRef$1(current, workInProgress) {\n            var ref = workInProgress.ref;\n            if (current === null && ref !== null || current !== null && current.ref !== ref) {\n                // Schedule a Ref effect\n                workInProgress.flags |= Ref;\n                {\n                    workInProgress.flags |= RefStatic;\n                }\n            }\n        }\n        function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n            {\n                if (workInProgress.type !== workInProgress.elementType) {\n                    // Lazy component props can't be validated in createElement\n                    // because they're only guaranteed to be resolved here.\n                    var innerPropTypes = Component.propTypes;\n                    if (innerPropTypes) {\n                        checkPropTypes(innerPropTypes, nextProps, \"prop\", getComponentNameFromType(Component));\n                    }\n                }\n            }\n            var context;\n            {\n                var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n                context = getMaskedContext(workInProgress, unmaskedContext);\n            }\n            var nextChildren;\n            var hasId;\n            prepareToReadContext(workInProgress, renderLanes);\n            {\n                markComponentRenderStarted(workInProgress);\n            }\n            {\n                ReactCurrentOwner$1.current = workInProgress;\n                setIsRendering(true);\n                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n                hasId = checkDidRenderIdHook();\n                if (workInProgress.mode & StrictLegacyMode) {\n                    setIsStrictModeForDevtools(true);\n                    try {\n                        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n                        hasId = checkDidRenderIdHook();\n                    } finally{\n                        setIsStrictModeForDevtools(false);\n                    }\n                }\n                setIsRendering(false);\n            }\n            {\n                markComponentRenderStopped();\n            }\n            if (current !== null && !didReceiveUpdate) {\n                bailoutHooks(current, workInProgress, renderLanes);\n                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n            }\n            if (getIsHydrating() && hasId) {\n                pushMaterializedTreeId(workInProgress);\n            } // React DevTools reads this flag.\n            workInProgress.flags |= PerformedWork;\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n            {\n                // This is used by DevTools to force a boundary to error.\n                switch(shouldError(workInProgress)){\n                    case false:\n                        {\n                            var _instance = workInProgress.stateNode;\n                            var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.\n                            // Is there a better way to do this?\n                            var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);\n                            var state = tempInstance.state;\n                            _instance.updater.enqueueSetState(_instance, state, null);\n                            break;\n                        }\n                    case true:\n                        {\n                            workInProgress.flags |= DidCapture;\n                            workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes\n                            var error$1 = new Error(\"Simulated error coming from DevTools\");\n                            var lane = pickArbitraryLane(renderLanes);\n                            workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\n                            var update = createClassErrorUpdate(workInProgress, createCapturedValue(error$1, workInProgress), lane);\n                            enqueueCapturedUpdate(workInProgress, update);\n                            break;\n                        }\n                }\n                if (workInProgress.type !== workInProgress.elementType) {\n                    // Lazy component props can't be validated in createElement\n                    // because they're only guaranteed to be resolved here.\n                    var innerPropTypes = Component.propTypes;\n                    if (innerPropTypes) {\n                        checkPropTypes(innerPropTypes, nextProps, \"prop\", getComponentNameFromType(Component));\n                    }\n                }\n            }\n            // During mounting we don't know the child context yet as the instance doesn't exist.\n            // We will invalidate the child context in finishClassComponent() right after rendering.\n            var hasContext;\n            if (isContextProvider(Component)) {\n                hasContext = true;\n                pushContextProvider(workInProgress);\n            } else {\n                hasContext = false;\n            }\n            prepareToReadContext(workInProgress, renderLanes);\n            var instance = workInProgress.stateNode;\n            var shouldUpdate;\n            if (instance === null) {\n                if (current !== null) {\n                    // A class component without an instance only mounts if it suspended\n                    // inside a non-concurrent tree, in an inconsistent state. We want to\n                    // treat it like a new mount, even though an empty version of it already\n                    // committed. Disconnect the alternate pointers.\n                    current.alternate = null;\n                    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n                    workInProgress.flags |= Placement;\n                } // In the initial pass we might need to construct the instance.\n                constructClassInstance(workInProgress, Component, nextProps);\n                mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n                shouldUpdate = true;\n            } else if (current === null) {\n                // In a resume, we'll already have an instance we can reuse.\n                shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n            } else {\n                shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n            }\n            var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n            {\n                var inst = workInProgress.stateNode;\n                if (shouldUpdate && inst.props !== nextProps) {\n                    if (!didWarnAboutReassigningProps) {\n                        error(\"It looks like %s is reassigning its own `this.props` while rendering. \" + \"This is not supported and can lead to confusing bugs.\", getComponentNameFromFiber(workInProgress) || \"a component\");\n                    }\n                    didWarnAboutReassigningProps = true;\n                }\n            }\n            return nextUnitOfWork;\n        }\n        function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n            // Refs should update even if shouldComponentUpdate returns false\n            markRef$1(current, workInProgress);\n            var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n            if (!shouldUpdate && !didCaptureError) {\n                // Context providers should defer to sCU for rendering\n                if (hasContext) {\n                    invalidateContextProvider(workInProgress, Component, false);\n                }\n                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n            }\n            var instance = workInProgress.stateNode; // Rerender\n            ReactCurrentOwner$1.current = workInProgress;\n            var nextChildren;\n            if (didCaptureError && typeof Component.getDerivedStateFromError !== \"function\") {\n                // If we captured an error, but getDerivedStateFromError is not defined,\n                // unmount all the children. componentDidCatch will schedule an update to\n                // re-render a fallback. This is temporary until we migrate everyone to\n                // the new API.\n                // TODO: Warn in a future release.\n                nextChildren = null;\n                {\n                    stopProfilerTimerIfRunning();\n                }\n            } else {\n                {\n                    markComponentRenderStarted(workInProgress);\n                }\n                {\n                    setIsRendering(true);\n                    nextChildren = instance.render();\n                    if (workInProgress.mode & StrictLegacyMode) {\n                        setIsStrictModeForDevtools(true);\n                        try {\n                            instance.render();\n                        } finally{\n                            setIsStrictModeForDevtools(false);\n                        }\n                    }\n                    setIsRendering(false);\n                }\n                {\n                    markComponentRenderStopped();\n                }\n            } // React DevTools reads this flag.\n            workInProgress.flags |= PerformedWork;\n            if (current !== null && didCaptureError) {\n                // If we're recovering from an error, reconcile without reusing any of\n                // the existing children. Conceptually, the normal children and the children\n                // that are shown on error are two different sets, so we shouldn't reuse\n                // normal children even if their identities match.\n                forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n            } else {\n                reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            } // Memoize state using the values we just used to render.\n            // TODO: Restructure so we never read values from the instance.\n            workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n            if (hasContext) {\n                invalidateContextProvider(workInProgress, Component, true);\n            }\n            return workInProgress.child;\n        }\n        function pushHostRootContext(workInProgress) {\n            var root = workInProgress.stateNode;\n            if (root.pendingContext) {\n                pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n            } else if (root.context) {\n                // Should always be set\n                pushTopLevelContextObject(workInProgress, root.context, false);\n            }\n            pushHostContainer(workInProgress, root.containerInfo);\n        }\n        function updateHostRoot(current, workInProgress, renderLanes) {\n            pushHostRootContext(workInProgress);\n            if (current === null) {\n                throw new Error(\"Should have a current fiber. This is a bug in React.\");\n            }\n            var nextProps = workInProgress.pendingProps;\n            var prevState = workInProgress.memoizedState;\n            var prevChildren = prevState.element;\n            cloneUpdateQueue(current, workInProgress);\n            processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n            var nextState = workInProgress.memoizedState;\n            var root = workInProgress.stateNode;\n            // being called \"element\".\n            var nextChildren = nextState.element;\n            if (supportsHydration && prevState.isDehydrated) {\n                // This is a hydration root whose shell has not yet hydrated. We should\n                // attempt to hydrate.\n                // Flip isDehydrated to false to indicate that when this render\n                // finishes, the root will no longer be dehydrated.\n                var overrideState = {\n                    element: nextChildren,\n                    isDehydrated: false,\n                    cache: nextState.cache,\n                    transitions: nextState.transitions\n                };\n                var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't\n                // have reducer functions so it doesn't need rebasing.\n                updateQueue.baseState = overrideState;\n                workInProgress.memoizedState = overrideState;\n                if (workInProgress.flags & ForceClientRender) {\n                    // Something errored during a previous attempt to hydrate the shell, so we\n                    // forced a client render.\n                    var recoverableError = new Error(\"There was an error while hydrating. Because the error happened outside \" + \"of a Suspense boundary, the entire root will switch to \" + \"client rendering.\");\n                    return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);\n                } else if (nextChildren !== prevChildren) {\n                    var _recoverableError = new Error(\"This root received an early update, before anything was able \" + \"hydrate. Switched the entire root to client rendering.\");\n                    return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);\n                } else {\n                    // The outermost shell has not hydrated yet. Start hydrating.\n                    enterHydrationState(workInProgress);\n                    var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n                    workInProgress.child = child;\n                    var node = child;\n                    while(node){\n                        // Mark each child as hydrating. This is a fast path to know whether this\n                        // tree is part of a hydrating tree. This is used to determine if a child\n                        // node has fully mounted yet, and for scheduling event replaying.\n                        // Conceptually this is similar to Placement in that a new subtree is\n                        // inserted into the React tree here. It just happens to not need DOM\n                        // mutations because it already exists.\n                        node.flags = node.flags & ~Placement | Hydrating;\n                        node = node.sibling;\n                    }\n                }\n            } else {\n                // Root is not dehydrated. Either this is a client-only root, or it\n                // already hydrated.\n                resetHydrationState();\n                if (nextChildren === prevChildren) {\n                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n                }\n                reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            }\n            return workInProgress.child;\n        }\n        function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {\n            // Revert to client rendering.\n            resetHydrationState();\n            queueHydrationError(recoverableError);\n            workInProgress.flags |= ForceClientRender;\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function updateHostComponent$1(current, workInProgress, renderLanes) {\n            pushHostContext(workInProgress);\n            if (current === null) {\n                tryToClaimNextHydratableInstance(workInProgress);\n            }\n            var type = workInProgress.type;\n            var nextProps = workInProgress.pendingProps;\n            var prevProps = current !== null ? current.memoizedProps : null;\n            var nextChildren = nextProps.children;\n            var isDirectTextChild = shouldSetTextContent(type, nextProps);\n            if (isDirectTextChild) {\n                // We special case a direct text child of a host node. This is a common\n                // case. We won't handle it as a reified child. We will instead handle\n                // this in the host environment that also has access to this prop. That\n                // avoids allocating another HostText fiber and traversing it.\n                nextChildren = null;\n            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n                // If we're switching from a direct text child to a normal child, or to\n                // empty, we need to schedule the text content to be reset.\n                workInProgress.flags |= ContentReset;\n            }\n            markRef$1(current, workInProgress);\n            reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function updateHostText$1(current, workInProgress) {\n            if (current === null) {\n                tryToClaimNextHydratableInstance(workInProgress);\n            } // Nothing to do here. This is terminal. We'll do the completion step\n            // immediately after.\n            return null;\n        }\n        function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\n            if (_current !== null) {\n                // A lazy component only mounts if it suspended inside a non-\n                // concurrent tree, in an inconsistent state. We want to treat it like\n                // a new mount, even though an empty version of it already committed.\n                // Disconnect the alternate pointers.\n                _current.alternate = null;\n                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n                workInProgress.flags |= Placement;\n            }\n            var props = workInProgress.pendingProps;\n            var lazyComponent = elementType;\n            var payload = lazyComponent._payload;\n            var init = lazyComponent._init;\n            var Component = init(payload); // Store the unwrapped component in the type.\n            workInProgress.type = Component;\n            var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n            var resolvedProps = resolveDefaultProps(Component, props);\n            var child;\n            switch(resolvedTag){\n                case FunctionComponent:\n                    {\n                        {\n                            validateFunctionComponentInDev(workInProgress, Component);\n                            workInProgress.type = Component = resolveFunctionForHotReloading(Component);\n                        }\n                        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n                        return child;\n                    }\n                case ClassComponent:\n                    {\n                        {\n                            workInProgress.type = Component = resolveClassForHotReloading(Component);\n                        }\n                        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n                        return child;\n                    }\n                case ForwardRef:\n                    {\n                        {\n                            workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\n                        }\n                        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\n                        return child;\n                    }\n                case MemoComponent:\n                    {\n                        {\n                            if (workInProgress.type !== workInProgress.elementType) {\n                                var outerPropTypes = Component.propTypes;\n                                if (outerPropTypes) {\n                                    checkPropTypes(outerPropTypes, resolvedProps, \"prop\", getComponentNameFromType(Component));\n                                }\n                            }\n                        }\n                        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes);\n                        return child;\n                    }\n            }\n            var hint = \"\";\n            {\n                if (Component !== null && typeof Component === \"object\" && Component.$$typeof === REACT_LAZY_TYPE) {\n                    hint = \" Did you wrap a component in React.lazy() more than once?\";\n                }\n            }\n            // because the fact that it's a separate type of work is an\n            // implementation detail.\n            throw new Error(\"Element type is invalid. Received a promise that resolves to: \" + Component + \". \" + (\"Lazy element type must resolve to a class or function.\" + hint));\n        }\n        function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\n            if (_current !== null) {\n                // An incomplete component only mounts if it suspended inside a non-\n                // concurrent tree, in an inconsistent state. We want to treat it like\n                // a new mount, even though an empty version of it already committed.\n                // Disconnect the alternate pointers.\n                _current.alternate = null;\n                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n                workInProgress.flags |= Placement;\n            } // Promote the fiber to a class and try rendering again.\n            workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n            // Push context providers early to prevent context stack mismatches.\n            // During mounting we don't know the child context yet as the instance doesn't exist.\n            // We will invalidate the child context in finishClassComponent() right after rendering.\n            var hasContext;\n            if (isContextProvider(Component)) {\n                hasContext = true;\n                pushContextProvider(workInProgress);\n            } else {\n                hasContext = false;\n            }\n            prepareToReadContext(workInProgress, renderLanes);\n            constructClassInstance(workInProgress, Component, nextProps);\n            mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n        }\n        function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n            if (_current !== null) {\n                // An indeterminate component only mounts if it suspended inside a non-\n                // concurrent tree, in an inconsistent state. We want to treat it like\n                // a new mount, even though an empty version of it already committed.\n                // Disconnect the alternate pointers.\n                _current.alternate = null;\n                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n                workInProgress.flags |= Placement;\n            }\n            var props = workInProgress.pendingProps;\n            var context;\n            {\n                var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\n                context = getMaskedContext(workInProgress, unmaskedContext);\n            }\n            prepareToReadContext(workInProgress, renderLanes);\n            var value;\n            var hasId;\n            {\n                markComponentRenderStarted(workInProgress);\n            }\n            {\n                if (Component.prototype && typeof Component.prototype.render === \"function\") {\n                    var componentName = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutBadClass[componentName]) {\n                        error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + \"This is likely to cause errors. Change %s to extend React.Component instead.\", componentName, componentName);\n                        didWarnAboutBadClass[componentName] = true;\n                    }\n                }\n                if (workInProgress.mode & StrictLegacyMode) {\n                    ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n                }\n                setIsRendering(true);\n                ReactCurrentOwner$1.current = workInProgress;\n                value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n                hasId = checkDidRenderIdHook();\n                setIsRendering(false);\n            }\n            {\n                markComponentRenderStopped();\n            }\n            workInProgress.flags |= PerformedWork;\n            {\n                // Support for module components is deprecated and is removed behind a flag.\n                // Whether or not it would crash later, we want to show a good message in DEV first.\n                if (typeof value === \"object\" && value !== null && typeof value.render === \"function\" && value.$$typeof === undefined) {\n                    var _componentName = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutModulePatternComponent[_componentName]) {\n                        error(\"The <%s /> component appears to be a function component that returns a class instance. \" + \"Change %s to a class that extends React.Component instead. \" + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + \"cannot be called with `new` by React.\", _componentName, _componentName, _componentName);\n                        didWarnAboutModulePatternComponent[_componentName] = true;\n                    }\n                }\n            }\n            if (// Eventually we'll delete this branch altogether.\n            typeof value === \"object\" && value !== null && typeof value.render === \"function\" && value.$$typeof === undefined) {\n                {\n                    var _componentName2 = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutModulePatternComponent[_componentName2]) {\n                        error(\"The <%s /> component appears to be a function component that returns a class instance. \" + \"Change %s to a class that extends React.Component instead. \" + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + \"cannot be called with `new` by React.\", _componentName2, _componentName2, _componentName2);\n                        didWarnAboutModulePatternComponent[_componentName2] = true;\n                    }\n                }\n                workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\n                workInProgress.memoizedState = null;\n                workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.\n                // During mounting we don't know the child context yet as the instance doesn't exist.\n                // We will invalidate the child context in finishClassComponent() right after rendering.\n                var hasContext = false;\n                if (isContextProvider(Component)) {\n                    hasContext = true;\n                    pushContextProvider(workInProgress);\n                } else {\n                    hasContext = false;\n                }\n                workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n                initializeUpdateQueue(workInProgress);\n                adoptClassInstance(workInProgress, value);\n                mountClassInstance(workInProgress, Component, props, renderLanes);\n                return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n            } else {\n                // Proceed under the assumption that this is a function component\n                workInProgress.tag = FunctionComponent;\n                {\n                    if (workInProgress.mode & StrictLegacyMode) {\n                        setIsStrictModeForDevtools(true);\n                        try {\n                            value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n                            hasId = checkDidRenderIdHook();\n                        } finally{\n                            setIsStrictModeForDevtools(false);\n                        }\n                    }\n                }\n                if (getIsHydrating() && hasId) {\n                    pushMaterializedTreeId(workInProgress);\n                }\n                reconcileChildren(null, workInProgress, value, renderLanes);\n                {\n                    validateFunctionComponentInDev(workInProgress, Component);\n                }\n                return workInProgress.child;\n            }\n        }\n        function validateFunctionComponentInDev(workInProgress, Component) {\n            {\n                if (Component) {\n                    if (Component.childContextTypes) {\n                        error(\"%s(...): childContextTypes cannot be defined on a function component.\", Component.displayName || Component.name || \"Component\");\n                    }\n                }\n                if (workInProgress.ref !== null) {\n                    var info = \"\";\n                    var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n                    if (ownerName) {\n                        info += \"\\n\\nCheck the render method of `\" + ownerName + \"`.\";\n                    }\n                    var warningKey = ownerName || \"\";\n                    var debugSource = workInProgress._debugSource;\n                    if (debugSource) {\n                        warningKey = debugSource.fileName + \":\" + debugSource.lineNumber;\n                    }\n                    if (!didWarnAboutFunctionRefs[warningKey]) {\n                        didWarnAboutFunctionRefs[warningKey] = true;\n                        error(\"Function components cannot be given refs. \" + \"Attempts to access this ref will fail. \" + \"Did you mean to use React.forwardRef()?%s\", info);\n                    }\n                }\n                if (typeof Component.getDerivedStateFromProps === \"function\") {\n                    var _componentName3 = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n                        error(\"%s: Function components do not support getDerivedStateFromProps.\", _componentName3);\n                        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n                    }\n                }\n                if (typeof Component.contextType === \"object\" && Component.contextType !== null) {\n                    var _componentName4 = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n                        error(\"%s: Function components do not support contextType.\", _componentName4);\n                        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n                    }\n                }\n            }\n        }\n        var SUSPENDED_MARKER = {\n            dehydrated: null,\n            treeContext: null,\n            retryLane: NoLane\n        };\n        function mountSuspenseOffscreenState(renderLanes) {\n            return {\n                baseLanes: renderLanes,\n                cachePool: getSuspendedCache()\n            };\n        }\n        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n            var cachePool = null;\n            return {\n                baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n                cachePool: cachePool\n            };\n        } // TODO: Probably should inline this back\n        function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {\n            // If we're already showing a fallback, there are cases where we need to\n            // remain on that fallback regardless of whether the content has resolved.\n            // For example, SuspenseList coordinates when nested content appears.\n            if (current !== null) {\n                var suspenseState = current.memoizedState;\n                if (suspenseState === null) {\n                    // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n                    // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n                    // Note: This is a factoring smell. Can't remain on a fallback if there's\n                    // no fallback to remain on.\n                    return false;\n                }\n            } // Not currently showing content. Consult the Suspense context.\n            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n        }\n        function getRemainingWorkInPrimaryTree(current, renderLanes) {\n            // TODO: Should not remove render lanes that were pinged during this render\n            return removeLanes(current.childLanes, renderLanes);\n        }\n        function updateSuspenseComponent(current, workInProgress, renderLanes) {\n            var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n            {\n                if (shouldSuspend(workInProgress)) {\n                    workInProgress.flags |= DidCapture;\n                }\n            }\n            var suspenseContext = suspenseStackCursor.current;\n            var showFallback = false;\n            var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n            if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {\n                // Something in this boundary's subtree already suspended. Switch to\n                // rendering the fallback children.\n                showFallback = true;\n                workInProgress.flags &= ~DidCapture;\n            } else {\n                // Attempting the main content\n                if (current === null || current.memoizedState !== null) {\n                    // This is a new mount or this boundary is already showing a fallback state.\n                    // Mark this subtree context as having at least one invisible parent that could\n                    // handle the fallback state.\n                    // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n                    {\n                        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);\n                    }\n                }\n            }\n            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n            pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense\n            // boundary's children. This involves some custom reconciliation logic. Two\n            // main reasons this is so complicated.\n            //\n            // First, Legacy Mode has different semantics for backwards compatibility. The\n            // primary tree will commit in an inconsistent state, so when we do the\n            // second pass to render the fallback, we do some exceedingly, uh, clever\n            // hacks to make that not totally break. Like transferring effects and\n            // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n            // because we bailout on the primary tree completely and leave it in its old\n            // state, no effects. Same as what we do for Offscreen (except that\n            // Offscreen doesn't have the first render pass).\n            //\n            // Second is hydration. During hydration, the Suspense fiber has a slightly\n            // different layout, where the child points to a dehydrated fragment, which\n            // contains the DOM rendered by the server.\n            //\n            // Third, even if you set all that aside, Suspense is like error boundaries in\n            // that we first we try to render one tree, and if that fails, we render again\n            // and switch to a different tree. Like a try/catch block. So we have to track\n            // which branch we're currently rendering. Ideally we would model this using\n            // a stack.\n            if (current === null) {\n                // Initial mount\n                // If we're currently hydrating, try to hydrate this boundary.\n                tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.\n                {\n                    var suspenseState = workInProgress.memoizedState;\n                    if (suspenseState !== null) {\n                        var dehydrated = suspenseState.dehydrated;\n                        if (dehydrated !== null) {\n                            return mountDehydratedSuspenseComponent(workInProgress, dehydrated);\n                        }\n                    }\n                }\n                var nextPrimaryChildren = nextProps.children;\n                var nextFallbackChildren = nextProps.fallback;\n                if (showFallback) {\n                    var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n                    var primaryChildFragment = workInProgress.child;\n                    primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n                    workInProgress.memoizedState = SUSPENDED_MARKER;\n                    return fallbackFragment;\n                } else {\n                    return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\n                }\n            } else {\n                // This is an update.\n                // If the current fiber has a SuspenseState, that means it's already showing\n                // a fallback.\n                var prevState = current.memoizedState;\n                if (prevState !== null) {\n                    // The current tree is already showing a fallback\n                    // Special path for hydration\n                    {\n                        var _dehydrated = prevState.dehydrated;\n                        if (_dehydrated !== null) {\n                            if (!didSuspend) {\n                                return updateDehydratedSuspenseComponent(current, workInProgress, _dehydrated, prevState, renderLanes);\n                            } else if (workInProgress.flags & ForceClientRender) {\n                                // Something errored during hydration. Try again without hydrating.\n                                workInProgress.flags &= ~ForceClientRender;\n                                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, new Error(\"There was an error while hydrating this Suspense boundary. \" + \"Switched to client rendering.\"));\n                            } else if (workInProgress.memoizedState !== null) {\n                                // Something suspended and we should still be in dehydrated mode.\n                                // Leave the existing child in place.\n                                workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there\n                                // but the normal suspense pass doesn't.\n                                workInProgress.flags |= DidCapture;\n                                return null;\n                            } else {\n                                // Suspended but we should no longer be in dehydrated mode.\n                                // Therefore we now have to render the fallback.\n                                var _nextPrimaryChildren = nextProps.children;\n                                var _nextFallbackChildren = nextProps.fallback;\n                                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);\n                                var _primaryChildFragment2 = workInProgress.child;\n                                _primaryChildFragment2.memoizedState = mountSuspenseOffscreenState(renderLanes);\n                                workInProgress.memoizedState = SUSPENDED_MARKER;\n                                return fallbackChildFragment;\n                            }\n                        }\n                    }\n                    if (showFallback) {\n                        var _nextFallbackChildren2 = nextProps.fallback;\n                        var _nextPrimaryChildren2 = nextProps.children;\n                        var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);\n                        var _primaryChildFragment3 = workInProgress.child;\n                        var prevOffscreenState = current.child.memoizedState;\n                        _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n                        _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);\n                        workInProgress.memoizedState = SUSPENDED_MARKER;\n                        return _fallbackChildFragment;\n                    } else {\n                        var _nextPrimaryChildren3 = nextProps.children;\n                        var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);\n                        workInProgress.memoizedState = null;\n                        return _primaryChildFragment4;\n                    }\n                } else {\n                    // The current tree is not already showing a fallback.\n                    if (showFallback) {\n                        // Timed out.\n                        var _nextFallbackChildren3 = nextProps.fallback;\n                        var _nextPrimaryChildren4 = nextProps.children;\n                        var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);\n                        var _primaryChildFragment5 = workInProgress.child;\n                        var _prevOffscreenState = current.child.memoizedState;\n                        _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);\n                        _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the\n                        // fallback children.\n                        workInProgress.memoizedState = SUSPENDED_MARKER;\n                        return _fallbackChildFragment2;\n                    } else {\n                        // Still haven't timed out. Continue rendering the children, like we\n                        // normally do.\n                        var _nextPrimaryChildren5 = nextProps.children;\n                        var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);\n                        workInProgress.memoizedState = null;\n                        return _primaryChildFragment6;\n                    }\n                }\n            }\n        }\n        function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n            var mode = workInProgress.mode;\n            var primaryChildProps = {\n                mode: \"visible\",\n                children: primaryChildren\n            };\n            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n            primaryChildFragment.return = workInProgress;\n            workInProgress.child = primaryChildFragment;\n            return primaryChildFragment;\n        }\n        function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n            var mode = workInProgress.mode;\n            var progressedPrimaryFragment = workInProgress.child;\n            var primaryChildProps = {\n                mode: \"hidden\",\n                children: primaryChildren\n            };\n            var primaryChildFragment;\n            var fallbackChildFragment;\n            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {\n                // In legacy mode, we commit the primary tree as if it successfully\n                // completed, even though it's in an inconsistent state.\n                primaryChildFragment = progressedPrimaryFragment;\n                primaryChildFragment.childLanes = NoLanes;\n                primaryChildFragment.pendingProps = primaryChildProps;\n                if (workInProgress.mode & ProfileMode) {\n                    // Reset the durations from the first pass so they aren't included in the\n                    // final amounts. This seems counterintuitive, since we're intentionally\n                    // not measuring part of the render phase, but this makes it match what we\n                    // do in Concurrent Mode.\n                    primaryChildFragment.actualDuration = 0;\n                    primaryChildFragment.actualStartTime = -1;\n                    primaryChildFragment.selfBaseDuration = 0;\n                    primaryChildFragment.treeBaseDuration = 0;\n                }\n                fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n            } else {\n                primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n                fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n            }\n            primaryChildFragment.return = workInProgress;\n            fallbackChildFragment.return = workInProgress;\n            primaryChildFragment.sibling = fallbackChildFragment;\n            workInProgress.child = primaryChildFragment;\n            return fallbackChildFragment;\n        }\n        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\n            // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n            // this wrapper function to constrain it.\n            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n        }\n        function updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n            // The props argument to `createWorkInProgress` is `any` typed, so we use this\n            // wrapper function to constrain it.\n            return createWorkInProgress(current, offscreenProps);\n        }\n        function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n            var currentPrimaryChildFragment = current.child;\n            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n                mode: \"visible\",\n                children: primaryChildren\n            });\n            if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n                primaryChildFragment.lanes = renderLanes;\n            }\n            primaryChildFragment.return = workInProgress;\n            primaryChildFragment.sibling = null;\n            if (currentFallbackChildFragment !== null) {\n                // Delete the fallback child fragment\n                var deletions = workInProgress.deletions;\n                if (deletions === null) {\n                    workInProgress.deletions = [\n                        currentFallbackChildFragment\n                    ];\n                    workInProgress.flags |= ChildDeletion;\n                } else {\n                    deletions.push(currentFallbackChildFragment);\n                }\n            }\n            workInProgress.child = primaryChildFragment;\n            return primaryChildFragment;\n        }\n        function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n            var mode = workInProgress.mode;\n            var currentPrimaryChildFragment = current.child;\n            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n            var primaryChildProps = {\n                mode: \"hidden\",\n                children: primaryChildren\n            };\n            var primaryChildFragment;\n            if (// completed, even though it's in an inconsistent state.\n            (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was\n            // already cloned. In legacy mode, the only case where this isn't true is\n            // when DevTools forces us to display a fallback; we skip the first render\n            // pass entirely and go straight to rendering the fallback. (In Concurrent\n            // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n            // only codepath.)\n            workInProgress.child !== currentPrimaryChildFragment) {\n                var progressedPrimaryFragment = workInProgress.child;\n                primaryChildFragment = progressedPrimaryFragment;\n                primaryChildFragment.childLanes = NoLanes;\n                primaryChildFragment.pendingProps = primaryChildProps;\n                if (workInProgress.mode & ProfileMode) {\n                    // Reset the durations from the first pass so they aren't included in the\n                    // final amounts. This seems counterintuitive, since we're intentionally\n                    // not measuring part of the render phase, but this makes it match what we\n                    // do in Concurrent Mode.\n                    primaryChildFragment.actualDuration = 0;\n                    primaryChildFragment.actualStartTime = -1;\n                    primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;\n                    primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;\n                }\n                // However, since we're going to remain on the fallback, we no longer want\n                // to delete it.\n                workInProgress.deletions = null;\n            } else {\n                primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);\n                // (We don't do this in legacy mode, because in legacy mode we don't re-use\n                // the current tree; see previous branch.)\n                primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\n            }\n            var fallbackChildFragment;\n            if (currentFallbackChildFragment !== null) {\n                fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n            } else {\n                fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already\n                // mounted but this is a new fiber.\n                fallbackChildFragment.flags |= Placement;\n            }\n            fallbackChildFragment.return = workInProgress;\n            primaryChildFragment.return = workInProgress;\n            primaryChildFragment.sibling = fallbackChildFragment;\n            workInProgress.child = primaryChildFragment;\n            return fallbackChildFragment;\n        }\n        function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {\n            // Falling back to client rendering. Because this has performance\n            // implications, it's considered a recoverable error, even though the user\n            // likely won't observe anything wrong with the UI.\n            //\n            // The error is passed in as an argument to enforce that every caller provide\n            // a custom message, or explicitly opt out (currently the only path that opts\n            // out is legacy mode; every concurrent path provides an error).\n            if (recoverableError !== null) {\n                queueHydrationError(recoverableError);\n            } // This will add the old fiber to the deletion list\n            reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.\n            var nextProps = workInProgress.pendingProps;\n            var primaryChildren = nextProps.children;\n            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already\n            // mounted but this is a new fiber.\n            primaryChildFragment.flags |= Placement;\n            workInProgress.memoizedState = null;\n            return primaryChildFragment;\n        }\n        function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n            var fiberMode = workInProgress.mode;\n            var primaryChildProps = {\n                mode: \"visible\",\n                children: primaryChildren\n            };\n            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);\n            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense\n            // boundary) already mounted but this is a new fiber.\n            fallbackChildFragment.flags |= Placement;\n            primaryChildFragment.return = workInProgress;\n            fallbackChildFragment.return = workInProgress;\n            primaryChildFragment.sibling = fallbackChildFragment;\n            workInProgress.child = primaryChildFragment;\n            if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n                // We will have dropped the effect list which contains the\n                // deletion. We need to reconcile to delete the current child.\n                reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n            }\n            return fallbackChildFragment;\n        }\n        function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {\n            // During the first pass, we'll bail out and not drill into the children.\n            // Instead, we'll leave the content in place and try to hydrate it later.\n            if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n                {\n                    error(\"Cannot hydrate Suspense in legacy mode. Switch from \" + \"ReactDOM.hydrate(element, container) to \" + \"ReactDOMClient.hydrateRoot(container, <App />)\" + \".render(element) or remove the Suspense components from \" + \"the server rendered components.\");\n                }\n                workInProgress.lanes = laneToLanes(SyncLane);\n            } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n                // This is a client-only boundary. Since we won't get any content from the server\n                // for this, we need to schedule that at a higher priority based on when it would\n                // have timed out. In theory we could render it in this pass but it would have the\n                // wrong priority associated with it and will prevent hydration of parent path.\n                // Instead, we'll leave work left on it to render it in a separate commit.\n                // TODO This time should be the time at which the server rendered response that is\n                // a parent to this boundary was displayed. However, since we currently don't have\n                // a protocol to transfer that time, we'll just estimate it by using the current\n                // time. This will mean that Suspense timeouts are slightly shifted to later than\n                // they should be.\n                // Schedule a normal pri update to render this content.\n                workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n            } else {\n                // We'll continue hydrating the rest at offscreen priority since we'll already\n                // be showing the right content coming from the server, it is no rush.\n                workInProgress.lanes = laneToLanes(OffscreenLane);\n            }\n            return null;\n        }\n        function updateDehydratedSuspenseComponent(current, workInProgress, suspenseInstance, suspenseState, renderLanes) {\n            // We should never be hydrating at this point because it is the first pass,\n            // but after we've already committed once.\n            warnIfHydrating();\n            if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // required — every concurrent mode path that causes hydration to\n                // de-opt to client rendering should have an error message.\n                null);\n            }\n            if (isSuspenseInstanceFallback(suspenseInstance)) {\n                // This boundary is in a permanent fallback state. In this case, we'll never\n                // get an update and we'll never be able to hydrate the final content. Let's just try the\n                // client side render instead.\n                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // here on the client. Or, in production, a hash/id that corresponds to\n                // the error.\n                new Error(\"The server could not finish this Suspense boundary, likely \" + \"due to an error during server rendering. Switched to \" + \"client rendering.\"));\n            }\n            // any context has changed, we need to treat is as if the input might have changed.\n            var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n            if (didReceiveUpdate || hasContextChanged) {\n                // This boundary has changed since the first render. This means that we are now unable to\n                // hydrate it. We might still be able to hydrate it using a higher priority lane.\n                var root = getWorkInProgressRoot();\n                if (root !== null) {\n                    var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);\n                    if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {\n                        // Intentionally mutating since this render will get interrupted. This\n                        // is one of the very rare times where we mutate the current tree\n                        // during the render phase.\n                        suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render\n                        var eventTime = NoTimestamp;\n                        scheduleUpdateOnFiber(current, attemptHydrationAtLane, eventTime);\n                    }\n                } // If we have scheduled higher pri work above, this will probably just abort the render\n                // since we now have higher priority work, but in case it doesn't, we need to prepare to\n                // render something, if we time out. Even if that requires us to delete everything and\n                // skip hydration.\n                // Delay having to do this as long as the suspense timeout allows us.\n                renderDidSuspendDelayIfPossible();\n                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, new Error(\"This Suspense boundary received an update before it finished \" + \"hydrating. This caused the boundary to switch to client rendering. \" + \"The usual way to fix this is to wrap the original update \" + \"in startTransition.\"));\n            } else if (isSuspenseInstancePending(suspenseInstance)) {\n                // This component is still pending more data from the server, so we can't hydrate its\n                // content. We treat it as if this component suspended itself. It might seem as if\n                // we could just try to render it client-side instead. However, this will perform a\n                // lot of unnecessary work and is unlikely to complete since it often will suspend\n                // on missing data anyway. Additionally, the server might be able to render more\n                // than we can on the client yet. In that case we'd end up with more fallback states\n                // on the client than if we just leave it alone. If the server times out or errors\n                // these should update this boundary to the permanent Fallback state instead.\n                // Mark it as having captured (i.e. suspended).\n                workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.\n                workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.\n                var retry = retryDehydratedSuspenseBoundary.bind(null, current);\n                registerSuspenseInstanceRetry(suspenseInstance, retry);\n                return null;\n            } else {\n                // This is the first attempt.\n                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);\n                var nextProps = workInProgress.pendingProps;\n                var primaryChildren = nextProps.children;\n                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this\n                // tree is part of a hydrating tree. This is used to determine if a child\n                // node has fully mounted yet, and for scheduling event replaying.\n                // Conceptually this is similar to Placement in that a new subtree is\n                // inserted into the React tree here. It just happens to not need DOM\n                // mutations because it already exists.\n                primaryChildFragment.flags |= Hydrating;\n                return primaryChildFragment;\n            }\n        }\n        function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n            fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n            var alternate = fiber.alternate;\n            if (alternate !== null) {\n                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n            }\n            scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n        }\n        function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n            // Mark any Suspense boundaries with fallbacks as having work to do.\n            // If they were previously forced into fallbacks, they may now be able\n            // to unblock.\n            var node = firstChild;\n            while(node !== null){\n                if (node.tag === SuspenseComponent) {\n                    var state = node.memoizedState;\n                    if (state !== null) {\n                        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n                    }\n                } else if (node.tag === SuspenseListComponent) {\n                    // If the tail is hidden there might not be an Suspense boundaries\n                    // to schedule work on. In this case we have to schedule it on the\n                    // list itself.\n                    // We don't have to traverse to the children of the list since\n                    // the list will propagate the change when it rerenders.\n                    scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n                } else if (node.child !== null) {\n                    node.child.return = node;\n                    node = node.child;\n                    continue;\n                }\n                if (node === workInProgress) {\n                    return;\n                }\n                while(node.sibling === null){\n                    if (node.return === null || node.return === workInProgress) {\n                        return;\n                    }\n                    node = node.return;\n                }\n                node.sibling.return = node.return;\n                node = node.sibling;\n            }\n        }\n        function findLastContentRow(firstChild) {\n            // This is going to find the last row among these children that is already\n            // showing content on the screen, as opposed to being in fallback state or\n            // new. If a row has multiple Suspense boundaries, any of them being in the\n            // fallback state, counts as the whole row being in a fallback state.\n            // Note that the \"rows\" will be workInProgress, but any nested children\n            // will still be current since we haven't rendered them yet. The mounted\n            // order may not be the same as the new order. We use the new order.\n            var row = firstChild;\n            var lastContentRow = null;\n            while(row !== null){\n                var currentRow = row.alternate; // New rows can't be content rows.\n                if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n                    lastContentRow = row;\n                }\n                row = row.sibling;\n            }\n            return lastContentRow;\n        }\n        function validateRevealOrder(revealOrder) {\n            {\n                if (revealOrder !== undefined && revealOrder !== \"forwards\" && revealOrder !== \"backwards\" && revealOrder !== \"together\" && !didWarnAboutRevealOrder[revealOrder]) {\n                    didWarnAboutRevealOrder[revealOrder] = true;\n                    if (typeof revealOrder === \"string\") {\n                        switch(revealOrder.toLowerCase()){\n                            case \"together\":\n                            case \"forwards\":\n                            case \"backwards\":\n                                {\n                                    error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \"%s\" instead.', revealOrder, revealOrder.toLowerCase());\n                                    break;\n                                }\n                            case \"forward\":\n                            case \"backward\":\n                                {\n                                    error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \"%ss\" instead.', revealOrder, revealOrder.toLowerCase());\n                                    break;\n                                }\n                            default:\n                                error('\"%s\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n                                break;\n                        }\n                    } else {\n                        error(\"%s is not a supported value for revealOrder on <SuspenseList />. \" + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n                    }\n                }\n            }\n        }\n        function validateTailOptions(tailMode, revealOrder) {\n            {\n                if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n                    if (tailMode !== \"collapsed\" && tailMode !== \"hidden\") {\n                        didWarnAboutTailOptions[tailMode] = true;\n                        error('\"%s\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \"collapsed\" or \"hidden\"?', tailMode);\n                    } else if (revealOrder !== \"forwards\" && revealOrder !== \"backwards\") {\n                        didWarnAboutTailOptions[tailMode] = true;\n                        error('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' + '\"forwards\" or \"backwards\". ' + 'Did you mean to specify revealOrder=\"forwards\"?', tailMode);\n                    }\n                }\n            }\n        }\n        function validateSuspenseListNestedChild(childSlot, index) {\n            {\n                var isAnArray = isArray(childSlot);\n                var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === \"function\";\n                if (isAnArray || isIterable) {\n                    var type = isAnArray ? \"array\" : \"iterable\";\n                    error(\"A nested %s was passed to row #%s in <SuspenseList />. Wrap it in \" + \"an additional SuspenseList to configure its revealOrder: \" + \"<SuspenseList revealOrder=...> ... \" + \"<SuspenseList revealOrder=...>{%s}</SuspenseList> ... \" + \"</SuspenseList>\", type, index, type);\n                    return false;\n                }\n            }\n            return true;\n        }\n        function validateSuspenseListChildren(children, revealOrder) {\n            {\n                if ((revealOrder === \"forwards\" || revealOrder === \"backwards\") && children !== undefined && children !== null && children !== false) {\n                    if (isArray(children)) {\n                        for(var i = 0; i < children.length; i++){\n                            if (!validateSuspenseListNestedChild(children[i], i)) {\n                                return;\n                            }\n                        }\n                    } else {\n                        var iteratorFn = getIteratorFn(children);\n                        if (typeof iteratorFn === \"function\") {\n                            var childrenIterator = iteratorFn.call(children);\n                            if (childrenIterator) {\n                                var step = childrenIterator.next();\n                                var _i = 0;\n                                for(; !step.done; step = childrenIterator.next()){\n                                    if (!validateSuspenseListNestedChild(step.value, _i)) {\n                                        return;\n                                    }\n                                    _i++;\n                                }\n                            }\n                        } else {\n                            error('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' + \"This is not useful since it needs multiple rows. \" + \"Did you mean to pass multiple children or an array?\", revealOrder);\n                        }\n                    }\n                }\n            }\n        }\n        function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\n            var renderState = workInProgress.memoizedState;\n            if (renderState === null) {\n                workInProgress.memoizedState = {\n                    isBackwards: isBackwards,\n                    rendering: null,\n                    renderingStartTime: 0,\n                    last: lastContentRow,\n                    tail: tail,\n                    tailMode: tailMode\n                };\n            } else {\n                // We can reuse the existing object from previous renders.\n                renderState.isBackwards = isBackwards;\n                renderState.rendering = null;\n                renderState.renderingStartTime = 0;\n                renderState.last = lastContentRow;\n                renderState.tail = tail;\n                renderState.tailMode = tailMode;\n            }\n        } // This can end up rendering this component multiple passes.\n        // The first pass splits the children fibers into two sets. A head and tail.\n        // We first render the head. If anything is in fallback state, we do another\n        // pass through beginWork to rerender all children (including the tail) with\n        // the force suspend context. If the first render didn't have anything in\n        // in fallback state. Then we render each row in the tail one-by-one.\n        // That happens in the completeWork phase without going back to beginWork.\n        function updateSuspenseListComponent(current, workInProgress, renderLanes) {\n            var nextProps = workInProgress.pendingProps;\n            var revealOrder = nextProps.revealOrder;\n            var tailMode = nextProps.tail;\n            var newChildren = nextProps.children;\n            validateRevealOrder(revealOrder);\n            validateTailOptions(tailMode, revealOrder);\n            validateSuspenseListChildren(newChildren, revealOrder);\n            reconcileChildren(current, workInProgress, newChildren, renderLanes);\n            var suspenseContext = suspenseStackCursor.current;\n            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n            if (shouldForceFallback) {\n                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n                workInProgress.flags |= DidCapture;\n            } else {\n                var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;\n                if (didSuspendBefore) {\n                    // If we previously forced a fallback, we need to schedule work\n                    // on any nested boundaries to let them know to try to render\n                    // again. This is the same as context updating.\n                    propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n                }\n                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n            }\n            pushSuspenseContext(workInProgress, suspenseContext);\n            if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n                // In legacy mode, SuspenseList doesn't work so we just\n                // use make it a noop by treating it as the default revealOrder.\n                workInProgress.memoizedState = null;\n            } else {\n                switch(revealOrder){\n                    case \"forwards\":\n                        {\n                            var lastContentRow = findLastContentRow(workInProgress.child);\n                            var tail;\n                            if (lastContentRow === null) {\n                                // The whole list is part of the tail.\n                                // TODO: We could fast path by just rendering the tail now.\n                                tail = workInProgress.child;\n                                workInProgress.child = null;\n                            } else {\n                                // Disconnect the tail rows after the content row.\n                                // We're going to render them separately later.\n                                tail = lastContentRow.sibling;\n                                lastContentRow.sibling = null;\n                            }\n                            initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode);\n                            break;\n                        }\n                    case \"backwards\":\n                        {\n                            // We're going to find the first row that has existing content.\n                            // At the same time we're going to reverse the list of everything\n                            // we pass in the meantime. That's going to be our tail in reverse\n                            // order.\n                            var _tail = null;\n                            var row = workInProgress.child;\n                            workInProgress.child = null;\n                            while(row !== null){\n                                var currentRow = row.alternate; // New rows can't be content rows.\n                                if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n                                    // This is the beginning of the main content.\n                                    workInProgress.child = row;\n                                    break;\n                                }\n                                var nextRow = row.sibling;\n                                row.sibling = _tail;\n                                _tail = row;\n                                row = nextRow;\n                            } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n                            initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode);\n                            break;\n                        }\n                    case \"together\":\n                        {\n                            initSuspenseListRenderState(workInProgress, false, null, null, undefined);\n                            break;\n                        }\n                    default:\n                        {\n                            // The default reveal order is the same as not having\n                            // a boundary.\n                            workInProgress.memoizedState = null;\n                        }\n                }\n            }\n            return workInProgress.child;\n        }\n        function updatePortalComponent(current, workInProgress, renderLanes) {\n            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n            var nextChildren = workInProgress.pendingProps;\n            if (current === null) {\n                // Portals are special because we don't append the children during mount\n                // but at commit. Therefore we need to track insertions which the normal\n                // flow doesn't do during mount. This doesn't happen at the root because\n                // the root always starts with a \"current\" with a null child.\n                // TODO: Consider unifying this with how the root works.\n                workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n            } else {\n                reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n            }\n            return workInProgress.child;\n        }\n        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n        function updateContextProvider(current, workInProgress, renderLanes) {\n            var providerType = workInProgress.type;\n            var context = providerType._context;\n            var newProps = workInProgress.pendingProps;\n            var oldProps = workInProgress.memoizedProps;\n            var newValue = newProps.value;\n            {\n                if (!(\"value\" in newProps)) {\n                    if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n                        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n                        error(\"The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?\");\n                    }\n                }\n                var providerPropTypes = workInProgress.type.propTypes;\n                if (providerPropTypes) {\n                    checkPropTypes(providerPropTypes, newProps, \"prop\", \"Context.Provider\");\n                }\n            }\n            pushProvider(workInProgress, context, newValue);\n            {\n                if (oldProps !== null) {\n                    var oldValue = oldProps.value;\n                    if (objectIs(oldValue, newValue)) {\n                        // No change. Bailout early if children are the same.\n                        if (oldProps.children === newProps.children && !hasContextChanged()) {\n                            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n                        }\n                    } else {\n                        // The context value changed. Search for matching consumers and schedule\n                        // them to update.\n                        propagateContextChange(workInProgress, context, renderLanes);\n                    }\n                }\n            }\n            var newChildren = newProps.children;\n            reconcileChildren(current, workInProgress, newChildren, renderLanes);\n            return workInProgress.child;\n        }\n        var hasWarnedAboutUsingContextAsConsumer = false;\n        function updateContextConsumer(current, workInProgress, renderLanes) {\n            var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In\n            // DEV mode, we create a separate object for Context.Consumer that acts\n            // like a proxy to Context. This proxy object adds unnecessary code in PROD\n            // so we use the old behaviour (Context.Consumer references Context) to\n            // reduce size and overhead. The separate object references context via\n            // a property called \"_context\", which also gives us the ability to check\n            // in DEV mode if this property exists or not and warn if it does not.\n            {\n                if (context._context === undefined) {\n                    // This may be because it's a Context (rather than a Consumer).\n                    // Or it may be because it's older React where they're the same thing.\n                    // We only want to warn if we're sure it's a new React.\n                    if (context !== context.Consumer) {\n                        if (!hasWarnedAboutUsingContextAsConsumer) {\n                            hasWarnedAboutUsingContextAsConsumer = true;\n                            error(\"Rendering <Context> directly is not supported and will be removed in \" + \"a future major release. Did you mean to render <Context.Consumer> instead?\");\n                        }\n                    }\n                } else {\n                    context = context._context;\n                }\n            }\n            var newProps = workInProgress.pendingProps;\n            var render = newProps.children;\n            {\n                if (typeof render !== \"function\") {\n                    error(\"A context consumer was rendered with multiple children, or a child \" + \"that isn't a function. A context consumer expects a single child \" + \"that is a function. If you did pass a function, make sure there \" + \"is no trailing or leading whitespace around it.\");\n                }\n            }\n            prepareToReadContext(workInProgress, renderLanes);\n            var newValue = readContext(context);\n            {\n                markComponentRenderStarted(workInProgress);\n            }\n            var newChildren;\n            {\n                ReactCurrentOwner$1.current = workInProgress;\n                setIsRendering(true);\n                newChildren = render(newValue);\n                setIsRendering(false);\n            }\n            {\n                markComponentRenderStopped();\n            }\n            workInProgress.flags |= PerformedWork;\n            reconcileChildren(current, workInProgress, newChildren, renderLanes);\n            return workInProgress.child;\n        }\n        function markWorkInProgressReceivedUpdate() {\n            didReceiveUpdate = true;\n        }\n        function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n            if (current !== null) {\n                // Reuse previous dependencies\n                workInProgress.dependencies = current.dependencies;\n            }\n            {\n                // Don't update \"base\" render times for bailouts.\n                stopProfilerTimerIfRunning();\n            }\n            markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n            if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n                // The children don't have any work either. We can skip them.\n                // TODO: Once we add back resuming, we should check if the children are\n                // a work-in-progress set. If so, we need to transfer their effects.\n                {\n                    return null;\n                }\n            } // This fiber doesn't have work, but its subtree does. Clone the child\n            // fibers and continue.\n            cloneChildFibers(current, workInProgress);\n            return workInProgress.child;\n        }\n        function remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n            {\n                var returnFiber = oldWorkInProgress.return;\n                if (returnFiber === null) {\n                    // eslint-disable-next-line react-internal/prod-error-codes\n                    throw new Error(\"Cannot swap the root fiber.\");\n                } // Disconnect from the old current.\n                // It will get deleted.\n                current.alternate = null;\n                oldWorkInProgress.alternate = null; // Connect to the new tree.\n                newWorkInProgress.index = oldWorkInProgress.index;\n                newWorkInProgress.sibling = oldWorkInProgress.sibling;\n                newWorkInProgress.return = oldWorkInProgress.return;\n                newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.\n                if (oldWorkInProgress === returnFiber.child) {\n                    returnFiber.child = newWorkInProgress;\n                } else {\n                    var prevSibling = returnFiber.child;\n                    if (prevSibling === null) {\n                        // eslint-disable-next-line react-internal/prod-error-codes\n                        throw new Error(\"Expected parent to have a child.\");\n                    }\n                    while(prevSibling.sibling !== oldWorkInProgress){\n                        prevSibling = prevSibling.sibling;\n                        if (prevSibling === null) {\n                            // eslint-disable-next-line react-internal/prod-error-codes\n                            throw new Error(\"Expected to find the previous sibling.\");\n                        }\n                    }\n                    prevSibling.sibling = newWorkInProgress;\n                } // Delete the old fiber and place the new one.\n                // Since the old fiber is disconnected, we have to schedule it manually.\n                var deletions = returnFiber.deletions;\n                if (deletions === null) {\n                    returnFiber.deletions = [\n                        current\n                    ];\n                    returnFiber.flags |= ChildDeletion;\n                } else {\n                    deletions.push(current);\n                }\n                newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\n                return newWorkInProgress;\n            }\n        }\n        function checkScheduledUpdateOrContext(current, renderLanes) {\n            // Before performing an early bailout, we must check if there are pending\n            // updates or context.\n            var updateLanes = current.lanes;\n            if (includesSomeLane(updateLanes, renderLanes)) {\n                return true;\n            } // No pending update, but because context is propagated lazily, we need\n            return false;\n        }\n        function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\n            // This fiber does not have any pending work. Bailout without entering\n            // the begin phase. There's still some bookkeeping we that needs to be done\n            // in this optimized path, mostly pushing stuff onto the stack.\n            switch(workInProgress.tag){\n                case HostRoot:\n                    pushHostRootContext(workInProgress);\n                    var root = workInProgress.stateNode;\n                    resetHydrationState();\n                    break;\n                case HostComponent:\n                    pushHostContext(workInProgress);\n                    break;\n                case ClassComponent:\n                    {\n                        var Component = workInProgress.type;\n                        if (isContextProvider(Component)) {\n                            pushContextProvider(workInProgress);\n                        }\n                        break;\n                    }\n                case HostPortal:\n                    pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n                    break;\n                case ContextProvider:\n                    {\n                        var newValue = workInProgress.memoizedProps.value;\n                        var context = workInProgress.type._context;\n                        pushProvider(workInProgress, context, newValue);\n                        break;\n                    }\n                case Profiler:\n                    {\n                        // Profiler should only call onRender when one of its descendants actually rendered.\n                        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n                        if (hasChildWork) {\n                            workInProgress.flags |= Update;\n                        }\n                        {\n                            // Reset effect durations for the next eventual effect phase.\n                            // These are reset during render to allow the DevTools commit hook a chance to read them,\n                            var stateNode = workInProgress.stateNode;\n                            stateNode.effectDuration = 0;\n                            stateNode.passiveEffectDuration = 0;\n                        }\n                    }\n                    break;\n                case SuspenseComponent:\n                    {\n                        var state = workInProgress.memoizedState;\n                        if (state !== null) {\n                            {\n                                if (state.dehydrated !== null) {\n                                    pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has\n                                    // been unsuspended it has committed as a resolved Suspense component.\n                                    // If it needs to be retried, it should have work scheduled on it.\n                                    workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we\n                                    // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n                                    return null;\n                                }\n                            }\n                            // whether to retry the primary children, or to skip over it and\n                            // go straight to the fallback. Check the priority of the primary\n                            // child fragment.\n                            var primaryChildFragment = workInProgress.child;\n                            var primaryChildLanes = primaryChildFragment.childLanes;\n                            if (includesSomeLane(renderLanes, primaryChildLanes)) {\n                                // The primary children have pending work. Use the normal path\n                                // to attempt to render the primary children again.\n                                return updateSuspenseComponent(current, workInProgress, renderLanes);\n                            } else {\n                                // The primary child fragment does not have pending work marked\n                                // on it\n                                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient\n                                // priority. Bailout.\n                                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n                                if (child !== null) {\n                                    // The fallback children have pending work. Skip over the\n                                    // primary children and work on the fallback.\n                                    return child.sibling;\n                                } else {\n                                    // Note: We can return `null` here because we already checked\n                                    // whether there were nested context consumers, via the call to\n                                    // `bailoutOnAlreadyFinishedWork` above.\n                                    return null;\n                                }\n                            }\n                        } else {\n                            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));\n                        }\n                        break;\n                    }\n                case SuspenseListComponent:\n                    {\n                        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n                        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n                        if (didSuspendBefore) {\n                            if (_hasChildWork) {\n                                // If something was in fallback state last time, and we have all the\n                                // same children then we're still in progressive loading state.\n                                // Something might get unblocked by state updates or retries in the\n                                // tree which will affect the tail. So we need to use the normal\n                                // path to compute the correct tail.\n                                return updateSuspenseListComponent(current, workInProgress, renderLanes);\n                            } // If none of the children had any work, that means that none of\n                            // them got retried so they'll still be blocked in the same way\n                            // as before. We can fast bail out.\n                            workInProgress.flags |= DidCapture;\n                        } // If nothing suspended before and we're rendering the same children,\n                        // then the tail doesn't matter. Anything new that suspends will work\n                        // in the \"together\" mode, so we can continue from the state we had.\n                        var renderState = workInProgress.memoizedState;\n                        if (renderState !== null) {\n                            // Reset to the \"together\" mode in case we've started a different\n                            // update in the past but didn't complete it.\n                            renderState.rendering = null;\n                            renderState.tail = null;\n                            renderState.lastEffect = null;\n                        }\n                        pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n                        if (_hasChildWork) {\n                            break;\n                        } else {\n                            // If none of the children had any work, that means that none of\n                            // them got retried so they'll still be blocked in the same way\n                            // as before. We can fast bail out.\n                            return null;\n                        }\n                    }\n                case OffscreenComponent:\n                case LegacyHiddenComponent:\n                    {\n                        // Need to check if the tree still needs to be deferred. This is\n                        // almost identical to the logic used in the normal update path,\n                        // so we'll just enter that. The only difference is we'll bail out\n                        // at the next level instead of this one, because the child props\n                        // have not changed. Which is fine.\n                        // TODO: Probably should refactor `beginWork` to split the bailout\n                        // path from the normal path. I'm tempted to do a labeled break here\n                        // but I won't :)\n                        workInProgress.lanes = NoLanes;\n                        return updateOffscreenComponent(current, workInProgress, renderLanes);\n                    }\n            }\n            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n        function beginWork(current, workInProgress, renderLanes) {\n            {\n                if (workInProgress._debugNeedsRemount && current !== null) {\n                    // This will restart the begin phase with a new fiber.\n                    return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));\n                }\n            }\n            if (current !== null) {\n                var oldProps = current.memoizedProps;\n                var newProps = workInProgress.pendingProps;\n                if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) {\n                    // If props or context changed, mark the fiber as having performed work.\n                    // This may be unset if the props are determined to be equal later (memo).\n                    didReceiveUpdate = true;\n                } else {\n                    // Neither props nor legacy context changes. Check if there's a pending\n                    // update or context change.\n                    var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n                    if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there\n                    // may not be work scheduled on `current`, so we check for this flag.\n                    (workInProgress.flags & DidCapture) === NoFlags) {\n                        // No pending updates or context. Bail out now.\n                        didReceiveUpdate = false;\n                        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\n                    }\n                    if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n                        // This is a special case that only exists for legacy mode.\n                        // See https://github.com/facebook/react/pull/19216.\n                        didReceiveUpdate = true;\n                    } else {\n                        // An update was scheduled on this fiber, but there are no new props\n                        // nor legacy context. Set this to false. If an update queue or context\n                        // consumer produces a changed value, it will set this to true. Otherwise,\n                        // the component will assume the children have not changed and bail out.\n                        didReceiveUpdate = false;\n                    }\n                }\n            } else {\n                didReceiveUpdate = false;\n                if (getIsHydrating() && isForkedChild(workInProgress)) {\n                    // Check if this child belongs to a list of muliple children in\n                    // its parent.\n                    //\n                    // In a true multi-threaded implementation, we would render children on\n                    // parallel threads. This would represent the beginning of a new render\n                    // thread for this subtree.\n                    //\n                    // We only use this for id generation during hydration, which is why the\n                    // logic is located in this special branch.\n                    var slotIndex = workInProgress.index;\n                    var numberOfForks = getForksAtLevel();\n                    pushTreeId(workInProgress, numberOfForks, slotIndex);\n                }\n            } // Before entering the begin phase, clear pending update priority.\n            // TODO: This assumes that we're about to evaluate the component and process\n            // the update queue. However, there's an exception: SimpleMemoComponent\n            // sometimes bails out later in the begin phase. This indicates that we should\n            // move this assignment out of the common path and into each branch.\n            workInProgress.lanes = NoLanes;\n            switch(workInProgress.tag){\n                case IndeterminateComponent:\n                    {\n                        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n                    }\n                case LazyComponent:\n                    {\n                        var elementType = workInProgress.elementType;\n                        return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n                    }\n                case FunctionComponent:\n                    {\n                        var Component = workInProgress.type;\n                        var unresolvedProps = workInProgress.pendingProps;\n                        var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n                        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n                    }\n                case ClassComponent:\n                    {\n                        var _Component = workInProgress.type;\n                        var _unresolvedProps = workInProgress.pendingProps;\n                        var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n                        return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);\n                    }\n                case HostRoot:\n                    return updateHostRoot(current, workInProgress, renderLanes);\n                case HostComponent:\n                    return updateHostComponent$1(current, workInProgress, renderLanes);\n                case HostText:\n                    return updateHostText$1(current, workInProgress);\n                case SuspenseComponent:\n                    return updateSuspenseComponent(current, workInProgress, renderLanes);\n                case HostPortal:\n                    return updatePortalComponent(current, workInProgress, renderLanes);\n                case ForwardRef:\n                    {\n                        var type = workInProgress.type;\n                        var _unresolvedProps2 = workInProgress.pendingProps;\n                        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n                        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\n                    }\n                case Fragment:\n                    return updateFragment(current, workInProgress, renderLanes);\n                case Mode:\n                    return updateMode(current, workInProgress, renderLanes);\n                case Profiler:\n                    return updateProfiler(current, workInProgress, renderLanes);\n                case ContextProvider:\n                    return updateContextProvider(current, workInProgress, renderLanes);\n                case ContextConsumer:\n                    return updateContextConsumer(current, workInProgress, renderLanes);\n                case MemoComponent:\n                    {\n                        var _type2 = workInProgress.type;\n                        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n                        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\n                        {\n                            if (workInProgress.type !== workInProgress.elementType) {\n                                var outerPropTypes = _type2.propTypes;\n                                if (outerPropTypes) {\n                                    checkPropTypes(outerPropTypes, _resolvedProps3, \"prop\", getComponentNameFromType(_type2));\n                                }\n                            }\n                        }\n                        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\n                        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);\n                    }\n                case SimpleMemoComponent:\n                    {\n                        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n                    }\n                case IncompleteClassComponent:\n                    {\n                        var _Component2 = workInProgress.type;\n                        var _unresolvedProps4 = workInProgress.pendingProps;\n                        var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);\n                        return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);\n                    }\n                case SuspenseListComponent:\n                    {\n                        return updateSuspenseListComponent(current, workInProgress, renderLanes);\n                    }\n                case ScopeComponent:\n                    {\n                        break;\n                    }\n                case OffscreenComponent:\n                    {\n                        return updateOffscreenComponent(current, workInProgress, renderLanes);\n                    }\n            }\n            throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + \"React. Please file an issue.\");\n        }\n        function unwindWork(current, workInProgress, renderLanes) {\n            // Note: This intentionally doesn't check if we're hydrating because comparing\n            // to the current tree provider fiber is just as fast and less error-prone.\n            // Ideally we would have a special version of the work loop only\n            // for hydration.\n            popTreeContext(workInProgress);\n            switch(workInProgress.tag){\n                case ClassComponent:\n                    {\n                        var Component = workInProgress.type;\n                        if (isContextProvider(Component)) {\n                            popContext(workInProgress);\n                        }\n                        var flags = workInProgress.flags;\n                        if (flags & ShouldCapture) {\n                            workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n                            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                                transferActualDuration(workInProgress);\n                            }\n                            return workInProgress;\n                        }\n                        return null;\n                    }\n                case HostRoot:\n                    {\n                        popHostContainer(workInProgress);\n                        popTopLevelContextObject(workInProgress);\n                        resetWorkInProgressVersions();\n                        var _flags = workInProgress.flags;\n                        if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {\n                            // There was an error during render that wasn't captured by a suspense\n                            // boundary. Do a second pass on the root to unmount the children.\n                            workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\n                            return workInProgress;\n                        } // We unwound to the root without completing it. Exit.\n                        return null;\n                    }\n                case HostComponent:\n                    {\n                        // TODO: popHydrationState\n                        popHostContext(workInProgress);\n                        return null;\n                    }\n                case SuspenseComponent:\n                    {\n                        popSuspenseContext(workInProgress);\n                        {\n                            var suspenseState = workInProgress.memoizedState;\n                            if (suspenseState !== null && suspenseState.dehydrated !== null) {\n                                if (workInProgress.alternate === null) {\n                                    throw new Error(\"Threw in newly mounted dehydrated component. This is likely a bug in \" + \"React. Please file an issue.\");\n                                }\n                                resetHydrationState();\n                            }\n                        }\n                        var _flags2 = workInProgress.flags;\n                        if (_flags2 & ShouldCapture) {\n                            workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n                            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                                transferActualDuration(workInProgress);\n                            }\n                            return workInProgress;\n                        }\n                        return null;\n                    }\n                case SuspenseListComponent:\n                    {\n                        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n                        // caught by a nested boundary. If not, it should bubble through.\n                        return null;\n                    }\n                case HostPortal:\n                    popHostContainer(workInProgress);\n                    return null;\n                case ContextProvider:\n                    var context = workInProgress.type._context;\n                    popProvider(context, workInProgress);\n                    return null;\n                case OffscreenComponent:\n                case LegacyHiddenComponent:\n                    popRenderLanes(workInProgress);\n                    return null;\n                case CacheComponent:\n                    return null;\n                default:\n                    return null;\n            }\n        }\n        function unwindInterruptedWork(current, interruptedWork, renderLanes) {\n            // Note: This intentionally doesn't check if we're hydrating because comparing\n            // to the current tree provider fiber is just as fast and less error-prone.\n            // Ideally we would have a special version of the work loop only\n            // for hydration.\n            popTreeContext(interruptedWork);\n            switch(interruptedWork.tag){\n                case ClassComponent:\n                    {\n                        var childContextTypes = interruptedWork.type.childContextTypes;\n                        if (childContextTypes !== null && childContextTypes !== undefined) {\n                            popContext(interruptedWork);\n                        }\n                        break;\n                    }\n                case HostRoot:\n                    {\n                        popHostContainer(interruptedWork);\n                        popTopLevelContextObject(interruptedWork);\n                        resetWorkInProgressVersions();\n                        break;\n                    }\n                case HostComponent:\n                    {\n                        popHostContext(interruptedWork);\n                        break;\n                    }\n                case HostPortal:\n                    popHostContainer(interruptedWork);\n                    break;\n                case SuspenseComponent:\n                    popSuspenseContext(interruptedWork);\n                    break;\n                case SuspenseListComponent:\n                    popSuspenseContext(interruptedWork);\n                    break;\n                case ContextProvider:\n                    var context = interruptedWork.type._context;\n                    popProvider(context, interruptedWork);\n                    break;\n                case OffscreenComponent:\n                case LegacyHiddenComponent:\n                    popRenderLanes(interruptedWork);\n                    break;\n            }\n        }\n        function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {\n            var funcArgs = Array.prototype.slice.call(arguments, 3);\n            try {\n                func.apply(context, funcArgs);\n            } catch (error) {\n                this.onError(error);\n            }\n        }\n        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n        {\n            // In DEV mode, we swap out invokeGuardedCallback for a special version\n            // that plays more nicely with the browser's DevTools. The idea is to preserve\n            // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n            // functions in invokeGuardedCallback, and the production version of\n            // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n            // like caught exceptions, and the DevTools won't pause unless the developer\n            // takes the extra step of enabling pause on caught exceptions. This is\n            // unintuitive, though, because even though React has caught the error, from\n            // the developer's perspective, the error is uncaught.\n            //\n            // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n            // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n            // DOM node, and call the user-provided callback from inside an event handler\n            // for that fake event. If the callback throws, the error is \"captured\" using\n            // a global event handler. But because the error happens in a different\n            // event loop context, it does not interrupt the normal program flow.\n            // Effectively, this gives us try-catch behavior without actually using\n            // try-catch. Neat!\n            // Check that the browser supports the APIs we need to implement our special\n            // DEV version of invokeGuardedCallback\n            if (false) { var fakeNode; }\n        }\n        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;\n        var hasError = false;\n        var caughtError = null; // Used by event system to capture/rethrow the first error.\n        var reporter = {\n            onError: function(error) {\n                hasError = true;\n                caughtError = error;\n            }\n        };\n        /**\n * Call a function while guarding against errors that happens within it.\n * Returns an error if it throws, otherwise null.\n *\n * In production, this is implemented using a try-catch. The reason we don't\n * use a try-catch directly is so that we can swap out a different\n * implementation in DEV mode.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n            hasError = false;\n            caughtError = null;\n            invokeGuardedCallbackImpl$1.apply(reporter, arguments);\n        }\n        function hasCaughtError() {\n            return hasError;\n        }\n        function clearCaughtError() {\n            if (hasError) {\n                var error = caughtError;\n                hasError = false;\n                caughtError = null;\n                return error;\n            } else {\n                throw new Error(\"clearCaughtError was called but no error was captured. This error \" + \"is likely caused by a bug in React. Please file an issue.\");\n            }\n        }\n        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n        {\n            didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n        }\n        // Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n        // Only used when enableSuspenseLayoutEffectSemantics is enabled.\n        var offscreenSubtreeIsHidden = false;\n        var offscreenSubtreeWasHidden = false;\n        var PossiblyWeakSet = typeof WeakSet === \"function\" ? WeakSet : Set;\n        var nextEffect = null; // Used for Profiling builds to track updaters.\n        var inProgressLanes = null;\n        var inProgressRoot = null;\n        function reportUncaughtErrorInDEV(error) {\n            // Wrapping each small part of the commit phase into a guarded\n            // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n            // But we rely on it to surface errors to DEV tools like overlays\n            // (https://github.com/facebook/react/issues/21712).\n            // As a compromise, rethrow only caught errors in a guard.\n            {\n                invokeGuardedCallback(null, function() {\n                    throw error;\n                });\n                clearCaughtError();\n            }\n        }\n        var callComponentWillUnmountWithTimer = function(current, instance) {\n            instance.props = current.memoizedProps;\n            instance.state = current.memoizedState;\n            if (current.mode & ProfileMode) {\n                try {\n                    startLayoutEffectTimer();\n                    instance.componentWillUnmount();\n                } finally{\n                    recordLayoutEffectDuration(current);\n                }\n            } else {\n                instance.componentWillUnmount();\n            }\n        }; // Capture errors so they don't interrupt mounting.\n        function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {\n            try {\n                commitHookEffectListMount(Layout, current);\n            } catch (error) {\n                reportUncaughtErrorInDEV(error);\n                captureCommitPhaseError(current, nearestMountedAncestor, error);\n            }\n        } // Capture errors so they don't interrupt unmounting.\n        function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\n            try {\n                callComponentWillUnmountWithTimer(current, instance);\n            } catch (error) {\n                reportUncaughtErrorInDEV(error);\n                captureCommitPhaseError(current, nearestMountedAncestor, error);\n            }\n        } // Capture errors so they don't interrupt mounting.\n        function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {\n            try {\n                instance.componentDidMount();\n            } catch (error) {\n                reportUncaughtErrorInDEV(error);\n                captureCommitPhaseError(current, nearestMountedAncestor, error);\n            }\n        } // Capture errors so they don't interrupt mounting.\n        function safelyAttachRef(current, nearestMountedAncestor) {\n            try {\n                commitAttachRef(current);\n            } catch (error) {\n                reportUncaughtErrorInDEV(error);\n                captureCommitPhaseError(current, nearestMountedAncestor, error);\n            }\n        }\n        function safelyDetachRef(current, nearestMountedAncestor) {\n            var ref = current.ref;\n            if (ref !== null) {\n                if (typeof ref === \"function\") {\n                    var retVal;\n                    try {\n                        if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {\n                            try {\n                                startLayoutEffectTimer();\n                                retVal = ref(null);\n                            } finally{\n                                recordLayoutEffectDuration(current);\n                            }\n                        } else {\n                            retVal = ref(null);\n                        }\n                    } catch (error) {\n                        reportUncaughtErrorInDEV(error);\n                        captureCommitPhaseError(current, nearestMountedAncestor, error);\n                    }\n                    {\n                        if (typeof retVal === \"function\") {\n                            error(\"Unexpected return value from a callback ref in %s. \" + \"A callback ref should not return a function.\", getComponentNameFromFiber(current));\n                        }\n                    }\n                } else {\n                    ref.current = null;\n                }\n            }\n        }\n        function safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n            try {\n                destroy();\n            } catch (error) {\n                reportUncaughtErrorInDEV(error);\n                captureCommitPhaseError(current, nearestMountedAncestor, error);\n            }\n        }\n        var focusedInstanceHandle = null;\n        var shouldFireAfterActiveInstanceBlur = false;\n        function commitBeforeMutationEffects(root, firstChild) {\n            focusedInstanceHandle = prepareForCommit(root.containerInfo);\n            nextEffect = firstChild;\n            commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\n            var shouldFire = shouldFireAfterActiveInstanceBlur;\n            shouldFireAfterActiveInstanceBlur = false;\n            focusedInstanceHandle = null;\n            return shouldFire;\n        }\n        function commitBeforeMutationEffects_begin() {\n            while(nextEffect !== null){\n                var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\n                var child = fiber.child;\n                if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {\n                    ensureCorrectReturnPointer(child, fiber);\n                    nextEffect = child;\n                } else {\n                    commitBeforeMutationEffects_complete();\n                }\n            }\n        }\n        function commitBeforeMutationEffects_complete() {\n            while(nextEffect !== null){\n                var fiber = nextEffect;\n                setCurrentFiber(fiber);\n                try {\n                    commitBeforeMutationEffectsOnFiber(fiber);\n                } catch (error) {\n                    reportUncaughtErrorInDEV(error);\n                    captureCommitPhaseError(fiber, fiber.return, error);\n                }\n                resetCurrentFiber();\n                var sibling = fiber.sibling;\n                if (sibling !== null) {\n                    ensureCorrectReturnPointer(sibling, fiber.return);\n                    nextEffect = sibling;\n                    return;\n                }\n                nextEffect = fiber.return;\n            }\n        }\n        function commitBeforeMutationEffectsOnFiber(finishedWork) {\n            var current = finishedWork.alternate;\n            var flags = finishedWork.flags;\n            if ((flags & Snapshot) !== NoFlags) {\n                setCurrentFiber(finishedWork);\n                switch(finishedWork.tag){\n                    case FunctionComponent:\n                    case ForwardRef:\n                    case SimpleMemoComponent:\n                        {\n                            break;\n                        }\n                    case ClassComponent:\n                        {\n                            if (current !== null) {\n                                var prevProps = current.memoizedProps;\n                                var prevState = current.memoizedState;\n                                var instance = finishedWork.stateNode; // We could update instance props and state here,\n                                // but instead we rely on them being set during last render.\n                                // TODO: revisit this when we implement resuming.\n                                {\n                                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                                        if (instance.props !== finishedWork.memoizedProps) {\n                                            error(\"Expected %s props to match memoized props before \" + \"getSnapshotBeforeUpdate. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.props`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n                                        }\n                                        if (instance.state !== finishedWork.memoizedState) {\n                                            error(\"Expected %s state to match memoized state before \" + \"getSnapshotBeforeUpdate. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.state`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n                                        }\n                                    }\n                                }\n                                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n                                {\n                                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n                                    if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n                                        didWarnSet.add(finishedWork.type);\n                                        error(\"%s.getSnapshotBeforeUpdate(): A snapshot value (or null) \" + \"must be returned. You have returned undefined.\", getComponentNameFromFiber(finishedWork));\n                                    }\n                                }\n                                instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n                            }\n                            break;\n                        }\n                    case HostRoot:\n                        {\n                            if (supportsMutation) {\n                                var root = finishedWork.stateNode;\n                                clearContainer(root.containerInfo);\n                            }\n                            break;\n                        }\n                    case HostComponent:\n                    case HostText:\n                    case HostPortal:\n                    case IncompleteClassComponent:\n                        break;\n                    default:\n                        {\n                            throw new Error(\"This unit of work tag should not have side-effects. This error is \" + \"likely caused by a bug in React. Please file an issue.\");\n                        }\n                }\n                resetCurrentFiber();\n            }\n        }\n        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\n            var updateQueue = finishedWork.updateQueue;\n            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n            if (lastEffect !== null) {\n                var firstEffect = lastEffect.next;\n                var effect = firstEffect;\n                do {\n                    if ((effect.tag & flags) === flags) {\n                        // Unmount\n                        var destroy = effect.destroy;\n                        effect.destroy = undefined;\n                        if (destroy !== undefined) {\n                            {\n                                if ((flags & Passive$1) !== NoFlags$1) {\n                                    markComponentPassiveEffectUnmountStarted(finishedWork);\n                                } else if ((flags & Layout) !== NoFlags$1) {\n                                    markComponentLayoutEffectUnmountStarted(finishedWork);\n                                }\n                            }\n                            safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n                            {\n                                if ((flags & Passive$1) !== NoFlags$1) {\n                                    markComponentPassiveEffectUnmountStopped();\n                                } else if ((flags & Layout) !== NoFlags$1) {\n                                    markComponentLayoutEffectUnmountStopped();\n                                }\n                            }\n                        }\n                    }\n                    effect = effect.next;\n                }while (effect !== firstEffect);\n            }\n        }\n        function commitHookEffectListMount(flags, finishedWork) {\n            var updateQueue = finishedWork.updateQueue;\n            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n            if (lastEffect !== null) {\n                var firstEffect = lastEffect.next;\n                var effect = firstEffect;\n                do {\n                    if ((effect.tag & flags) === flags) {\n                        {\n                            if ((flags & Passive$1) !== NoFlags$1) {\n                                markComponentPassiveEffectMountStarted(finishedWork);\n                            } else if ((flags & Layout) !== NoFlags$1) {\n                                markComponentLayoutEffectMountStarted(finishedWork);\n                            }\n                        }\n                        var create = effect.create;\n                        effect.destroy = create();\n                        {\n                            if ((flags & Passive$1) !== NoFlags$1) {\n                                markComponentPassiveEffectMountStopped();\n                            } else if ((flags & Layout) !== NoFlags$1) {\n                                markComponentLayoutEffectMountStopped();\n                            }\n                        }\n                        {\n                            var destroy = effect.destroy;\n                            if (destroy !== undefined && typeof destroy !== \"function\") {\n                                var hookName = void 0;\n                                if ((effect.tag & Layout) !== NoFlags) {\n                                    hookName = \"useLayoutEffect\";\n                                } else if ((effect.tag & Insertion) !== NoFlags) {\n                                    hookName = \"useInsertionEffect\";\n                                } else {\n                                    hookName = \"useEffect\";\n                                }\n                                var addendum = void 0;\n                                if (destroy === null) {\n                                    addendum = \" You returned null. If your effect does not require clean \" + \"up, return undefined (or nothing).\";\n                                } else if (typeof destroy.then === \"function\") {\n                                    addendum = \"\\n\\nIt looks like you wrote \" + hookName + \"(async () => ...) or returned a Promise. \" + \"Instead, write the async function inside your effect \" + \"and call it immediately:\\n\\n\" + hookName + \"(() => {\\n\" + \"  async function fetchData() {\\n\" + \"    // You can await here\\n\" + \"    const response = await MyAPI.getData(someId);\\n\" + \"    // ...\\n\" + \"  }\\n\" + \"  fetchData();\\n\" + \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" + \"Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching\";\n                                } else {\n                                    addendum = \" You returned: \" + destroy;\n                                }\n                                error(\"%s must not return anything besides a function, \" + \"which is used for clean-up.%s\", hookName, addendum);\n                            }\n                        }\n                    }\n                    effect = effect.next;\n                }while (effect !== firstEffect);\n            }\n        }\n        function commitPassiveEffectDurations(finishedRoot, finishedWork) {\n            {\n                // Only Profilers with work in their subtree will have an Update effect scheduled.\n                if ((finishedWork.flags & Update) !== NoFlags) {\n                    switch(finishedWork.tag){\n                        case Profiler:\n                            {\n                                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;\n                                var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.\n                                // It does not get reset until the start of the next commit phase.\n                                var commitTime = getCommitTime();\n                                var phase = finishedWork.alternate === null ? \"mount\" : \"update\";\n                                {\n                                    if (isCurrentUpdateNested()) {\n                                        phase = \"nested-update\";\n                                    }\n                                }\n                                if (typeof onPostCommit === \"function\") {\n                                    onPostCommit(id, phase, passiveEffectDuration, commitTime);\n                                } // Bubble times to the next nearest ancestor Profiler.\n                                // After we process that Profiler, we'll bubble further up.\n                                var parentFiber = finishedWork.return;\n                                outer: while(parentFiber !== null){\n                                    switch(parentFiber.tag){\n                                        case HostRoot:\n                                            var root = parentFiber.stateNode;\n                                            root.passiveEffectDuration += passiveEffectDuration;\n                                            break outer;\n                                        case Profiler:\n                                            var parentStateNode = parentFiber.stateNode;\n                                            parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                                            break outer;\n                                    }\n                                    parentFiber = parentFiber.return;\n                                }\n                                break;\n                            }\n                    }\n                }\n            }\n        }\n        function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\n            if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n                switch(finishedWork.tag){\n                    case FunctionComponent:\n                    case ForwardRef:\n                    case SimpleMemoComponent:\n                        {\n                            if (!offscreenSubtreeWasHidden) {\n                                // At this point layout effects have already been destroyed (during mutation phase).\n                                // This is done to prevent sibling component effects from interfering with each other,\n                                // e.g. a destroy function in one component should never override a ref set\n                                // by a create function in another component during the same commit.\n                                if (finishedWork.mode & ProfileMode) {\n                                    try {\n                                        startLayoutEffectTimer();\n                                        commitHookEffectListMount(Layout | HasEffect, finishedWork);\n                                    } finally{\n                                        recordLayoutEffectDuration(finishedWork);\n                                    }\n                                } else {\n                                    commitHookEffectListMount(Layout | HasEffect, finishedWork);\n                                }\n                            }\n                            break;\n                        }\n                    case ClassComponent:\n                        {\n                            var instance = finishedWork.stateNode;\n                            if (finishedWork.flags & Update) {\n                                if (!offscreenSubtreeWasHidden) {\n                                    if (current === null) {\n                                        // We could update instance props and state here,\n                                        // but instead we rely on them being set during last render.\n                                        // TODO: revisit this when we implement resuming.\n                                        {\n                                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                                                if (instance.props !== finishedWork.memoizedProps) {\n                                                    error(\"Expected %s props to match memoized props before \" + \"componentDidMount. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.props`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n                                                }\n                                                if (instance.state !== finishedWork.memoizedState) {\n                                                    error(\"Expected %s state to match memoized state before \" + \"componentDidMount. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.state`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n                                                }\n                                            }\n                                        }\n                                        if (finishedWork.mode & ProfileMode) {\n                                            try {\n                                                startLayoutEffectTimer();\n                                                instance.componentDidMount();\n                                            } finally{\n                                                recordLayoutEffectDuration(finishedWork);\n                                            }\n                                        } else {\n                                            instance.componentDidMount();\n                                        }\n                                    } else {\n                                        var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n                                        var prevState = current.memoizedState; // We could update instance props and state here,\n                                        // but instead we rely on them being set during last render.\n                                        // TODO: revisit this when we implement resuming.\n                                        {\n                                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                                                if (instance.props !== finishedWork.memoizedProps) {\n                                                    error(\"Expected %s props to match memoized props before \" + \"componentDidUpdate. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.props`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n                                                }\n                                                if (instance.state !== finishedWork.memoizedState) {\n                                                    error(\"Expected %s state to match memoized state before \" + \"componentDidUpdate. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.state`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n                                                }\n                                            }\n                                        }\n                                        if (finishedWork.mode & ProfileMode) {\n                                            try {\n                                                startLayoutEffectTimer();\n                                                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                                            } finally{\n                                                recordLayoutEffectDuration(finishedWork);\n                                            }\n                                        } else {\n                                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                                        }\n                                    }\n                                }\n                            } // TODO: I think this is now always non-null by the time it reaches the\n                            // commit phase. Consider removing the type check.\n                            var updateQueue = finishedWork.updateQueue;\n                            if (updateQueue !== null) {\n                                {\n                                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                                        if (instance.props !== finishedWork.memoizedProps) {\n                                            error(\"Expected %s props to match memoized props before \" + \"processing the update queue. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.props`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n                                        }\n                                        if (instance.state !== finishedWork.memoizedState) {\n                                            error(\"Expected %s state to match memoized state before \" + \"processing the update queue. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.state`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n                                        }\n                                    }\n                                }\n                                // but instead we rely on them being set during last render.\n                                // TODO: revisit this when we implement resuming.\n                                commitUpdateQueue(finishedWork, updateQueue, instance);\n                            }\n                            break;\n                        }\n                    case HostRoot:\n                        {\n                            // TODO: I think this is now always non-null by the time it reaches the\n                            // commit phase. Consider removing the type check.\n                            var _updateQueue = finishedWork.updateQueue;\n                            if (_updateQueue !== null) {\n                                var _instance = null;\n                                if (finishedWork.child !== null) {\n                                    switch(finishedWork.child.tag){\n                                        case HostComponent:\n                                            _instance = getPublicInstance(finishedWork.child.stateNode);\n                                            break;\n                                        case ClassComponent:\n                                            _instance = finishedWork.child.stateNode;\n                                            break;\n                                    }\n                                }\n                                commitUpdateQueue(finishedWork, _updateQueue, _instance);\n                            }\n                            break;\n                        }\n                    case HostComponent:\n                        {\n                            var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted\n                            // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n                            // These effects should only be committed when components are first mounted,\n                            // aka when there is no current/alternate.\n                            if (current === null && finishedWork.flags & Update) {\n                                var type = finishedWork.type;\n                                var props = finishedWork.memoizedProps;\n                                commitMount(_instance2, type, props, finishedWork);\n                            }\n                            break;\n                        }\n                    case HostText:\n                        {\n                            break;\n                        }\n                    case HostPortal:\n                        {\n                            break;\n                        }\n                    case Profiler:\n                        {\n                            {\n                                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;\n                                var effectDuration = finishedWork.stateNode.effectDuration;\n                                var commitTime = getCommitTime();\n                                var phase = current === null ? \"mount\" : \"update\";\n                                {\n                                    if (isCurrentUpdateNested()) {\n                                        phase = \"nested-update\";\n                                    }\n                                }\n                                if (typeof onRender === \"function\") {\n                                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);\n                                }\n                                {\n                                    if (typeof onCommit === \"function\") {\n                                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);\n                                    } // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n                                    // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n                                    // because the effect is also where times bubble to parent Profilers.\n                                    enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.\n                                    // Do not reset these values until the next render so DevTools has a chance to read them first.\n                                    var parentFiber = finishedWork.return;\n                                    outer: while(parentFiber !== null){\n                                        switch(parentFiber.tag){\n                                            case HostRoot:\n                                                var root = parentFiber.stateNode;\n                                                root.effectDuration += effectDuration;\n                                                break outer;\n                                            case Profiler:\n                                                var parentStateNode = parentFiber.stateNode;\n                                                parentStateNode.effectDuration += effectDuration;\n                                                break outer;\n                                        }\n                                        parentFiber = parentFiber.return;\n                                    }\n                                }\n                            }\n                            break;\n                        }\n                    case SuspenseComponent:\n                        {\n                            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n                            break;\n                        }\n                    case SuspenseListComponent:\n                    case IncompleteClassComponent:\n                    case ScopeComponent:\n                    case OffscreenComponent:\n                    case LegacyHiddenComponent:\n                        {\n                            break;\n                        }\n                    default:\n                        throw new Error(\"This unit of work tag should not have side-effects. This error is \" + \"likely caused by a bug in React. Please file an issue.\");\n                }\n            }\n            if (!offscreenSubtreeWasHidden) {\n                {\n                    if (finishedWork.flags & Ref) {\n                        commitAttachRef(finishedWork);\n                    }\n                }\n            }\n        }\n        function reappearLayoutEffectsOnFiber(node) {\n            // Turn on layout effects in a tree that previously disappeared.\n            // TODO (Offscreen) Check: flags & LayoutStatic\n            switch(node.tag){\n                case FunctionComponent:\n                case ForwardRef:\n                case SimpleMemoComponent:\n                    {\n                        if (node.mode & ProfileMode) {\n                            try {\n                                startLayoutEffectTimer();\n                                safelyCallCommitHookLayoutEffectListMount(node, node.return);\n                            } finally{\n                                recordLayoutEffectDuration(node);\n                            }\n                        } else {\n                            safelyCallCommitHookLayoutEffectListMount(node, node.return);\n                        }\n                        break;\n                    }\n                case ClassComponent:\n                    {\n                        var instance = node.stateNode;\n                        if (typeof instance.componentDidMount === \"function\") {\n                            safelyCallComponentDidMount(node, node.return, instance);\n                        }\n                        safelyAttachRef(node, node.return);\n                        break;\n                    }\n                case HostComponent:\n                    {\n                        safelyAttachRef(node, node.return);\n                        break;\n                    }\n            }\n        }\n        function hideOrUnhideAllChildren(finishedWork, isHidden) {\n            // Only hide or unhide the top-most host nodes.\n            var hostSubtreeRoot = null;\n            if (supportsMutation) {\n                // We only have the top Fiber that was inserted but we need to recurse down its\n                // children to find all the terminal nodes.\n                var node = finishedWork;\n                while(true){\n                    if (node.tag === HostComponent) {\n                        if (hostSubtreeRoot === null) {\n                            hostSubtreeRoot = node;\n                            var instance = node.stateNode;\n                            if (isHidden) {\n                                hideInstance(instance);\n                            } else {\n                                unhideInstance(node.stateNode, node.memoizedProps);\n                            }\n                        }\n                    } else if (node.tag === HostText) {\n                        if (hostSubtreeRoot === null) {\n                            var _instance3 = node.stateNode;\n                            if (isHidden) {\n                                hideTextInstance(_instance3);\n                            } else {\n                                unhideTextInstance(_instance3, node.memoizedProps);\n                            }\n                        }\n                    } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;\n                    else if (node.child !== null) {\n                        node.child.return = node;\n                        node = node.child;\n                        continue;\n                    }\n                    if (node === finishedWork) {\n                        return;\n                    }\n                    while(node.sibling === null){\n                        if (node.return === null || node.return === finishedWork) {\n                            return;\n                        }\n                        if (hostSubtreeRoot === node) {\n                            hostSubtreeRoot = null;\n                        }\n                        node = node.return;\n                    }\n                    if (hostSubtreeRoot === node) {\n                        hostSubtreeRoot = null;\n                    }\n                    node.sibling.return = node.return;\n                    node = node.sibling;\n                }\n            }\n        }\n        function commitAttachRef(finishedWork) {\n            var ref = finishedWork.ref;\n            if (ref !== null) {\n                var instance = finishedWork.stateNode;\n                var instanceToUse;\n                switch(finishedWork.tag){\n                    case HostComponent:\n                        instanceToUse = getPublicInstance(instance);\n                        break;\n                    default:\n                        instanceToUse = instance;\n                } // Moved outside to ensure DCE works with this flag\n                if (typeof ref === \"function\") {\n                    var retVal;\n                    if (finishedWork.mode & ProfileMode) {\n                        try {\n                            startLayoutEffectTimer();\n                            retVal = ref(instanceToUse);\n                        } finally{\n                            recordLayoutEffectDuration(finishedWork);\n                        }\n                    } else {\n                        retVal = ref(instanceToUse);\n                    }\n                    {\n                        if (typeof retVal === \"function\") {\n                            error(\"Unexpected return value from a callback ref in %s. \" + \"A callback ref should not return a function.\", getComponentNameFromFiber(finishedWork));\n                        }\n                    }\n                } else {\n                    {\n                        if (!ref.hasOwnProperty(\"current\")) {\n                            error(\"Unexpected ref object provided for %s. \" + \"Use either a ref-setter function or React.createRef().\", getComponentNameFromFiber(finishedWork));\n                        }\n                    }\n                    ref.current = instanceToUse;\n                }\n            }\n        }\n        function commitDetachRef(current) {\n            var currentRef = current.ref;\n            if (currentRef !== null) {\n                if (typeof currentRef === \"function\") {\n                    if (current.mode & ProfileMode) {\n                        try {\n                            startLayoutEffectTimer();\n                            currentRef(null);\n                        } finally{\n                            recordLayoutEffectDuration(current);\n                        }\n                    } else {\n                        currentRef(null);\n                    }\n                } else {\n                    currentRef.current = null;\n                }\n            }\n        } // User-originating errors (lifecycles and refs) should not interrupt\n        // deletion, so don't let them throw. Host-originating errors should\n        // interrupt deletion, so it's okay\n        function commitUnmount(finishedRoot, current, nearestMountedAncestor) {\n            onCommitUnmount(current);\n            switch(current.tag){\n                case FunctionComponent:\n                case ForwardRef:\n                case MemoComponent:\n                case SimpleMemoComponent:\n                    {\n                        var updateQueue = current.updateQueue;\n                        if (updateQueue !== null) {\n                            var lastEffect = updateQueue.lastEffect;\n                            if (lastEffect !== null) {\n                                var firstEffect = lastEffect.next;\n                                var effect = firstEffect;\n                                do {\n                                    var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;\n                                    if (destroy !== undefined) {\n                                        if ((tag & Insertion) !== NoFlags$1) {\n                                            safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                                        } else if ((tag & Layout) !== NoFlags$1) {\n                                            {\n                                                markComponentLayoutEffectUnmountStarted(current);\n                                            }\n                                            if (current.mode & ProfileMode) {\n                                                startLayoutEffectTimer();\n                                                safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                                                recordLayoutEffectDuration(current);\n                                            } else {\n                                                safelyCallDestroy(current, nearestMountedAncestor, destroy);\n                                            }\n                                            {\n                                                markComponentLayoutEffectUnmountStopped();\n                                            }\n                                        }\n                                    }\n                                    effect = effect.next;\n                                }while (effect !== firstEffect);\n                            }\n                        }\n                        return;\n                    }\n                case ClassComponent:\n                    {\n                        safelyDetachRef(current, nearestMountedAncestor);\n                        var instance = current.stateNode;\n                        if (typeof instance.componentWillUnmount === \"function\") {\n                            safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance);\n                        }\n                        return;\n                    }\n                case HostComponent:\n                    {\n                        safelyDetachRef(current, nearestMountedAncestor);\n                        return;\n                    }\n                case HostPortal:\n                    {\n                        // TODO: this is recursive.\n                        // We are also not using this parent because\n                        // the portal will get pushed immediately.\n                        if (supportsMutation) {\n                            unmountHostComponents(finishedRoot, current, nearestMountedAncestor);\n                        } else if (supportsPersistence) {\n                            emptyPortalContainer(current);\n                        }\n                        return;\n                    }\n                case DehydratedFragment:\n                    {\n                        return;\n                    }\n                case ScopeComponent:\n                    {\n                        return;\n                    }\n            }\n        }\n        function commitNestedUnmounts(finishedRoot, root, nearestMountedAncestor) {\n            // While we're inside a removed host node we don't want to call\n            // removeChild on the inner nodes because they're removed by the top\n            // call anyway. We also want to call componentWillUnmount on all\n            // composites before this host node is removed from the tree. Therefore\n            // we do an inner loop while we're still inside the host node.\n            var node = root;\n            while(true){\n                commitUnmount(finishedRoot, node, nearestMountedAncestor); // Visit children because they may contain more composite or host nodes.\n                // Skip portals because commitUnmount() currently visits them recursively.\n                if (node.child !== null && // If we don't use mutation we drill down into portals here instead.\n                (!supportsMutation || node.tag !== HostPortal)) {\n                    node.child.return = node;\n                    node = node.child;\n                    continue;\n                }\n                if (node === root) {\n                    return;\n                }\n                while(node.sibling === null){\n                    if (node.return === null || node.return === root) {\n                        return;\n                    }\n                    node = node.return;\n                }\n                node.sibling.return = node.return;\n                node = node.sibling;\n            }\n        }\n        function detachFiberMutation(fiber) {\n            // Cut off the return pointer to disconnect it from the tree.\n            // This enables us to detect and warn against state updates on an unmounted component.\n            // It also prevents events from bubbling from within disconnected components.\n            //\n            // Ideally, we should also clear the child pointer of the parent alternate to let this\n            // get GC:ed but we don't know which for sure which parent is the current\n            // one so we'll settle for GC:ing the subtree of this child.\n            // This child itself will be GC:ed when the parent updates the next time.\n            //\n            // Note that we can't clear child or sibling pointers yet.\n            // They're needed for passive effects and for findDOMNode.\n            // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n            //\n            // Don't reset the alternate yet, either. We need that so we can detach the\n            // alternate's fields in the passive phase. Clearing the return pointer is\n            // sufficient for findDOMNode semantics.\n            var alternate = fiber.alternate;\n            if (alternate !== null) {\n                alternate.return = null;\n            }\n            fiber.return = null;\n        }\n        function detachFiberAfterEffects(fiber) {\n            var alternate = fiber.alternate;\n            if (alternate !== null) {\n                fiber.alternate = null;\n                detachFiberAfterEffects(alternate);\n            } // Note: Defensively using negation instead of < in case\n            // `deletedTreeCleanUpLevel` is undefined.\n            {\n                // Clear cyclical Fiber fields. This level alone is designed to roughly\n                // approximate the planned Fiber refactor. In that world, `setState` will be\n                // bound to a special \"instance\" object instead of a Fiber. The Instance\n                // object will not have any of these fields. It will only be connected to\n                // the fiber tree via a single link at the root. So if this level alone is\n                // sufficient to fix memory issues, that bodes well for our plans.\n                fiber.child = null;\n                fiber.deletions = null;\n                fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\n                // tree, which has its own pointers to children, parents, and siblings.\n                // The other host nodes also point back to fibers, so we should detach that\n                // one, too.\n                if (fiber.tag === HostComponent) {\n                    var hostInstance = fiber.stateNode;\n                    if (hostInstance !== null) {\n                        detachDeletedInstance(hostInstance);\n                    }\n                }\n                fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We\n                // already disconnect the `return` pointer at the root of the deleted\n                // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n                // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n                // `alternate`. But we'll clear it in the next level anyway, just in case.\n                {\n                    fiber._debugOwner = null;\n                }\n                {\n                    // Theoretically, nothing in here should be necessary, because we already\n                    // disconnected the fiber from the tree. So even if something leaks this\n                    // particular fiber, it won't leak anything else\n                    //\n                    // The purpose of this branch is to be super aggressive so we can measure\n                    // if there's any difference in memory impact. If there is, that could\n                    // indicate a React leak we don't know about.\n                    fiber.return = null;\n                    fiber.dependencies = null;\n                    fiber.memoizedProps = null;\n                    fiber.memoizedState = null;\n                    fiber.pendingProps = null;\n                    fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n                    fiber.updateQueue = null;\n                }\n            }\n        }\n        function emptyPortalContainer(current) {\n            if (!supportsPersistence) {\n                return;\n            }\n            var portal = current.stateNode;\n            var containerInfo = portal.containerInfo;\n            var emptyChildSet = createContainerChildSet(containerInfo);\n            replaceContainerChildren(containerInfo, emptyChildSet);\n        }\n        function commitContainer(finishedWork) {\n            if (!supportsPersistence) {\n                return;\n            }\n            switch(finishedWork.tag){\n                case ClassComponent:\n                case HostComponent:\n                case HostText:\n                    {\n                        return;\n                    }\n                case HostRoot:\n                case HostPortal:\n                    {\n                        var portalOrRoot = finishedWork.stateNode;\n                        var containerInfo = portalOrRoot.containerInfo, pendingChildren = portalOrRoot.pendingChildren;\n                        replaceContainerChildren(containerInfo, pendingChildren);\n                        return;\n                    }\n            }\n            throw new Error(\"This unit of work tag should not have side-effects. This error is \" + \"likely caused by a bug in React. Please file an issue.\");\n        }\n        function getHostParentFiber(fiber) {\n            var parent = fiber.return;\n            while(parent !== null){\n                if (isHostParent(parent)) {\n                    return parent;\n                }\n                parent = parent.return;\n            }\n            throw new Error(\"Expected to find a host parent. This error is likely caused by a bug \" + \"in React. Please file an issue.\");\n        }\n        function isHostParent(fiber) {\n            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;\n        }\n        function getHostSibling(fiber) {\n            // We're going to search forward into the tree until we find a sibling host\n            // node. Unfortunately, if multiple insertions are done in a row we have to\n            // search past them. This leads to exponential search for the next sibling.\n            // TODO: Find a more efficient way to do this.\n            var node = fiber;\n            siblings: while(true){\n                // If we didn't find anything, let's try the next sibling.\n                while(node.sibling === null){\n                    if (node.return === null || isHostParent(node.return)) {\n                        // If we pop out of the root or hit the parent the fiber we are the\n                        // last sibling.\n                        return null;\n                    }\n                    node = node.return;\n                }\n                node.sibling.return = node.return;\n                node = node.sibling;\n                while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){\n                    // If it is not host node and, we might have a host node inside it.\n                    // Try to search down until we find one.\n                    if (node.flags & Placement) {\n                        continue siblings;\n                    } // If we don't have a child, try the siblings instead.\n                    // We also skip portals because they are not part of this host tree.\n                    if (node.child === null || node.tag === HostPortal) {\n                        continue siblings;\n                    } else {\n                        node.child.return = node;\n                        node = node.child;\n                    }\n                } // Check if this host node is stable or about to be placed.\n                if (!(node.flags & Placement)) {\n                    // Found it!\n                    return node.stateNode;\n                }\n            }\n        }\n        function commitPlacement(finishedWork) {\n            if (!supportsMutation) {\n                return;\n            } // Recursively insert all host nodes into the parent.\n            var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.\n            switch(parentFiber.tag){\n                case HostComponent:\n                    {\n                        var parent = parentFiber.stateNode;\n                        if (parentFiber.flags & ContentReset) {\n                            // Reset the text content of the parent before doing any insertions\n                            resetTextContent(parent); // Clear ContentReset from the effect tag\n                            parentFiber.flags &= ~ContentReset;\n                        }\n                        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n                        // children to find all the terminal nodes.\n                        insertOrAppendPlacementNode(finishedWork, before, parent);\n                        break;\n                    }\n                case HostRoot:\n                case HostPortal:\n                    {\n                        var _parent = parentFiber.stateNode.containerInfo;\n                        var _before = getHostSibling(finishedWork);\n                        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);\n                        break;\n                    }\n                // eslint-disable-next-line-no-fallthrough\n                default:\n                    throw new Error(\"Invalid host parent fiber. This error is likely caused by a bug \" + \"in React. Please file an issue.\");\n            }\n        }\n        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n            var tag = node.tag;\n            var isHost = tag === HostComponent || tag === HostText;\n            if (isHost) {\n                var stateNode = node.stateNode;\n                if (before) {\n                    insertInContainerBefore(parent, stateNode, before);\n                } else {\n                    appendChildToContainer(parent, stateNode);\n                }\n            } else if (tag === HostPortal) ;\n            else {\n                var child = node.child;\n                if (child !== null) {\n                    insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n                    var sibling = child.sibling;\n                    while(sibling !== null){\n                        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n                        sibling = sibling.sibling;\n                    }\n                }\n            }\n        }\n        function insertOrAppendPlacementNode(node, before, parent) {\n            var tag = node.tag;\n            var isHost = tag === HostComponent || tag === HostText;\n            if (isHost) {\n                var stateNode = node.stateNode;\n                if (before) {\n                    insertBefore(parent, stateNode, before);\n                } else {\n                    appendChild(parent, stateNode);\n                }\n            } else if (tag === HostPortal) ;\n            else {\n                var child = node.child;\n                if (child !== null) {\n                    insertOrAppendPlacementNode(child, before, parent);\n                    var sibling = child.sibling;\n                    while(sibling !== null){\n                        insertOrAppendPlacementNode(sibling, before, parent);\n                        sibling = sibling.sibling;\n                    }\n                }\n            }\n        }\n        function unmountHostComponents(finishedRoot, current, nearestMountedAncestor) {\n            // We only have the top Fiber that was deleted but we need to recurse down its\n            // children to find all the terminal nodes.\n            var node = current; // Each iteration, currentParent is populated with node's host parent if not\n            // currentParentIsValid.\n            var currentParentIsValid = false; // Note: these two variables *must* always be updated together.\n            var currentParent;\n            var currentParentIsContainer;\n            while(true){\n                if (!currentParentIsValid) {\n                    var parent = node.return;\n                    findParent: while(true){\n                        if (parent === null) {\n                            throw new Error(\"Expected to find a host parent. This error is likely caused by \" + \"a bug in React. Please file an issue.\");\n                        }\n                        var parentStateNode = parent.stateNode;\n                        switch(parent.tag){\n                            case HostComponent:\n                                currentParent = parentStateNode;\n                                currentParentIsContainer = false;\n                                break findParent;\n                            case HostRoot:\n                                currentParent = parentStateNode.containerInfo;\n                                currentParentIsContainer = true;\n                                break findParent;\n                            case HostPortal:\n                                currentParent = parentStateNode.containerInfo;\n                                currentParentIsContainer = true;\n                                break findParent;\n                        }\n                        parent = parent.return;\n                    }\n                    currentParentIsValid = true;\n                }\n                if (node.tag === HostComponent || node.tag === HostText) {\n                    commitNestedUnmounts(finishedRoot, node, nearestMountedAncestor); // After all the children have unmounted, it is now safe to remove the\n                    // node from the tree.\n                    if (currentParentIsContainer) {\n                        removeChildFromContainer(currentParent, node.stateNode);\n                    } else {\n                        removeChild(currentParent, node.stateNode);\n                    } // Don't visit children because we already visited them.\n                } else if (node.tag === DehydratedFragment) {\n                    if (currentParentIsContainer) {\n                        clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);\n                    } else {\n                        clearSuspenseBoundary(currentParent, node.stateNode);\n                    }\n                } else if (node.tag === HostPortal) {\n                    if (node.child !== null) {\n                        // When we go into a portal, it becomes the parent to remove from.\n                        // We will reassign it back when we pop the portal on the way up.\n                        currentParent = node.stateNode.containerInfo;\n                        currentParentIsContainer = true; // Visit children because portals might contain host components.\n                        node.child.return = node;\n                        node = node.child;\n                        continue;\n                    }\n                } else {\n                    commitUnmount(finishedRoot, node, nearestMountedAncestor); // Visit children because we may find more host components below.\n                    if (node.child !== null) {\n                        node.child.return = node;\n                        node = node.child;\n                        continue;\n                    }\n                }\n                if (node === current) {\n                    return;\n                }\n                while(node.sibling === null){\n                    if (node.return === null || node.return === current) {\n                        return;\n                    }\n                    node = node.return;\n                    if (node.tag === HostPortal) {\n                        // When we go out of the portal, we need to restore the parent.\n                        // Since we don't keep a stack of them, we will search for it.\n                        currentParentIsValid = false;\n                    }\n                }\n                node.sibling.return = node.return;\n                node = node.sibling;\n            }\n        }\n        function commitDeletion(finishedRoot, current, nearestMountedAncestor) {\n            if (supportsMutation) {\n                // Recursively delete all host nodes from the parent.\n                // Detach refs and call componentWillUnmount() on the whole subtree.\n                unmountHostComponents(finishedRoot, current, nearestMountedAncestor);\n            } else {\n                // Detach refs and call componentWillUnmount() on the whole subtree.\n                commitNestedUnmounts(finishedRoot, current, nearestMountedAncestor);\n            }\n            detachFiberMutation(current);\n        }\n        function commitWork(current, finishedWork) {\n            if (!supportsMutation) {\n                switch(finishedWork.tag){\n                    case FunctionComponent:\n                    case ForwardRef:\n                    case MemoComponent:\n                    case SimpleMemoComponent:\n                        {\n                            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n                            commitHookEffectListMount(Insertion | HasEffect, finishedWork); // Layout effects are destroyed during the mutation phase so that all\n                            // destroy functions for all fibers are called before any create functions.\n                            // This prevents sibling component effects from interfering with each other,\n                            // e.g. a destroy function in one component should never override a ref set\n                            // by a create function in another component during the same commit.\n                            // TODO: Check if we're inside an Offscreen subtree that disappeared\n                            // during this commit. If so, we would have already unmounted its\n                            // layout hooks. (However, since we null out the `destroy` function\n                            // right before calling it, the behavior is already correct, so this\n                            // would mostly be for modeling purposes.)\n                            if (finishedWork.mode & ProfileMode) {\n                                try {\n                                    startLayoutEffectTimer();\n                                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n                                } finally{\n                                    recordLayoutEffectDuration(finishedWork);\n                                }\n                            } else {\n                                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n                            }\n                            return;\n                        }\n                    case Profiler:\n                        {\n                            return;\n                        }\n                    case SuspenseComponent:\n                        {\n                            commitSuspenseCallback(finishedWork);\n                            attachSuspenseRetryListeners(finishedWork);\n                            return;\n                        }\n                    case SuspenseListComponent:\n                        {\n                            attachSuspenseRetryListeners(finishedWork);\n                            return;\n                        }\n                    case HostRoot:\n                        {\n                            if (supportsHydration) {\n                                if (current !== null) {\n                                    var prevRootState = current.memoizedState;\n                                    if (prevRootState.isDehydrated) {\n                                        var root = finishedWork.stateNode;\n                                        commitHydratedContainer(root.containerInfo);\n                                    }\n                                }\n                            }\n                            break;\n                        }\n                    case OffscreenComponent:\n                    case LegacyHiddenComponent:\n                        {\n                            return;\n                        }\n                }\n                commitContainer(finishedWork);\n                return;\n            }\n            switch(finishedWork.tag){\n                case FunctionComponent:\n                case ForwardRef:\n                case MemoComponent:\n                case SimpleMemoComponent:\n                    {\n                        commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n                        commitHookEffectListMount(Insertion | HasEffect, finishedWork); // Layout effects are destroyed during the mutation phase so that all\n                        // destroy functions for all fibers are called before any create functions.\n                        // This prevents sibling component effects from interfering with each other,\n                        // e.g. a destroy function in one component should never override a ref set\n                        // by a create function in another component during the same commit.\n                        if (finishedWork.mode & ProfileMode) {\n                            try {\n                                startLayoutEffectTimer();\n                                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n                            } finally{\n                                recordLayoutEffectDuration(finishedWork);\n                            }\n                        } else {\n                            commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n                        }\n                        return;\n                    }\n                case ClassComponent:\n                    {\n                        return;\n                    }\n                case HostComponent:\n                    {\n                        var instance = finishedWork.stateNode;\n                        if (instance != null) {\n                            // Commit the work prepared earlier.\n                            var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n                            // as the newProps. The updatePayload will contain the real change in\n                            // this case.\n                            var oldProps = current !== null ? current.memoizedProps : newProps;\n                            var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\n                            var updatePayload = finishedWork.updateQueue;\n                            finishedWork.updateQueue = null;\n                            if (updatePayload !== null) {\n                                commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);\n                            }\n                        }\n                        return;\n                    }\n                case HostText:\n                    {\n                        if (finishedWork.stateNode === null) {\n                            throw new Error(\"This should have a text node initialized. This error is likely \" + \"caused by a bug in React. Please file an issue.\");\n                        }\n                        var textInstance = finishedWork.stateNode;\n                        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n                        // as the newProps. The updatePayload will contain the real change in\n                        // this case.\n                        var oldText = current !== null ? current.memoizedProps : newText;\n                        commitTextUpdate(textInstance, oldText, newText);\n                        return;\n                    }\n                case HostRoot:\n                    {\n                        if (supportsHydration) {\n                            if (current !== null) {\n                                var _prevRootState = current.memoizedState;\n                                if (_prevRootState.isDehydrated) {\n                                    var _root = finishedWork.stateNode;\n                                    commitHydratedContainer(_root.containerInfo);\n                                }\n                            }\n                        }\n                        return;\n                    }\n                case Profiler:\n                    {\n                        return;\n                    }\n                case SuspenseComponent:\n                    {\n                        commitSuspenseCallback(finishedWork);\n                        attachSuspenseRetryListeners(finishedWork);\n                        return;\n                    }\n                case SuspenseListComponent:\n                    {\n                        attachSuspenseRetryListeners(finishedWork);\n                        return;\n                    }\n                case IncompleteClassComponent:\n                    {\n                        return;\n                    }\n            }\n            throw new Error(\"This unit of work tag should not have side-effects. This error is \" + \"likely caused by a bug in React. Please file an issue.\");\n        }\n        function commitSuspenseCallback(finishedWork) {\n            // TODO: Move this to passive phase\n            var newState = finishedWork.memoizedState;\n        }\n        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {\n            if (!supportsHydration) {\n                return;\n            }\n            var newState = finishedWork.memoizedState;\n            if (newState === null) {\n                var current = finishedWork.alternate;\n                if (current !== null) {\n                    var prevState = current.memoizedState;\n                    if (prevState !== null) {\n                        var suspenseInstance = prevState.dehydrated;\n                        if (suspenseInstance !== null) {\n                            commitHydratedSuspenseInstance(suspenseInstance);\n                        }\n                    }\n                }\n            }\n        }\n        function attachSuspenseRetryListeners(finishedWork) {\n            // If this boundary just timed out, then it will have a set of wakeables.\n            // For each wakeable, attach a listener so that when it resolves, React\n            // attempts to re-render the boundary in the primary (pre-timeout) state.\n            var wakeables = finishedWork.updateQueue;\n            if (wakeables !== null) {\n                finishedWork.updateQueue = null;\n                var retryCache = finishedWork.stateNode;\n                if (retryCache === null) {\n                    retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n                }\n                wakeables.forEach(function(wakeable) {\n                    // Memoize using the boundary fiber to prevent redundant listeners.\n                    var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n                    if (!retryCache.has(wakeable)) {\n                        retryCache.add(wakeable);\n                        {\n                            if (isDevToolsPresent) {\n                                if (inProgressLanes !== null && inProgressRoot !== null) {\n                                    // If we have pending work still, associate the original updaters with it.\n                                    restorePendingUpdaters(inProgressRoot, inProgressLanes);\n                                } else {\n                                    throw Error(\"Expected finished root and lanes to be set. This is a bug in React.\");\n                                }\n                            }\n                        }\n                        wakeable.then(retry, retry);\n                    }\n                });\n            }\n        } // This function detects when a Suspense boundary goes from visible to hidden.\n        function commitResetTextContent(current) {\n            if (!supportsMutation) {\n                return;\n            }\n            resetTextContent(current.stateNode);\n        }\n        function commitMutationEffects(root, firstChild, committedLanes) {\n            inProgressLanes = committedLanes;\n            inProgressRoot = root;\n            nextEffect = firstChild;\n            commitMutationEffects_begin(root, committedLanes);\n            inProgressLanes = null;\n            inProgressRoot = null;\n        }\n        function commitMutationEffects_begin(root, lanes) {\n            while(nextEffect !== null){\n                var fiber = nextEffect; // TODO: Should wrap this in flags check, too, as optimization\n                var deletions = fiber.deletions;\n                if (deletions !== null) {\n                    for(var i = 0; i < deletions.length; i++){\n                        var childToDelete = deletions[i];\n                        try {\n                            commitDeletion(root, childToDelete, fiber);\n                        } catch (error) {\n                            reportUncaughtErrorInDEV(error);\n                            captureCommitPhaseError(childToDelete, fiber, error);\n                        }\n                    }\n                }\n                var child = fiber.child;\n                if ((fiber.subtreeFlags & MutationMask) !== NoFlags && child !== null) {\n                    ensureCorrectReturnPointer(child, fiber);\n                    nextEffect = child;\n                } else {\n                    commitMutationEffects_complete(root, lanes);\n                }\n            }\n        }\n        function commitMutationEffects_complete(root, lanes) {\n            while(nextEffect !== null){\n                var fiber = nextEffect;\n                setCurrentFiber(fiber);\n                try {\n                    commitMutationEffectsOnFiber(fiber, root, lanes);\n                } catch (error) {\n                    reportUncaughtErrorInDEV(error);\n                    captureCommitPhaseError(fiber, fiber.return, error);\n                }\n                resetCurrentFiber();\n                var sibling = fiber.sibling;\n                if (sibling !== null) {\n                    ensureCorrectReturnPointer(sibling, fiber.return);\n                    nextEffect = sibling;\n                    return;\n                }\n                nextEffect = fiber.return;\n            }\n        }\n        function commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n            // TODO: The factoring of this phase could probably be improved. Consider\n            // switching on the type of work before checking the flags. That's what\n            // we do in all the other phases. I think this one is only different\n            // because of the shared reconciliation logic below.\n            var flags = finishedWork.flags;\n            if (flags & ContentReset) {\n                commitResetTextContent(finishedWork);\n            }\n            if (flags & Ref) {\n                var current = finishedWork.alternate;\n                if (current !== null) {\n                    commitDetachRef(current);\n                }\n            }\n            if (flags & Visibility) {\n                switch(finishedWork.tag){\n                    case SuspenseComponent:\n                        {\n                            var newState = finishedWork.memoizedState;\n                            var isHidden = newState !== null;\n                            if (isHidden) {\n                                var _current = finishedWork.alternate;\n                                var wasHidden = _current !== null && _current.memoizedState !== null;\n                                if (!wasHidden) {\n                                    // TODO: Move to passive phase\n                                    markCommitTimeOfFallback();\n                                }\n                            }\n                            break;\n                        }\n                    case OffscreenComponent:\n                        {\n                            var _newState = finishedWork.memoizedState;\n                            var _isHidden = _newState !== null;\n                            var _current2 = finishedWork.alternate;\n                            var _wasHidden = _current2 !== null && _current2.memoizedState !== null;\n                            var offscreenBoundary = finishedWork;\n                            if (supportsMutation) {\n                                // TODO: This needs to run whenever there's an insertion or update\n                                // inside a hidden Offscreen tree.\n                                hideOrUnhideAllChildren(offscreenBoundary, _isHidden);\n                            }\n                            {\n                                if (_isHidden) {\n                                    if (!_wasHidden) {\n                                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n                                            nextEffect = offscreenBoundary;\n                                            var offscreenChild = offscreenBoundary.child;\n                                            while(offscreenChild !== null){\n                                                nextEffect = offscreenChild;\n                                                disappearLayoutEffects_begin(offscreenChild);\n                                                offscreenChild = offscreenChild.sibling;\n                                            }\n                                        }\n                                    }\n                                }\n                                break;\n                            }\n                        }\n                }\n            } // The following switch statement is only concerned about placement,\n            // updates, and deletions. To avoid needing to add a case for every possible\n            // bitmap value, we remove the secondary effects from the effect tag and\n            // switch on that value.\n            var primaryFlags = flags & (Placement | Update | Hydrating);\n            switch(primaryFlags){\n                case Placement:\n                    {\n                        commitPlacement(finishedWork); // Clear the \"placement\" from effect tag so that we know that this is\n                        // inserted, before any life-cycles like componentDidMount gets called.\n                        // TODO: findDOMNode doesn't rely on this any more but isMounted does\n                        // and isMounted is deprecated anyway so we should be able to kill this.\n                        finishedWork.flags &= ~Placement;\n                        break;\n                    }\n                case PlacementAndUpdate:\n                    {\n                        // Placement\n                        commitPlacement(finishedWork); // Clear the \"placement\" from effect tag so that we know that this is\n                        // inserted, before any life-cycles like componentDidMount gets called.\n                        finishedWork.flags &= ~Placement; // Update\n                        var _current3 = finishedWork.alternate;\n                        commitWork(_current3, finishedWork);\n                        break;\n                    }\n                case Hydrating:\n                    {\n                        finishedWork.flags &= ~Hydrating;\n                        break;\n                    }\n                case HydratingAndUpdate:\n                    {\n                        finishedWork.flags &= ~Hydrating; // Update\n                        var _current4 = finishedWork.alternate;\n                        commitWork(_current4, finishedWork);\n                        break;\n                    }\n                case Update:\n                    {\n                        var _current5 = finishedWork.alternate;\n                        commitWork(_current5, finishedWork);\n                        break;\n                    }\n            }\n        }\n        function commitLayoutEffects(finishedWork, root, committedLanes) {\n            inProgressLanes = committedLanes;\n            inProgressRoot = root;\n            nextEffect = finishedWork;\n            commitLayoutEffects_begin(finishedWork, root, committedLanes);\n            inProgressLanes = null;\n            inProgressRoot = null;\n        }\n        function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {\n            // Suspense layout effects semantics don't change for legacy roots.\n            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n            while(nextEffect !== null){\n                var fiber = nextEffect;\n                var firstChild = fiber.child;\n                if (fiber.tag === OffscreenComponent && isModernRoot) {\n                    // Keep track of the current Offscreen stack's state.\n                    var isHidden = fiber.memoizedState !== null;\n                    var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n                    if (newOffscreenSubtreeIsHidden) {\n                        // The Offscreen tree is hidden. Skip over its layout effects.\n                        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n                        continue;\n                    } else {\n                        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\n                        var current = fiber.alternate;\n                        var wasHidden = current !== null && current.memoizedState !== null;\n                        var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;\n                        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n                        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.\n                        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n                        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n                        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n                            // This is the root of a reappearing boundary. Turn its layout effects\n                            // back on.\n                            nextEffect = fiber;\n                            reappearLayoutEffects_begin(fiber);\n                        }\n                        var child = firstChild;\n                        while(child !== null){\n                            nextEffect = child;\n                            commitLayoutEffects_begin(child, root, committedLanes);\n                            child = child.sibling;\n                        } // Restore Offscreen state and resume in our-progress traversal.\n                        nextEffect = fiber;\n                        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n                        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n                        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n                        continue;\n                    }\n                }\n                if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n                    ensureCorrectReturnPointer(firstChild, fiber);\n                    nextEffect = firstChild;\n                } else {\n                    commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n                }\n            }\n        }\n        function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {\n            while(nextEffect !== null){\n                var fiber = nextEffect;\n                if ((fiber.flags & LayoutMask) !== NoFlags) {\n                    var current = fiber.alternate;\n                    setCurrentFiber(fiber);\n                    try {\n                        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n                    } catch (error) {\n                        reportUncaughtErrorInDEV(error);\n                        captureCommitPhaseError(fiber, fiber.return, error);\n                    }\n                    resetCurrentFiber();\n                }\n                if (fiber === subtreeRoot) {\n                    nextEffect = null;\n                    return;\n                }\n                var sibling = fiber.sibling;\n                if (sibling !== null) {\n                    ensureCorrectReturnPointer(sibling, fiber.return);\n                    nextEffect = sibling;\n                    return;\n                }\n                nextEffect = fiber.return;\n            }\n        }\n        function disappearLayoutEffects_begin(subtreeRoot) {\n            while(nextEffect !== null){\n                var fiber = nextEffect;\n                var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n                switch(fiber.tag){\n                    case FunctionComponent:\n                    case ForwardRef:\n                    case MemoComponent:\n                    case SimpleMemoComponent:\n                        {\n                            if (fiber.mode & ProfileMode) {\n                                try {\n                                    startLayoutEffectTimer();\n                                    commitHookEffectListUnmount(Layout, fiber, fiber.return);\n                                } finally{\n                                    recordLayoutEffectDuration(fiber);\n                                }\n                            } else {\n                                commitHookEffectListUnmount(Layout, fiber, fiber.return);\n                            }\n                            break;\n                        }\n                    case ClassComponent:\n                        {\n                            // TODO (Offscreen) Check: flags & RefStatic\n                            safelyDetachRef(fiber, fiber.return);\n                            var instance = fiber.stateNode;\n                            if (typeof instance.componentWillUnmount === \"function\") {\n                                safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n                            }\n                            break;\n                        }\n                    case HostComponent:\n                        {\n                            safelyDetachRef(fiber, fiber.return);\n                            break;\n                        }\n                    case OffscreenComponent:\n                        {\n                            // Check if this is a\n                            var isHidden = fiber.memoizedState !== null;\n                            if (isHidden) {\n                                // Nested Offscreen tree is already hidden. Don't disappear\n                                // its effects.\n                                disappearLayoutEffects_complete(subtreeRoot);\n                                continue;\n                            }\n                            break;\n                        }\n                } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n                if (firstChild !== null) {\n                    firstChild.return = fiber;\n                    nextEffect = firstChild;\n                } else {\n                    disappearLayoutEffects_complete(subtreeRoot);\n                }\n            }\n        }\n        function disappearLayoutEffects_complete(subtreeRoot) {\n            while(nextEffect !== null){\n                var fiber = nextEffect;\n                if (fiber === subtreeRoot) {\n                    nextEffect = null;\n                    return;\n                }\n                var sibling = fiber.sibling;\n                if (sibling !== null) {\n                    sibling.return = fiber.return;\n                    nextEffect = sibling;\n                    return;\n                }\n                nextEffect = fiber.return;\n            }\n        }\n        function reappearLayoutEffects_begin(subtreeRoot) {\n            while(nextEffect !== null){\n                var fiber = nextEffect;\n                var firstChild = fiber.child;\n                if (fiber.tag === OffscreenComponent) {\n                    var isHidden = fiber.memoizedState !== null;\n                    if (isHidden) {\n                        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n                        reappearLayoutEffects_complete(subtreeRoot);\n                        continue;\n                    }\n                } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n                if (firstChild !== null) {\n                    // This node may have been reused from a previous render, so we can't\n                    // assume its return pointer is correct.\n                    firstChild.return = fiber;\n                    nextEffect = firstChild;\n                } else {\n                    reappearLayoutEffects_complete(subtreeRoot);\n                }\n            }\n        }\n        function reappearLayoutEffects_complete(subtreeRoot) {\n            while(nextEffect !== null){\n                var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic\n                setCurrentFiber(fiber);\n                try {\n                    reappearLayoutEffectsOnFiber(fiber);\n                } catch (error) {\n                    reportUncaughtErrorInDEV(error);\n                    captureCommitPhaseError(fiber, fiber.return, error);\n                }\n                resetCurrentFiber();\n                if (fiber === subtreeRoot) {\n                    nextEffect = null;\n                    return;\n                }\n                var sibling = fiber.sibling;\n                if (sibling !== null) {\n                    // This node may have been reused from a previous render, so we can't\n                    // assume its return pointer is correct.\n                    sibling.return = fiber.return;\n                    nextEffect = sibling;\n                    return;\n                }\n                nextEffect = fiber.return;\n            }\n        }\n        function commitPassiveMountEffects(root, finishedWork) {\n            nextEffect = finishedWork;\n            commitPassiveMountEffects_begin(finishedWork, root);\n        }\n        function commitPassiveMountEffects_begin(subtreeRoot, root) {\n            while(nextEffect !== null){\n                var fiber = nextEffect;\n                var firstChild = fiber.child;\n                if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n                    ensureCorrectReturnPointer(firstChild, fiber);\n                    nextEffect = firstChild;\n                } else {\n                    commitPassiveMountEffects_complete(subtreeRoot, root);\n                }\n            }\n        }\n        function commitPassiveMountEffects_complete(subtreeRoot, root) {\n            while(nextEffect !== null){\n                var fiber = nextEffect;\n                if ((fiber.flags & Passive) !== NoFlags) {\n                    setCurrentFiber(fiber);\n                    try {\n                        commitPassiveMountOnFiber(root, fiber);\n                    } catch (error) {\n                        reportUncaughtErrorInDEV(error);\n                        captureCommitPhaseError(fiber, fiber.return, error);\n                    }\n                    resetCurrentFiber();\n                }\n                if (fiber === subtreeRoot) {\n                    nextEffect = null;\n                    return;\n                }\n                var sibling = fiber.sibling;\n                if (sibling !== null) {\n                    ensureCorrectReturnPointer(sibling, fiber.return);\n                    nextEffect = sibling;\n                    return;\n                }\n                nextEffect = fiber.return;\n            }\n        }\n        function commitPassiveMountOnFiber(finishedRoot, finishedWork) {\n            switch(finishedWork.tag){\n                case FunctionComponent:\n                case ForwardRef:\n                case SimpleMemoComponent:\n                    {\n                        if (finishedWork.mode & ProfileMode) {\n                            startPassiveEffectTimer();\n                            try {\n                                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n                            } finally{\n                                recordPassiveEffectDuration(finishedWork);\n                            }\n                        } else {\n                            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n                        }\n                        break;\n                    }\n            }\n        }\n        function commitPassiveUnmountEffects(firstChild) {\n            nextEffect = firstChild;\n            commitPassiveUnmountEffects_begin();\n        }\n        function commitPassiveUnmountEffects_begin() {\n            while(nextEffect !== null){\n                var fiber = nextEffect;\n                var child = fiber.child;\n                if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n                    var deletions = fiber.deletions;\n                    if (deletions !== null) {\n                        for(var i = 0; i < deletions.length; i++){\n                            var fiberToDelete = deletions[i];\n                            nextEffect = fiberToDelete;\n                            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);\n                        }\n                        {\n                            // A fiber was deleted from this parent fiber, but it's still part of\n                            // the previous (alternate) parent fiber's list of children. Because\n                            // children are a linked list, an earlier sibling that's still alive\n                            // will be connected to the deleted fiber via its `alternate`:\n                            //\n                            //   live fiber\n                            //   --alternate--> previous live fiber\n                            //   --sibling--> deleted fiber\n                            //\n                            // We can't disconnect `alternate` on nodes that haven't been deleted\n                            // yet, but we can disconnect the `sibling` and `child` pointers.\n                            var previousFiber = fiber.alternate;\n                            if (previousFiber !== null) {\n                                var detachedChild = previousFiber.child;\n                                if (detachedChild !== null) {\n                                    previousFiber.child = null;\n                                    do {\n                                        var detachedSibling = detachedChild.sibling;\n                                        detachedChild.sibling = null;\n                                        detachedChild = detachedSibling;\n                                    }while (detachedChild !== null);\n                                }\n                            }\n                        }\n                        nextEffect = fiber;\n                    }\n                }\n                if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n                    ensureCorrectReturnPointer(child, fiber);\n                    nextEffect = child;\n                } else {\n                    commitPassiveUnmountEffects_complete();\n                }\n            }\n        }\n        function commitPassiveUnmountEffects_complete() {\n            while(nextEffect !== null){\n                var fiber = nextEffect;\n                if ((fiber.flags & Passive) !== NoFlags) {\n                    setCurrentFiber(fiber);\n                    commitPassiveUnmountOnFiber(fiber);\n                    resetCurrentFiber();\n                }\n                var sibling = fiber.sibling;\n                if (sibling !== null) {\n                    ensureCorrectReturnPointer(sibling, fiber.return);\n                    nextEffect = sibling;\n                    return;\n                }\n                nextEffect = fiber.return;\n            }\n        }\n        function commitPassiveUnmountOnFiber(finishedWork) {\n            switch(finishedWork.tag){\n                case FunctionComponent:\n                case ForwardRef:\n                case SimpleMemoComponent:\n                    {\n                        if (finishedWork.mode & ProfileMode) {\n                            startPassiveEffectTimer();\n                            commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n                            recordPassiveEffectDuration(finishedWork);\n                        } else {\n                            commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n                        }\n                        break;\n                    }\n            }\n        }\n        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\n            while(nextEffect !== null){\n                var fiber = nextEffect; // Deletion effects fire in parent -> child order\n                // TODO: Check if fiber has a PassiveStatic flag\n                setCurrentFiber(fiber);\n                commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n                resetCurrentFiber();\n                var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n                // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n                if (child !== null) {\n                    ensureCorrectReturnPointer(child, fiber);\n                    nextEffect = child;\n                } else {\n                    commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\n                }\n            }\n        }\n        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\n            while(nextEffect !== null){\n                var fiber = nextEffect;\n                var sibling = fiber.sibling;\n                var returnFiber = fiber.return;\n                {\n                    // Recursively traverse the entire deleted tree and clean up fiber fields.\n                    // This is more aggressive than ideal, and the long term goal is to only\n                    // have to detach the deleted tree at the root.\n                    detachFiberAfterEffects(fiber);\n                    if (fiber === deletedSubtreeRoot) {\n                        nextEffect = null;\n                        return;\n                    }\n                }\n                if (sibling !== null) {\n                    ensureCorrectReturnPointer(sibling, returnFiber);\n                    nextEffect = sibling;\n                    return;\n                }\n                nextEffect = returnFiber;\n            }\n        }\n        function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\n            switch(current.tag){\n                case FunctionComponent:\n                case ForwardRef:\n                case SimpleMemoComponent:\n                    {\n                        if (current.mode & ProfileMode) {\n                            startPassiveEffectTimer();\n                            commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n                            recordPassiveEffectDuration(current);\n                        } else {\n                            commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n                        }\n                        break;\n                    }\n            }\n        }\n        var didWarnWrongReturnPointer = false;\n        function ensureCorrectReturnPointer(fiber, expectedReturnFiber) {\n            {\n                if (!didWarnWrongReturnPointer && fiber.return !== expectedReturnFiber) {\n                    didWarnWrongReturnPointer = true;\n                    error(\"Internal React error: Return pointer is inconsistent \" + \"with parent.\");\n                }\n            }\n            // anything, by checking the warning logs for the above invariant\n            fiber.return = expectedReturnFiber;\n        } // TODO: Reuse reappearLayoutEffects traversal here?\n        function invokeLayoutEffectMountInDEV(fiber) {\n            {\n                // We don't need to re-check StrictEffectsMode here.\n                // This function is only called if that check has already passed.\n                switch(fiber.tag){\n                    case FunctionComponent:\n                    case ForwardRef:\n                    case SimpleMemoComponent:\n                        {\n                            try {\n                                commitHookEffectListMount(Layout | HasEffect, fiber);\n                            } catch (error) {\n                                reportUncaughtErrorInDEV(error);\n                                captureCommitPhaseError(fiber, fiber.return, error);\n                            }\n                            break;\n                        }\n                    case ClassComponent:\n                        {\n                            var instance = fiber.stateNode;\n                            try {\n                                instance.componentDidMount();\n                            } catch (error) {\n                                reportUncaughtErrorInDEV(error);\n                                captureCommitPhaseError(fiber, fiber.return, error);\n                            }\n                            break;\n                        }\n                }\n            }\n        }\n        function invokePassiveEffectMountInDEV(fiber) {\n            {\n                // We don't need to re-check StrictEffectsMode here.\n                // This function is only called if that check has already passed.\n                switch(fiber.tag){\n                    case FunctionComponent:\n                    case ForwardRef:\n                    case SimpleMemoComponent:\n                        {\n                            try {\n                                commitHookEffectListMount(Passive$1 | HasEffect, fiber);\n                            } catch (error) {\n                                reportUncaughtErrorInDEV(error);\n                                captureCommitPhaseError(fiber, fiber.return, error);\n                            }\n                            break;\n                        }\n                }\n            }\n        }\n        function invokeLayoutEffectUnmountInDEV(fiber) {\n            {\n                // We don't need to re-check StrictEffectsMode here.\n                // This function is only called if that check has already passed.\n                switch(fiber.tag){\n                    case FunctionComponent:\n                    case ForwardRef:\n                    case SimpleMemoComponent:\n                        {\n                            try {\n                                commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);\n                            } catch (error) {\n                                reportUncaughtErrorInDEV(error);\n                                captureCommitPhaseError(fiber, fiber.return, error);\n                            }\n                            break;\n                        }\n                    case ClassComponent:\n                        {\n                            var instance = fiber.stateNode;\n                            if (typeof instance.componentWillUnmount === \"function\") {\n                                safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n                            }\n                            break;\n                        }\n                }\n            }\n        }\n        function invokePassiveEffectUnmountInDEV(fiber) {\n            {\n                // We don't need to re-check StrictEffectsMode here.\n                // This function is only called if that check has already passed.\n                switch(fiber.tag){\n                    case FunctionComponent:\n                    case ForwardRef:\n                    case SimpleMemoComponent:\n                        {\n                            try {\n                                commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);\n                            } catch (error) {\n                                reportUncaughtErrorInDEV(error);\n                                captureCommitPhaseError(fiber, fiber.return, error);\n                            }\n                        }\n                }\n            }\n        }\n        var COMPONENT_TYPE = 0;\n        var HAS_PSEUDO_CLASS_TYPE = 1;\n        var ROLE_TYPE = 2;\n        var TEST_NAME_TYPE = 3;\n        var TEXT_TYPE = 4;\n        if (typeof Symbol === \"function\" && Symbol.for) {\n            var symbolFor = Symbol.for;\n            COMPONENT_TYPE = symbolFor(\"selector.component\");\n            HAS_PSEUDO_CLASS_TYPE = symbolFor(\"selector.has_pseudo_class\");\n            ROLE_TYPE = symbolFor(\"selector.role\");\n            TEST_NAME_TYPE = symbolFor(\"selector.test_id\");\n            TEXT_TYPE = symbolFor(\"selector.text\");\n        }\n        function createComponentSelector(component) {\n            return {\n                $$typeof: COMPONENT_TYPE,\n                value: component\n            };\n        }\n        function createHasPseudoClassSelector(selectors) {\n            return {\n                $$typeof: HAS_PSEUDO_CLASS_TYPE,\n                value: selectors\n            };\n        }\n        function createRoleSelector(role) {\n            return {\n                $$typeof: ROLE_TYPE,\n                value: role\n            };\n        }\n        function createTextSelector(text) {\n            return {\n                $$typeof: TEXT_TYPE,\n                value: text\n            };\n        }\n        function createTestNameSelector(id) {\n            return {\n                $$typeof: TEST_NAME_TYPE,\n                value: id\n            };\n        }\n        function findFiberRootForHostRoot(hostRoot) {\n            var maybeFiber = getInstanceFromNode(hostRoot);\n            if (maybeFiber != null) {\n                if (typeof maybeFiber.memoizedProps[\"data-testname\"] !== \"string\") {\n                    throw new Error(\"Invalid host root specified. Should be either a React container or a node with a testname attribute.\");\n                }\n                return maybeFiber;\n            } else {\n                var fiberRoot = findFiberRoot(hostRoot);\n                if (fiberRoot === null) {\n                    throw new Error(\"Could not find React container within specified host subtree.\");\n                } // The Flow type for FiberRoot is a little funky.\n                // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n                return fiberRoot.stateNode.current;\n            }\n        }\n        function matchSelector(fiber, selector) {\n            switch(selector.$$typeof){\n                case COMPONENT_TYPE:\n                    if (fiber.type === selector.value) {\n                        return true;\n                    }\n                    break;\n                case HAS_PSEUDO_CLASS_TYPE:\n                    return hasMatchingPaths(fiber, selector.value);\n                case ROLE_TYPE:\n                    if (fiber.tag === HostComponent) {\n                        var node = fiber.stateNode;\n                        if (matchAccessibilityRole(node, selector.value)) {\n                            return true;\n                        }\n                    }\n                    break;\n                case TEXT_TYPE:\n                    if (fiber.tag === HostComponent || fiber.tag === HostText) {\n                        var textContent = getTextContent(fiber);\n                        if (textContent !== null && textContent.indexOf(selector.value) >= 0) {\n                            return true;\n                        }\n                    }\n                    break;\n                case TEST_NAME_TYPE:\n                    if (fiber.tag === HostComponent) {\n                        var dataTestID = fiber.memoizedProps[\"data-testname\"];\n                        if (typeof dataTestID === \"string\" && dataTestID.toLowerCase() === selector.value.toLowerCase()) {\n                            return true;\n                        }\n                    }\n                    break;\n                default:\n                    throw new Error(\"Invalid selector type specified.\");\n            }\n            return false;\n        }\n        function selectorToString(selector) {\n            switch(selector.$$typeof){\n                case COMPONENT_TYPE:\n                    var displayName = getComponentNameFromType(selector.value) || \"Unknown\";\n                    return \"<\" + displayName + \">\";\n                case HAS_PSEUDO_CLASS_TYPE:\n                    return \":has(\" + (selectorToString(selector) || \"\") + \")\";\n                case ROLE_TYPE:\n                    return '[role=\"' + selector.value + '\"]';\n                case TEXT_TYPE:\n                    return '\"' + selector.value + '\"';\n                case TEST_NAME_TYPE:\n                    return '[data-testname=\"' + selector.value + '\"]';\n                default:\n                    throw new Error(\"Invalid selector type specified.\");\n            }\n        }\n        function findPaths(root, selectors) {\n            var matchingFibers = [];\n            var stack = [\n                root,\n                0\n            ];\n            var index = 0;\n            while(index < stack.length){\n                var fiber = stack[index++];\n                var selectorIndex = stack[index++];\n                var selector = selectors[selectorIndex];\n                if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n                    continue;\n                } else {\n                    while(selector != null && matchSelector(fiber, selector)){\n                        selectorIndex++;\n                        selector = selectors[selectorIndex];\n                    }\n                }\n                if (selectorIndex === selectors.length) {\n                    matchingFibers.push(fiber);\n                } else {\n                    var child = fiber.child;\n                    while(child !== null){\n                        stack.push(child, selectorIndex);\n                        child = child.sibling;\n                    }\n                }\n            }\n            return matchingFibers;\n        } // Same as findPaths but with eager bailout on first match\n        function hasMatchingPaths(root, selectors) {\n            var stack = [\n                root,\n                0\n            ];\n            var index = 0;\n            while(index < stack.length){\n                var fiber = stack[index++];\n                var selectorIndex = stack[index++];\n                var selector = selectors[selectorIndex];\n                if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n                    continue;\n                } else {\n                    while(selector != null && matchSelector(fiber, selector)){\n                        selectorIndex++;\n                        selector = selectors[selectorIndex];\n                    }\n                }\n                if (selectorIndex === selectors.length) {\n                    return true;\n                } else {\n                    var child = fiber.child;\n                    while(child !== null){\n                        stack.push(child, selectorIndex);\n                        child = child.sibling;\n                    }\n                }\n            }\n            return false;\n        }\n        function findAllNodes(hostRoot, selectors) {\n            if (!supportsTestSelectors) {\n                throw new Error(\"Test selector API is not supported by this renderer.\");\n            }\n            var root = findFiberRootForHostRoot(hostRoot);\n            var matchingFibers = findPaths(root, selectors);\n            var instanceRoots = [];\n            var stack = Array.from(matchingFibers);\n            var index = 0;\n            while(index < stack.length){\n                var node = stack[index++];\n                if (node.tag === HostComponent) {\n                    if (isHiddenSubtree(node)) {\n                        continue;\n                    }\n                    instanceRoots.push(node.stateNode);\n                } else {\n                    var child = node.child;\n                    while(child !== null){\n                        stack.push(child);\n                        child = child.sibling;\n                    }\n                }\n            }\n            return instanceRoots;\n        }\n        function getFindAllNodesFailureDescription(hostRoot, selectors) {\n            if (!supportsTestSelectors) {\n                throw new Error(\"Test selector API is not supported by this renderer.\");\n            }\n            var root = findFiberRootForHostRoot(hostRoot);\n            var maxSelectorIndex = 0;\n            var matchedNames = []; // The logic of this loop should be kept in sync with findPaths()\n            var stack = [\n                root,\n                0\n            ];\n            var index = 0;\n            while(index < stack.length){\n                var fiber = stack[index++];\n                var selectorIndex = stack[index++];\n                var selector = selectors[selectorIndex];\n                if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n                    continue;\n                } else if (matchSelector(fiber, selector)) {\n                    matchedNames.push(selectorToString(selector));\n                    selectorIndex++;\n                    if (selectorIndex > maxSelectorIndex) {\n                        maxSelectorIndex = selectorIndex;\n                    }\n                }\n                if (selectorIndex < selectors.length) {\n                    var child = fiber.child;\n                    while(child !== null){\n                        stack.push(child, selectorIndex);\n                        child = child.sibling;\n                    }\n                }\n            }\n            if (maxSelectorIndex < selectors.length) {\n                var unmatchedNames = [];\n                for(var i = maxSelectorIndex; i < selectors.length; i++){\n                    unmatchedNames.push(selectorToString(selectors[i]));\n                }\n                return \"findAllNodes was able to match part of the selector:\\n\" + (\"  \" + matchedNames.join(\" > \") + \"\\n\\n\") + \"No matching component was found for:\\n\" + (\"  \" + unmatchedNames.join(\" > \"));\n            }\n            return null;\n        }\n        function findBoundingRects(hostRoot, selectors) {\n            if (!supportsTestSelectors) {\n                throw new Error(\"Test selector API is not supported by this renderer.\");\n            }\n            var instanceRoots = findAllNodes(hostRoot, selectors);\n            var boundingRects = [];\n            for(var i = 0; i < instanceRoots.length; i++){\n                boundingRects.push(getBoundingRect(instanceRoots[i]));\n            }\n            for(var _i = boundingRects.length - 1; _i > 0; _i--){\n                var targetRect = boundingRects[_i];\n                var targetLeft = targetRect.x;\n                var targetRight = targetLeft + targetRect.width;\n                var targetTop = targetRect.y;\n                var targetBottom = targetTop + targetRect.height;\n                for(var j = _i - 1; j >= 0; j--){\n                    if (_i !== j) {\n                        var otherRect = boundingRects[j];\n                        var otherLeft = otherRect.x;\n                        var otherRight = otherLeft + otherRect.width;\n                        var otherTop = otherRect.y;\n                        var otherBottom = otherTop + otherRect.height; // Merging all rects to the minimums set would be complicated,\n                        // but we can handle the most common cases:\n                        // 1. completely overlapping rects\n                        // 2. adjacent rects that are the same width or height (e.g. items in a list)\n                        //\n                        // Even given the above constraints,\n                        // we still won't end up with the fewest possible rects without doing multiple passes,\n                        // but it's good enough for this purpose.\n                        if (targetLeft >= otherLeft && targetTop >= otherTop && targetRight <= otherRight && targetBottom <= otherBottom) {\n                            // Complete overlapping rects; remove the inner one.\n                            boundingRects.splice(_i, 1);\n                            break;\n                        } else if (targetLeft === otherLeft && targetRect.width === otherRect.width && !(otherBottom < targetTop) && !(otherTop > targetBottom)) {\n                            // Adjacent vertical rects; merge them.\n                            if (otherTop > targetTop) {\n                                otherRect.height += otherTop - targetTop;\n                                otherRect.y = targetTop;\n                            }\n                            if (otherBottom < targetBottom) {\n                                otherRect.height = targetBottom - otherTop;\n                            }\n                            boundingRects.splice(_i, 1);\n                            break;\n                        } else if (targetTop === otherTop && targetRect.height === otherRect.height && !(otherRight < targetLeft) && !(otherLeft > targetRight)) {\n                            // Adjacent horizontal rects; merge them.\n                            if (otherLeft > targetLeft) {\n                                otherRect.width += otherLeft - targetLeft;\n                                otherRect.x = targetLeft;\n                            }\n                            if (otherRight < targetRight) {\n                                otherRect.width = targetRight - otherLeft;\n                            }\n                            boundingRects.splice(_i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n            return boundingRects;\n        }\n        function focusWithin(hostRoot, selectors) {\n            if (!supportsTestSelectors) {\n                throw new Error(\"Test selector API is not supported by this renderer.\");\n            }\n            var root = findFiberRootForHostRoot(hostRoot);\n            var matchingFibers = findPaths(root, selectors);\n            var stack = Array.from(matchingFibers);\n            var index = 0;\n            while(index < stack.length){\n                var fiber = stack[index++];\n                if (isHiddenSubtree(fiber)) {\n                    continue;\n                }\n                if (fiber.tag === HostComponent) {\n                    var node = fiber.stateNode;\n                    if (setFocusIfFocusable(node)) {\n                        return true;\n                    }\n                }\n                var child = fiber.child;\n                while(child !== null){\n                    stack.push(child);\n                    child = child.sibling;\n                }\n            }\n            return false;\n        }\n        var commitHooks = [];\n        function onCommitRoot$1() {\n            if (supportsTestSelectors) {\n                commitHooks.forEach(function(commitHook) {\n                    return commitHook();\n                });\n            }\n        }\n        function observeVisibleRects(hostRoot, selectors, callback, options) {\n            if (!supportsTestSelectors) {\n                throw new Error(\"Test selector API is not supported by this renderer.\");\n            }\n            var instanceRoots = findAllNodes(hostRoot, selectors);\n            var _setupIntersectionObs = setupIntersectionObserver(instanceRoots, callback, options), disconnect = _setupIntersectionObs.disconnect, observe = _setupIntersectionObs.observe, unobserve = _setupIntersectionObs.unobserve; // When React mutates the host environment, we may need to change what we're listening to.\n            var commitHook = function() {\n                var nextInstanceRoots = findAllNodes(hostRoot, selectors);\n                instanceRoots.forEach(function(target) {\n                    if (nextInstanceRoots.indexOf(target) < 0) {\n                        unobserve(target);\n                    }\n                });\n                nextInstanceRoots.forEach(function(target) {\n                    if (instanceRoots.indexOf(target) < 0) {\n                        observe(target);\n                    }\n                });\n            };\n            commitHooks.push(commitHook);\n            return {\n                disconnect: function() {\n                    // Stop listening for React mutations:\n                    var index = commitHooks.indexOf(commitHook);\n                    if (index >= 0) {\n                        commitHooks.splice(index, 1);\n                    } // Disconnect the host observer:\n                    disconnect();\n                }\n            };\n        }\n        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\n        function isLegacyActEnvironment(fiber) {\n            {\n                // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n                // act environment whenever `jest` is defined, but you can still turn off\n                // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n                // to false.\n                var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== \"undefined\" ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest\n                var jestIsDefined = typeof jest !== \"undefined\";\n                return warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false;\n            }\n        }\n        function isConcurrentActEnvironment() {\n            {\n                var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== \"undefined\" ? IS_REACT_ACT_ENVIRONMENT : undefined;\n                if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n                    // TODO: Include link to relevant documentation page.\n                    error(\"The current testing environment is not configured to support \" + \"act(...)\");\n                }\n                return isReactActEnvironmentGlobal;\n            }\n        }\n        var ceil = Math.ceil;\n        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\n        var NoContext = /*             */ 0;\n        var BatchedContext = /*               */ 1;\n        var RenderContext = /*                */ 2;\n        var CommitContext = /*                */ 4;\n        var RootInProgress = 0;\n        var RootFatalErrored = 1;\n        var RootErrored = 2;\n        var RootSuspended = 3;\n        var RootSuspendedWithDelay = 4;\n        var RootCompleted = 5;\n        var RootDidNotComplete = 6; // Describes where we are in the React execution stack\n        var executionContext = NoContext; // The root we're working on\n        var workInProgressRoot = null; // The fiber we're working on\n        var workInProgress = null; // The lanes we're rendering\n        var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree\n        // This is a superset of the lanes we started working on at the root. The only\n        // case where it's different from `workInProgressRootRenderLanes` is when we\n        // enter a subtree that is hidden and needs to be unhidden: Suspense and\n        // Offscreen component.\n        //\n        // Most things in the work loop should deal with workInProgressRootRenderLanes.\n        // Most things in begin/complete phases should deal with subtreeRenderLanes.\n        var subtreeRenderLanes = NoLanes;\n        var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.\n        var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown\n        var workInProgressRootFatalError = null; // \"Included\" lanes refer to lanes that were worked on during this render. It's\n        // slightly different than `renderLanes` because `renderLanes` can change as you\n        // enter and exit an Offscreen tree. This value is the combination of all render\n        // lanes for the entire render phase.\n        var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only\n        // includes unprocessed updates, not work in bailed out children.\n        var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n        var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\n        var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.\n        var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\n        // We will log them once the tree commits.\n        var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train\n        // model where we don't commit new loading states in too quick succession.\n        var globalMostRecentFallbackTime = 0;\n        var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering\n        // more and prefer CPU suspense heuristics instead.\n        var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n        // suspense heuristics and opt out of rendering more content.\n        var RENDER_TIMEOUT_MS = 500;\n        function resetRenderTimer() {\n            workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;\n        }\n        function getRenderTargetTime() {\n            return workInProgressRootRenderTargetTime;\n        }\n        var hasUncaughtError = false;\n        var firstUncaughtError = null;\n        var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;\n        var rootDoesHavePassiveEffects = false;\n        var rootWithPendingPassiveEffects = null;\n        var pendingPassiveEffectsLanes = NoLanes;\n        var pendingPassiveProfilerEffects = [];\n        var NESTED_UPDATE_LIMIT = 50;\n        var nestedUpdateCount = 0;\n        var rootWithNestedUpdates = null;\n        var NESTED_PASSIVE_UPDATE_LIMIT = 50;\n        var nestedPassiveUpdateCount = 0; // If two updates are scheduled within the same event, we should treat their\n        // event times as simultaneous, even if the actual clock time has advanced\n        // between the first and second call.\n        var currentEventTime = NoTimestamp;\n        var currentEventTransitionLane = NoLanes;\n        function getWorkInProgressRoot() {\n            return workInProgressRoot;\n        }\n        function requestEventTime() {\n            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n                // We're inside React, so it's fine to read the actual time.\n                return now$1();\n            } // We're not inside React, so we may be in the middle of a browser event.\n            if (currentEventTime !== NoTimestamp) {\n                // Use the same start time for all updates until we enter React again.\n                return currentEventTime;\n            } // This is the first update since React yielded. Compute a new start time.\n            currentEventTime = now$1();\n            return currentEventTime;\n        }\n        function requestUpdateLane(fiber) {\n            // Special cases\n            var mode = fiber.mode;\n            if ((mode & ConcurrentMode) === NoMode) {\n                return SyncLane;\n            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\n                // This is a render phase update. These are not officially supported. The\n                // old behavior is to give this the same \"thread\" (lanes) as\n                // whatever is currently rendering. So if you call `setState` on a component\n                // that happens later in the same render, it will flush. Ideally, we want to\n                // remove the special case and treat them as if they came from an\n                // interleaved event. Regardless, this pattern is not officially supported.\n                // This behavior is only a fallback. The flag only exists until we can roll\n                // out the setState warning, since existing code might accidentally rely on\n                // the current behavior.\n                return pickArbitraryLane(workInProgressRootRenderLanes);\n            }\n            var isTransition = requestCurrentTransition() !== NoTransition;\n            if (isTransition) {\n                if (ReactCurrentBatchConfig$2.transition !== null) {\n                    var transition = ReactCurrentBatchConfig$2.transition;\n                    if (!transition._updatedFibers) {\n                        transition._updatedFibers = new Set();\n                    }\n                    transition._updatedFibers.add(fiber);\n                } // The algorithm for assigning an update to a lane should be stable for all\n                // updates at the same priority within the same event. To do this, the\n                // inputs to the algorithm must be the same.\n                //\n                // The trick we use is to cache the first of each of these inputs within an\n                // event. Then reset the cached values once we can be sure the event is\n                // over. Our heuristic for that is whenever we enter a concurrent work loop.\n                if (currentEventTransitionLane === NoLane) {\n                    // All transitions within the same event are assigned the same lane.\n                    currentEventTransitionLane = claimNextTransitionLane();\n                }\n                return currentEventTransitionLane;\n            } // Updates originating inside certain React methods, like flushSync, have\n            // their priority set by tracking it with a context variable.\n            //\n            // The opaque type returned by the host config is internally a lane, so we can\n            // use that directly.\n            // TODO: Move this type conversion to the event priority module.\n            var updateLane = getCurrentUpdatePriority();\n            if (updateLane !== NoLane) {\n                return updateLane;\n            } // This update originated outside React. Ask the host environment for an\n            // appropriate priority, based on the type of event.\n            //\n            // The opaque type returned by the host config is internally a lane, so we can\n            // use that directly.\n            // TODO: Move this type conversion to the event priority module.\n            var eventLane = getCurrentEventPriority();\n            return eventLane;\n        }\n        function requestRetryLane(fiber) {\n            // This is a fork of `requestUpdateLane` designed specifically for Suspense\n            // \"retries\" — a special update that attempts to flip a Suspense boundary\n            // from its placeholder state to its primary/resolved state.\n            // Special cases\n            var mode = fiber.mode;\n            if ((mode & ConcurrentMode) === NoMode) {\n                return SyncLane;\n            }\n            return claimNextRetryLane();\n        }\n        function scheduleUpdateOnFiber(fiber, lane, eventTime) {\n            checkForNestedUpdates();\n            var root = markUpdateLaneFromFiberToRoot(fiber, lane);\n            if (root === null) {\n                return null;\n            } // Mark that the root has a pending update.\n            markRootUpdated(root, lane, eventTime);\n            if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {\n                // This update was dispatched during the render phase. This is a mistake\n                // if the update originates from user space (with the exception of local\n                // hook updates, which are handled differently and don't reach this\n                // function), but there are some internal React features that use this as\n                // an implementation detail, like selective hydration.\n                warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase\n            } else {\n                // This is a normal update, scheduled from outside the render phase. For\n                // example, during an input event.\n                {\n                    if (isDevToolsPresent) {\n                        addFiberToLanesMap(root, fiber, lane);\n                    }\n                }\n                warnIfUpdatesNotWrappedWithActDEV(fiber);\n                if (root === workInProgressRoot) {\n                    // TODO: Consolidate with `isInterleavedUpdate` check\n                    // Received an update to a tree that's in the middle of rendering. Mark\n                    // that there was an interleaved update work on this root. Unless the\n                    // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n                    // phase update. In that case, we don't treat render phase updates as if\n                    // they were interleaved, for backwards compat reasons.\n                    if ((executionContext & RenderContext) === NoContext) {\n                        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\n                    }\n                    if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n                        // The root already suspended with a delay, which means this render\n                        // definitely won't finish. Since we have a new update, let's mark it as\n                        // suspended now, right before marking the incoming update. This has the\n                        // effect of interrupting the current render and switching to the update.\n                        // TODO: Make sure this doesn't override pings that happen while we've\n                        // already started rendering.\n                        markRootSuspended$1(root, workInProgressRootRenderLanes);\n                    }\n                }\n                ensureRootIsScheduled(root, eventTime);\n                if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n                !ReactCurrentActQueue$1.isBatchingLegacy) {\n                    // Flush the synchronous work now, unless we're already working or inside\n                    // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n                    // scheduleCallbackForFiber to preserve the ability to schedule a callback\n                    // without immediately flushing it. We only do this for user-initiated\n                    // updates, to preserve historical behavior of legacy mode.\n                    resetRenderTimer();\n                    flushSyncCallbacksOnlyInLegacyMode();\n                }\n            }\n            return root;\n        }\n        function scheduleInitialHydrationOnRoot(root, lane, eventTime) {\n            // This is a special fork of scheduleUpdateOnFiber that is only used to\n            // schedule the initial hydration of a root that has just been created. Most\n            // of the stuff in scheduleUpdateOnFiber can be skipped.\n            //\n            // The main reason for this separate path, though, is to distinguish the\n            // initial children from subsequent updates. In fully client-rendered roots\n            // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n            // updates, but hydration roots are special because the initial render must\n            // match what was rendered on the server.\n            var current = root.current;\n            current.lanes = lane;\n            markRootUpdated(root, lane, eventTime);\n            ensureRootIsScheduled(root, eventTime);\n        } // This is split into a separate function so we can mark a fiber with pending\n        // work without treating it as a typical update that originates from an event;\n        // e.g. retrying a Suspense boundary isn't an update, but it does schedule work\n        // on a fiber.\n        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n            // Update the source fiber's lanes\n            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n            var alternate = sourceFiber.alternate;\n            if (alternate !== null) {\n                alternate.lanes = mergeLanes(alternate.lanes, lane);\n            }\n            {\n                if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {\n                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n                }\n            }\n            var node = sourceFiber;\n            var parent = sourceFiber.return;\n            while(parent !== null){\n                parent.childLanes = mergeLanes(parent.childLanes, lane);\n                alternate = parent.alternate;\n                if (alternate !== null) {\n                    alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n                } else {\n                    {\n                        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n                            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n                        }\n                    }\n                }\n                node = parent;\n                parent = parent.return;\n            }\n            if (node.tag === HostRoot) {\n                var root = node.stateNode;\n                return root;\n            } else {\n                return null;\n            }\n        }\n        function isInterleavedUpdate(fiber, lane) {\n            return(// Requires some refactoring. Not a big deal though since it's rare for\n            // concurrent apps to have more than a single root.\n            workInProgressRoot !== null && (fiber.mode & ConcurrentMode) !== NoMode && // then don't treat this as an interleaved update. This pattern is\n            // accompanied by a warning but we haven't fully deprecated it yet. We can\n            // remove once the deferRenderPhaseUpdateToNextBatch flag is enabled.\n            (executionContext & RenderContext) === NoContext);\n        } // Use this function to schedule a task for a root. There's only one task per\n        // root; if a task was already scheduled, we'll check to make sure the priority\n        // of the existing task is the same as the priority of the next level that the\n        // root has work on. This function is called on every update, and right before\n        // exiting a task.\n        function ensureRootIsScheduled(root, currentTime) {\n            var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as\n            // expired so we know to work on those next.\n            markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n            var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n            if (nextLanes === NoLanes) {\n                // Special case: There's nothing to work on.\n                if (existingCallbackNode !== null) {\n                    cancelCallback$1(existingCallbackNode);\n                }\n                root.callbackNode = null;\n                root.callbackPriority = NoLane;\n                return;\n            } // We use the highest priority lane to represent the priority of the callback.\n            var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.\n            var existingCallbackPriority = root.callbackPriority;\n            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a\n            // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n            // on the `act` queue.\n            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {\n                {\n                    // If we're going to re-use an existing task, it needs to exist.\n                    // Assume that discrete update microtasks are non-cancellable and null.\n                    // TODO: Temporary until we confirm this warning is not fired.\n                    if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {\n                        error(\"Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.\");\n                    }\n                }\n                return;\n            }\n            if (existingCallbackNode != null) {\n                // Cancel the existing callback. We'll schedule a new one below.\n                cancelCallback$1(existingCallbackNode);\n            } // Schedule a new callback.\n            var newCallbackNode;\n            if (newCallbackPriority === SyncLane) {\n                // Special case: Sync React callbacks are scheduled on a special\n                // internal queue\n                if (root.tag === LegacyRoot) {\n                    if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {\n                        ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;\n                    }\n                    scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n                } else {\n                    scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n                }\n                if (supportsMicrotasks) {\n                    // Flush the queue in a microtask.\n                    if (ReactCurrentActQueue$1.current !== null) {\n                        // Inside `act`, use our internal `act` queue so that these get flushed\n                        // at the end of the current scope even when using the sync version\n                        // of `act`.\n                        ReactCurrentActQueue$1.current.push(flushSyncCallbacks);\n                    } else {\n                        scheduleMicrotask(function() {\n                            // In Safari, appending an iframe forces microtasks to run.\n                            // https://github.com/facebook/react/issues/22459\n                            // We don't support running callbacks in the middle of render\n                            // or commit so we need to check against that.\n                            if (executionContext === NoContext) {\n                                // It's only safe to do this conditionally because we always\n                                // check for pending work before we exit the task.\n                                flushSyncCallbacks();\n                            }\n                        });\n                    }\n                } else {\n                    // Flush the queue in an Immediate task.\n                    scheduleCallback$1(ImmediatePriority, flushSyncCallbacks);\n                }\n                newCallbackNode = null;\n            } else {\n                var schedulerPriorityLevel;\n                switch(lanesToEventPriority(nextLanes)){\n                    case DiscreteEventPriority:\n                        schedulerPriorityLevel = ImmediatePriority;\n                        break;\n                    case ContinuousEventPriority:\n                        schedulerPriorityLevel = UserBlockingPriority;\n                        break;\n                    case DefaultEventPriority:\n                        schedulerPriorityLevel = NormalPriority;\n                        break;\n                    case IdleEventPriority:\n                        schedulerPriorityLevel = IdlePriority;\n                        break;\n                    default:\n                        schedulerPriorityLevel = NormalPriority;\n                        break;\n                }\n                newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n            }\n            root.callbackPriority = newCallbackPriority;\n            root.callbackNode = newCallbackNode;\n        } // This is the entry point for every concurrent task, i.e. anything that\n        // goes through Scheduler.\n        function performConcurrentWorkOnRoot(root, didTimeout) {\n            {\n                resetNestedUpdateFlag();\n            }\n            // event time. The next update will compute a new event time.\n            currentEventTime = NoTimestamp;\n            currentEventTransitionLane = NoLanes;\n            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n                throw new Error(\"Should not already be working.\");\n            } // Flush any pending passive effects before deciding which lanes to work on,\n            // in case they schedule additional work.\n            var originalCallbackNode = root.callbackNode;\n            var didFlushPassiveEffects = flushPassiveEffects();\n            if (didFlushPassiveEffects) {\n                // Something in the passive effect phase may have canceled the current task.\n                // Check if the task node for this root was changed.\n                if (root.callbackNode !== originalCallbackNode) {\n                    // The current task was canceled. Exit. We don't need to call\n                    // `ensureRootIsScheduled` because the check above implies either that\n                    // there's a new task, or that there's no remaining work on this root.\n                    return null;\n                }\n            } // Determine the next lanes to work on, using the fields stored\n            // on the root.\n            var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n            if (lanes === NoLanes) {\n                // Defensive coding. This is never expected to happen.\n                return null;\n            } // We disable time-slicing in some cases: if the work has been CPU-bound\n            // for too long (\"expired\" work, to prevent starvation), or we're in\n            // sync-updates-by-default mode.\n            // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n            // bug we're still investigating. Once the bug in Scheduler is fixed,\n            // we can remove this, since we track expiration ourselves.\n            var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;\n            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\n            if (exitStatus !== RootInProgress) {\n                if (exitStatus === RootErrored) {\n                    // If something threw an error, try rendering one more time. We'll\n                    // render synchronously to block concurrent data mutations, and we'll\n                    // includes all pending updates are included. If it still fails after\n                    // the second attempt, we'll give up and commit the resulting tree.\n                    var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n                    if (errorRetryLanes !== NoLanes) {\n                        lanes = errorRetryLanes;\n                        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n                    }\n                }\n                if (exitStatus === RootFatalErrored) {\n                    var fatalError = workInProgressRootFatalError;\n                    prepareFreshStack(root, NoLanes);\n                    markRootSuspended$1(root, lanes);\n                    ensureRootIsScheduled(root, now$1());\n                    throw fatalError;\n                }\n                if (exitStatus === RootDidNotComplete) {\n                    // The render unwound without completing the tree. This happens in special\n                    // cases where need to exit the current render without producing a\n                    // consistent tree or committing.\n                    //\n                    // This should only happen during a concurrent render, not a discrete or\n                    // synchronous update. We should have already checked for this when we\n                    // unwound the stack.\n                    markRootSuspended$1(root, lanes);\n                } else {\n                    // The render completed.\n                    // Check if this render may have yielded to a concurrent event, and if so,\n                    // confirm that any newly rendered stores are consistent.\n                    // TODO: It's possible that even a concurrent render may never have yielded\n                    // to the main thread, if it was fast enough, or if it expired. We could\n                    // skip the consistency check in that case, too.\n                    var renderWasConcurrent = !includesBlockingLane(root, lanes);\n                    var finishedWork = root.current.alternate;\n                    if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\n                        // A store was mutated in an interleaved event. Render again,\n                        // synchronously, to block further mutations.\n                        exitStatus = renderRootSync(root, lanes); // We need to check again if something threw\n                        if (exitStatus === RootErrored) {\n                            var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n                            if (_errorRetryLanes !== NoLanes) {\n                                lanes = _errorRetryLanes;\n                                exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any\n                            // concurrent events.\n                            }\n                        }\n                        if (exitStatus === RootFatalErrored) {\n                            var _fatalError = workInProgressRootFatalError;\n                            prepareFreshStack(root, NoLanes);\n                            markRootSuspended$1(root, lanes);\n                            ensureRootIsScheduled(root, now$1());\n                            throw _fatalError;\n                        }\n                    } // We now have a consistent tree. The next step is either to commit it,\n                    // or, if something suspended, wait to commit it after a timeout.\n                    root.finishedWork = finishedWork;\n                    root.finishedLanes = lanes;\n                    finishConcurrentRender(root, exitStatus, lanes);\n                }\n            }\n            ensureRootIsScheduled(root, now$1());\n            if (root.callbackNode === originalCallbackNode) {\n                // The task node scheduled for this root is the same one that's\n                // currently executed. Need to return a continuation.\n                return performConcurrentWorkOnRoot.bind(null, root);\n            }\n            return null;\n        }\n        function recoverFromConcurrentError(root, errorRetryLanes) {\n            // If an error occurred during hydration, discard server response and fall\n            // back to client side render.\n            // Before rendering again, save the errors from the previous attempt.\n            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n            if (isRootDehydrated(root)) {\n                // The shell failed to hydrate. Set a flag to force a client rendering\n                // during the next attempt. To do this, we call prepareFreshStack now\n                // to create the root work-in-progress fiber. This is a bit weird in terms\n                // of factoring, because it relies on renderRootSync not calling\n                // prepareFreshStack again in the call below, which happens because the\n                // root and lanes haven't changed.\n                //\n                // TODO: I think what we should do is set ForceClientRender inside\n                // throwException, like we do for nested Suspense boundaries. The reason\n                // it's here instead is so we can switch to the synchronous work loop, too.\n                // Something to consider for a future refactor.\n                var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n                rootWorkInProgress.flags |= ForceClientRender;\n                {\n                    errorHydratingContainer(root.containerInfo);\n                }\n            }\n            var exitStatus = renderRootSync(root, errorRetryLanes);\n            if (exitStatus !== RootErrored) {\n                // Successfully finished rendering on retry\n                // The errors from the failed first attempt have been recovered. Add\n                // them to the collection of recoverable errors. We'll log them in the\n                // commit phase.\n                var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n                workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\n                // from the first attempt, to preserve the causal sequence.\n                if (errorsFromSecondAttempt !== null) {\n                    queueRecoverableErrors(errorsFromSecondAttempt);\n                }\n            }\n            return exitStatus;\n        }\n        function queueRecoverableErrors(errors) {\n            if (workInProgressRootRecoverableErrors === null) {\n                workInProgressRootRecoverableErrors = errors;\n            } else {\n                workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\n            }\n        }\n        function finishConcurrentRender(root, exitStatus, lanes) {\n            switch(exitStatus){\n                case RootInProgress:\n                case RootFatalErrored:\n                    {\n                        throw new Error(\"Root did not complete. This is a bug in React.\");\n                    }\n                // Flow knows about invariant, so it complains if I add a break\n                // statement, but eslint doesn't know about invariant, so it complains\n                // if I do. eslint-disable-next-line no-fallthrough\n                case RootErrored:\n                    {\n                        // We should have already attempted to retry this tree. If we reached\n                        // this point, it errored again. Commit it.\n                        commitRoot(root, workInProgressRootRecoverableErrors);\n                        break;\n                    }\n                case RootSuspended:\n                    {\n                        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we\n                        // should immediately commit it or wait a bit.\n                        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope\n                        !shouldForceFlushFallbacksInDEV()) {\n                            // This render only included retries, no updates. Throttle committing\n                            // retries so that we don't show too many loading states too quickly.\n                            var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(); // Don't bother with a very short suspense time.\n                            if (msUntilTimeout > 10) {\n                                var nextLanes = getNextLanes(root, NoLanes);\n                                if (nextLanes !== NoLanes) {\n                                    break;\n                                }\n                                var suspendedLanes = root.suspendedLanes;\n                                if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n                                    // We should prefer to render the fallback of at the last\n                                    // suspended level. Ping the last suspended level to try\n                                    // rendering it again.\n                                    // FIXME: What if the suspended lanes are Idle? Should not restart.\n                                    var eventTime = requestEventTime();\n                                    markRootPinged(root, suspendedLanes);\n                                    break;\n                                } // The render is suspended, it hasn't timed out, and there's no\n                                // lower priority work to do. Instead of committing the fallback\n                                // immediately, wait for more data to arrive.\n                                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors), msUntilTimeout);\n                                break;\n                            }\n                        } // The work expired. Commit immediately.\n                        commitRoot(root, workInProgressRootRecoverableErrors);\n                        break;\n                    }\n                case RootSuspendedWithDelay:\n                    {\n                        markRootSuspended$1(root, lanes);\n                        if (includesOnlyTransitions(lanes)) {\n                            break;\n                        }\n                        if (!shouldForceFlushFallbacksInDEV()) {\n                            // This is not a transition, but we did trigger an avoided state.\n                            // Schedule a placeholder to display after a short delay, using the Just\n                            // Noticeable Difference.\n                            // TODO: Is the JND optimization worth the added complexity? If this is\n                            // the only reason we track the event time, then probably not.\n                            // Consider removing.\n                            var mostRecentEventTime = getMostRecentEventTime(root, lanes);\n                            var eventTimeMs = mostRecentEventTime;\n                            var timeElapsedMs = now$1() - eventTimeMs;\n                            var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.\n                            if (_msUntilTimeout > 10) {\n                                // Instead of committing the fallback immediately, wait for more data\n                                // to arrive.\n                                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors), _msUntilTimeout);\n                                break;\n                            }\n                        } // Commit the placeholder.\n                        commitRoot(root, workInProgressRootRecoverableErrors);\n                        break;\n                    }\n                case RootCompleted:\n                    {\n                        // The work completed. Ready to commit.\n                        commitRoot(root, workInProgressRootRecoverableErrors);\n                        break;\n                    }\n                default:\n                    {\n                        throw new Error(\"Unknown root exit status.\");\n                    }\n            }\n        }\n        function isRenderConsistentWithExternalStores(finishedWork) {\n            // Search the rendered tree for external store reads, and check whether the\n            // stores were mutated in a concurrent event. Intentionally using an iterative\n            // loop instead of recursion so we can exit early.\n            var node = finishedWork;\n            while(true){\n                if (node.flags & StoreConsistency) {\n                    var updateQueue = node.updateQueue;\n                    if (updateQueue !== null) {\n                        var checks = updateQueue.stores;\n                        if (checks !== null) {\n                            for(var i = 0; i < checks.length; i++){\n                                var check = checks[i];\n                                var getSnapshot = check.getSnapshot;\n                                var renderedValue = check.value;\n                                try {\n                                    if (!objectIs(getSnapshot(), renderedValue)) {\n                                        // Found an inconsistent store.\n                                        return false;\n                                    }\n                                } catch (error) {\n                                    // If `getSnapshot` throws, return `false`. This will schedule\n                                    // a re-render, and the error will be rethrown during render.\n                                    return false;\n                                }\n                            }\n                        }\n                    }\n                }\n                var child = node.child;\n                if (node.subtreeFlags & StoreConsistency && child !== null) {\n                    child.return = node;\n                    node = child;\n                    continue;\n                }\n                if (node === finishedWork) {\n                    return true;\n                }\n                while(node.sibling === null){\n                    if (node.return === null || node.return === finishedWork) {\n                        return true;\n                    }\n                    node = node.return;\n                }\n                node.sibling.return = node.return;\n                node = node.sibling;\n            } // Flow doesn't know this is unreachable, but eslint does\n            // eslint-disable-next-line no-unreachable\n            return true;\n        }\n        function markRootSuspended$1(root, suspendedLanes) {\n            // When suspending, we should always exclude lanes that were pinged or (more\n            // rarely, since we try to avoid it) updated during the render phase.\n            // TODO: Lol maybe there's a better way to factor this besides this\n            // obnoxiously named function :)\n            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\n            markRootSuspended(root, suspendedLanes);\n        } // This is the entry point for synchronous tasks that don't go\n        // through Scheduler\n        function performSyncWorkOnRoot(root) {\n            {\n                syncNestedUpdateFlag();\n            }\n            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n                throw new Error(\"Should not already be working.\");\n            }\n            flushPassiveEffects();\n            var lanes = getNextLanes(root, NoLanes);\n            if (!includesSomeLane(lanes, SyncLane)) {\n                // There's no remaining sync work left.\n                ensureRootIsScheduled(root, now$1());\n                return null;\n            }\n            var exitStatus = renderRootSync(root, lanes);\n            if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n                // If something threw an error, try rendering one more time. We'll render\n                // synchronously to block concurrent data mutations, and we'll includes\n                // all pending updates are included. If it still fails after the second\n                // attempt, we'll give up and commit the resulting tree.\n                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n                if (errorRetryLanes !== NoLanes) {\n                    lanes = errorRetryLanes;\n                    exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n                }\n            }\n            if (exitStatus === RootFatalErrored) {\n                var fatalError = workInProgressRootFatalError;\n                prepareFreshStack(root, NoLanes);\n                markRootSuspended$1(root, lanes);\n                ensureRootIsScheduled(root, now$1());\n                throw fatalError;\n            }\n            if (exitStatus === RootDidNotComplete) {\n                throw new Error(\"Root did not complete. This is a bug in React.\");\n            } // We now have a consistent tree. Because this is a sync render, we\n            // will commit it even if something suspended.\n            var finishedWork = root.current.alternate;\n            root.finishedWork = finishedWork;\n            root.finishedLanes = lanes;\n            commitRoot(root, workInProgressRootRecoverableErrors); // Before exiting, make sure there's a callback scheduled for the next\n            // pending level.\n            ensureRootIsScheduled(root, now$1());\n            return null;\n        }\n        function flushRoot(root, lanes) {\n            if (lanes !== NoLanes) {\n                markRootEntangled(root, mergeLanes(lanes, SyncLane));\n                ensureRootIsScheduled(root, now$1());\n                if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n                    resetRenderTimer();\n                    flushSyncCallbacks();\n                }\n            }\n        }\n        function deferredUpdates(fn) {\n            var previousPriority = getCurrentUpdatePriority();\n            var prevTransition = ReactCurrentBatchConfig$2.transition;\n            try {\n                ReactCurrentBatchConfig$2.transition = null;\n                setCurrentUpdatePriority(DefaultEventPriority);\n                return fn();\n            } finally{\n                setCurrentUpdatePriority(previousPriority);\n                ReactCurrentBatchConfig$2.transition = prevTransition;\n            }\n        }\n        function batchedUpdates(fn, a) {\n            var prevExecutionContext = executionContext;\n            executionContext |= BatchedContext;\n            try {\n                return fn(a);\n            } finally{\n                executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer\n                // most batchedUpdates-like method.\n                if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n                !ReactCurrentActQueue$1.isBatchingLegacy) {\n                    resetRenderTimer();\n                    flushSyncCallbacksOnlyInLegacyMode();\n                }\n            }\n        }\n        function discreteUpdates(fn, a, b, c, d) {\n            var previousPriority = getCurrentUpdatePriority();\n            var prevTransition = ReactCurrentBatchConfig$2.transition;\n            try {\n                ReactCurrentBatchConfig$2.transition = null;\n                setCurrentUpdatePriority(DiscreteEventPriority);\n                return fn(a, b, c, d);\n            } finally{\n                setCurrentUpdatePriority(previousPriority);\n                ReactCurrentBatchConfig$2.transition = prevTransition;\n                if (executionContext === NoContext) {\n                    resetRenderTimer();\n                }\n            }\n        } // Overload the definition to the two valid signatures.\n        // Warning, this opts-out of checking the function body.\n        // eslint-disable-next-line no-redeclare\n        function flushSync(fn) {\n            // In legacy mode, we flush pending passive effects at the beginning of the\n            // next event, not at the end of the previous one.\n            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\n                flushPassiveEffects();\n            }\n            var prevExecutionContext = executionContext;\n            executionContext |= BatchedContext;\n            var prevTransition = ReactCurrentBatchConfig$2.transition;\n            var previousPriority = getCurrentUpdatePriority();\n            try {\n                ReactCurrentBatchConfig$2.transition = null;\n                setCurrentUpdatePriority(DiscreteEventPriority);\n                if (fn) {\n                    return fn();\n                } else {\n                    return undefined;\n                }\n            } finally{\n                setCurrentUpdatePriority(previousPriority);\n                ReactCurrentBatchConfig$2.transition = prevTransition;\n                executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n                // Note that this will happen even if batchedUpdates is higher up\n                // the stack.\n                if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n                    flushSyncCallbacks();\n                }\n            }\n        }\n        function isAlreadyRendering() {\n            // Used by the renderer to print a warning if certain APIs are called from\n            // the wrong context.\n            return (executionContext & (RenderContext | CommitContext)) !== NoContext;\n        }\n        function flushControlled(fn) {\n            var prevExecutionContext = executionContext;\n            executionContext |= BatchedContext;\n            var prevTransition = ReactCurrentBatchConfig$2.transition;\n            var previousPriority = getCurrentUpdatePriority();\n            try {\n                ReactCurrentBatchConfig$2.transition = null;\n                setCurrentUpdatePriority(DiscreteEventPriority);\n                fn();\n            } finally{\n                setCurrentUpdatePriority(previousPriority);\n                ReactCurrentBatchConfig$2.transition = prevTransition;\n                executionContext = prevExecutionContext;\n                if (executionContext === NoContext) {\n                    // Flush the immediate callbacks that were scheduled during this batch\n                    resetRenderTimer();\n                    flushSyncCallbacks();\n                }\n            }\n        }\n        function pushRenderLanes(fiber, lanes) {\n            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);\n        }\n        function popRenderLanes(fiber) {\n            subtreeRenderLanes = subtreeRenderLanesCursor.current;\n            pop(subtreeRenderLanesCursor, fiber);\n        }\n        function prepareFreshStack(root, lanes) {\n            root.finishedWork = null;\n            root.finishedLanes = NoLanes;\n            var timeoutHandle = root.timeoutHandle;\n            if (timeoutHandle !== noTimeout) {\n                // The root previous suspended and scheduled a timeout to commit a fallback\n                // state. Now that we have additional work, cancel the timeout.\n                root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n                cancelTimeout(timeoutHandle);\n            }\n            if (workInProgress !== null) {\n                var interruptedWork = workInProgress.return;\n                while(interruptedWork !== null){\n                    var current = interruptedWork.alternate;\n                    unwindInterruptedWork(current, interruptedWork);\n                    interruptedWork = interruptedWork.return;\n                }\n            }\n            workInProgressRoot = root;\n            var rootWorkInProgress = createWorkInProgress(root.current, null);\n            workInProgress = rootWorkInProgress;\n            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n            workInProgressRootExitStatus = RootInProgress;\n            workInProgressRootFatalError = null;\n            workInProgressRootSkippedLanes = NoLanes;\n            workInProgressRootInterleavedUpdatedLanes = NoLanes;\n            workInProgressRootPingedLanes = NoLanes;\n            workInProgressRootConcurrentErrors = null;\n            workInProgressRootRecoverableErrors = null;\n            enqueueInterleavedUpdates();\n            {\n                ReactStrictModeWarnings.discardPendingWarnings();\n            }\n            return rootWorkInProgress;\n        }\n        function handleError(root, thrownValue) {\n            do {\n                var erroredWork = workInProgress;\n                try {\n                    // Reset module-level state that was set during the render phase.\n                    resetContextDependencies();\n                    resetHooksAfterThrow();\n                    resetCurrentFiber(); // TODO: I found and added this missing line while investigating a\n                    // separate issue. Write a regression test using string refs.\n                    ReactCurrentOwner$2.current = null;\n                    if (erroredWork === null || erroredWork.return === null) {\n                        // Expected to be working on a non-root fiber. This is a fatal error\n                        // because there's no ancestor that can handle it; the root is\n                        // supposed to capture all errors that weren't caught by an error\n                        // boundary.\n                        workInProgressRootExitStatus = RootFatalErrored;\n                        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next\n                        // sibling, or the parent if there are no siblings. But since the root\n                        // has no siblings nor a parent, we set it to null. Usually this is\n                        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n                        // intentionally not calling those, we need set it here.\n                        // TODO: Consider calling `unwindWork` to pop the contexts.\n                        workInProgress = null;\n                        return;\n                    }\n                    if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n                        // Record the time spent rendering before an error was thrown. This\n                        // avoids inaccurate Profiler durations in the case of a\n                        // suspended render.\n                        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n                    }\n                    if (enableSchedulingProfiler) {\n                        markComponentRenderStopped();\n                        if (thrownValue !== null && typeof thrownValue === \"object\" && typeof thrownValue.then === \"function\") {\n                            var wakeable = thrownValue;\n                            markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);\n                        } else {\n                            markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);\n                        }\n                    }\n                    throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);\n                    completeUnitOfWork(erroredWork);\n                } catch (yetAnotherThrownValue) {\n                    // Something in the return path also threw.\n                    thrownValue = yetAnotherThrownValue;\n                    if (workInProgress === erroredWork && erroredWork !== null) {\n                        // If this boundary has already errored, then we had trouble processing\n                        // the error. Bubble it to the next boundary.\n                        erroredWork = erroredWork.return;\n                        workInProgress = erroredWork;\n                    } else {\n                        erroredWork = workInProgress;\n                    }\n                    continue;\n                } // Return to the normal work loop.\n                return;\n            }while (true);\n        }\n        function pushDispatcher() {\n            var prevDispatcher = ReactCurrentDispatcher$2.current;\n            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;\n            if (prevDispatcher === null) {\n                // The React isomorphic package does not include a default dispatcher.\n                // Instead the first renderer will lazily attach one, in order to give\n                // nicer error messages.\n                return ContextOnlyDispatcher;\n            } else {\n                return prevDispatcher;\n            }\n        }\n        function popDispatcher(prevDispatcher) {\n            ReactCurrentDispatcher$2.current = prevDispatcher;\n        }\n        function markCommitTimeOfFallback() {\n            globalMostRecentFallbackTime = now$1();\n        }\n        function markSkippedUpdateLanes(lane) {\n            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n        }\n        function renderDidSuspend() {\n            if (workInProgressRootExitStatus === RootInProgress) {\n                workInProgressRootExitStatus = RootSuspended;\n            }\n        }\n        function renderDidSuspendDelayIfPossible() {\n            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {\n                workInProgressRootExitStatus = RootSuspendedWithDelay;\n            } // Check if there are updates that we skipped tree that might have unblocked\n            // this render.\n            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {\n                // Mark the current render as suspended so that we switch to working on\n                // the updates that were skipped. Usually we only suspend at the end of\n                // the render phase.\n                // TODO: We should probably always mark the root as suspended immediately\n                // (inside this function), since by suspending at the end of the render\n                // phase introduces a potential mistake where we suspend lanes that were\n                // pinged or updated while we were rendering.\n                markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);\n            }\n        }\n        function renderDidError(error) {\n            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n                workInProgressRootExitStatus = RootErrored;\n            }\n            if (workInProgressRootConcurrentErrors === null) {\n                workInProgressRootConcurrentErrors = [\n                    error\n                ];\n            } else {\n                workInProgressRootConcurrentErrors.push(error);\n            }\n        } // Called during render to determine if anything has suspended.\n        // Returns false if we're not sure.\n        function renderHasNotSuspendedYet() {\n            // If something errored or completed, we can't really be sure,\n            // so those are false.\n            return workInProgressRootExitStatus === RootInProgress;\n        }\n        function renderRootSync(root, lanes) {\n            var prevExecutionContext = executionContext;\n            executionContext |= RenderContext;\n            var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n            // and prepare a fresh one. Otherwise we'll continue where we left off.\n            if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n                {\n                    if (isDevToolsPresent) {\n                        var memoizedUpdaters = root.memoizedUpdaters;\n                        if (memoizedUpdaters.size > 0) {\n                            restorePendingUpdaters(root, workInProgressRootRenderLanes);\n                            memoizedUpdaters.clear();\n                        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n                        // If we bailout on this work, we'll move them back (like above).\n                        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n                        // That way we can keep the current update and future updates separate.\n                        movePendingFibersToMemoized(root, lanes);\n                    }\n                }\n                prepareFreshStack(root, lanes);\n            }\n            {\n                markRenderStarted(lanes);\n            }\n            do {\n                try {\n                    workLoopSync();\n                    break;\n                } catch (thrownValue) {\n                    handleError(root, thrownValue);\n                }\n            }while (true);\n            resetContextDependencies();\n            executionContext = prevExecutionContext;\n            popDispatcher(prevDispatcher);\n            if (workInProgress !== null) {\n                // This is a sync render, so we should have finished the whole tree.\n                throw new Error(\"Cannot commit an incomplete root. This error is likely caused by a \" + \"bug in React. Please file an issue.\");\n            }\n            {\n                markRenderStopped();\n            }\n            workInProgressRoot = null;\n            workInProgressRootRenderLanes = NoLanes;\n            return workInProgressRootExitStatus;\n        } // The work loop is an extremely hot path. Tell Closure not to inline it.\n        /** @noinline */ function workLoopSync() {\n            // Already timed out, so perform work without checking if we need to yield.\n            while(workInProgress !== null){\n                performUnitOfWork(workInProgress);\n            }\n        }\n        function renderRootConcurrent(root, lanes) {\n            var prevExecutionContext = executionContext;\n            executionContext |= RenderContext;\n            var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n            // and prepare a fresh one. Otherwise we'll continue where we left off.\n            if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n                {\n                    if (isDevToolsPresent) {\n                        var memoizedUpdaters = root.memoizedUpdaters;\n                        if (memoizedUpdaters.size > 0) {\n                            restorePendingUpdaters(root, workInProgressRootRenderLanes);\n                            memoizedUpdaters.clear();\n                        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n                        // If we bailout on this work, we'll move them back (like above).\n                        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n                        // That way we can keep the current update and future updates separate.\n                        movePendingFibersToMemoized(root, lanes);\n                    }\n                }\n                resetRenderTimer();\n                prepareFreshStack(root, lanes);\n            }\n            {\n                markRenderStarted(lanes);\n            }\n            do {\n                try {\n                    workLoopConcurrent();\n                    break;\n                } catch (thrownValue) {\n                    handleError(root, thrownValue);\n                }\n            }while (true);\n            resetContextDependencies();\n            popDispatcher(prevDispatcher);\n            executionContext = prevExecutionContext;\n            if (workInProgress !== null) {\n                // Still work remaining.\n                {\n                    markRenderYielded();\n                }\n                return RootInProgress;\n            } else {\n                // Completed the tree.\n                {\n                    markRenderStopped();\n                }\n                workInProgressRoot = null;\n                workInProgressRootRenderLanes = NoLanes; // Return the final exit status.\n                return workInProgressRootExitStatus;\n            }\n        }\n        /** @noinline */ function workLoopConcurrent() {\n            // Perform work until Scheduler asks us to yield\n            while(workInProgress !== null && !shouldYield()){\n                performUnitOfWork(workInProgress);\n            }\n        }\n        function performUnitOfWork(unitOfWork) {\n            // The current, flushed, state of this fiber is the alternate. Ideally\n            // nothing should rely on this, but relying on it here means that we don't\n            // need an additional field on the work in progress.\n            var current = unitOfWork.alternate;\n            setCurrentFiber(unitOfWork);\n            var next;\n            if ((unitOfWork.mode & ProfileMode) !== NoMode) {\n                startProfilerTimer(unitOfWork);\n                next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n                stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n            } else {\n                next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n            }\n            resetCurrentFiber();\n            unitOfWork.memoizedProps = unitOfWork.pendingProps;\n            if (next === null) {\n                // If this doesn't spawn new work, complete the current work.\n                completeUnitOfWork(unitOfWork);\n            } else {\n                workInProgress = next;\n            }\n            ReactCurrentOwner$2.current = null;\n        }\n        function completeUnitOfWork(unitOfWork) {\n            // Attempt to complete the current unit of work, then move to the next\n            // sibling. If there are no more siblings, return to the parent fiber.\n            var completedWork = unitOfWork;\n            do {\n                // The current, flushed, state of this fiber is the alternate. Ideally\n                // nothing should rely on this, but relying on it here means that we don't\n                // need an additional field on the work in progress.\n                var current = completedWork.alternate;\n                var returnFiber = completedWork.return; // Check if the work completed or if something threw.\n                if ((completedWork.flags & Incomplete) === NoFlags) {\n                    setCurrentFiber(completedWork);\n                    var next = void 0;\n                    if ((completedWork.mode & ProfileMode) === NoMode) {\n                        next = completeWork(current, completedWork, subtreeRenderLanes);\n                    } else {\n                        startProfilerTimer(completedWork);\n                        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.\n                        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n                    }\n                    resetCurrentFiber();\n                    if (next !== null) {\n                        // Completing this fiber spawned new work. Work on that next.\n                        workInProgress = next;\n                        return;\n                    }\n                } else {\n                    // This fiber did not complete because something threw. Pop values off\n                    // the stack without entering the complete phase. If this is a boundary,\n                    // capture values if possible.\n                    var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.\n                    if (_next !== null) {\n                        // If completing this work spawned new work, do that next. We'll come\n                        // back here again.\n                        // Since we're restarting, remove anything that is not a host effect\n                        // from the effect tag.\n                        _next.flags &= HostEffectMask;\n                        workInProgress = _next;\n                        return;\n                    }\n                    if ((completedWork.mode & ProfileMode) !== NoMode) {\n                        // Record the render duration for the fiber that errored.\n                        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.\n                        var actualDuration = completedWork.actualDuration;\n                        var child = completedWork.child;\n                        while(child !== null){\n                            actualDuration += child.actualDuration;\n                            child = child.sibling;\n                        }\n                        completedWork.actualDuration = actualDuration;\n                    }\n                    if (returnFiber !== null) {\n                        // Mark the parent fiber as incomplete and clear its subtree flags.\n                        returnFiber.flags |= Incomplete;\n                        returnFiber.subtreeFlags = NoFlags;\n                        returnFiber.deletions = null;\n                    } else {\n                        // We've unwound all the way to the root.\n                        workInProgressRootExitStatus = RootDidNotComplete;\n                        workInProgress = null;\n                        return;\n                    }\n                }\n                var siblingFiber = completedWork.sibling;\n                if (siblingFiber !== null) {\n                    // If there is more work to do in this returnFiber, do that next.\n                    workInProgress = siblingFiber;\n                    return;\n                } // Otherwise, return to the parent\n                completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n                workInProgress = completedWork;\n            }while (completedWork !== null); // We've reached the root.\n            if (workInProgressRootExitStatus === RootInProgress) {\n                workInProgressRootExitStatus = RootCompleted;\n            }\n        }\n        function commitRoot(root, recoverableErrors) {\n            // TODO: This no longer makes any sense. We already wrap the mutation and\n            // layout phases. Should be able to remove.\n            var previousUpdateLanePriority = getCurrentUpdatePriority();\n            var prevTransition = ReactCurrentBatchConfig$2.transition;\n            try {\n                ReactCurrentBatchConfig$2.transition = null;\n                setCurrentUpdatePriority(DiscreteEventPriority);\n                commitRootImpl(root, recoverableErrors, previousUpdateLanePriority);\n            } finally{\n                ReactCurrentBatchConfig$2.transition = prevTransition;\n                setCurrentUpdatePriority(previousUpdateLanePriority);\n            }\n            return null;\n        }\n        function commitRootImpl(root, recoverableErrors, renderPriorityLevel) {\n            do {\n                // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n                // means `flushPassiveEffects` will sometimes result in additional\n                // passive effects. So we need to keep flushing in a loop until there are\n                // no more pending effects.\n                // TODO: Might be better if `flushPassiveEffects` did not automatically\n                // flush synchronous work at the end, to avoid factoring hazards like this.\n                flushPassiveEffects();\n            }while (rootWithPendingPassiveEffects !== null);\n            flushRenderPhaseStrictModeWarningsInDEV();\n            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n                throw new Error(\"Should not already be working.\");\n            }\n            var finishedWork = root.finishedWork;\n            var lanes = root.finishedLanes;\n            {\n                markCommitStarted(lanes);\n            }\n            if (finishedWork === null) {\n                {\n                    markCommitStopped();\n                }\n                return null;\n            } else {\n                {\n                    if (lanes === NoLanes) {\n                        error(\"root.finishedLanes should not be empty during a commit. This is a \" + \"bug in React.\");\n                    }\n                }\n            }\n            root.finishedWork = null;\n            root.finishedLanes = NoLanes;\n            if (finishedWork === root.current) {\n                throw new Error(\"Cannot commit the same tree as before. This error is likely caused by \" + \"a bug in React. Please file an issue.\");\n            } // commitRoot never returns a continuation; it always finishes synchronously.\n            // So we can clear these now to allow a new callback to be scheduled.\n            root.callbackNode = null;\n            root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first\n            // pending time is whatever is left on the root fiber.\n            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n            markRootFinished(root, remainingLanes);\n            if (root === workInProgressRoot) {\n                // We can reset these now that they are finished.\n                workInProgressRoot = null;\n                workInProgress = null;\n                workInProgressRootRenderLanes = NoLanes;\n            } // If there are pending passive effects, schedule a callback to process them.\n            // Do this as early as possible, so it is queued before anything else that\n            // might get scheduled in the commit phase. (See #16714.)\n            // TODO: Delete all other places that schedule the passive effect callback\n            // They're redundant.\n            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {\n                if (!rootDoesHavePassiveEffects) {\n                    rootDoesHavePassiveEffects = true;\n                    scheduleCallback$1(NormalPriority, function() {\n                        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\n                        // *after* passive effects fire to avoid freeing a cache pool that may\n                        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n                        return null;\n                    });\n                }\n            } // Check if there are any effects in the whole tree.\n            // TODO: This is left over from the effect list implementation, where we had\n            // to check for the existence of `firstEffect` to satisfy Flow. I think the\n            // only other reason this optimization exists is because it affects profiling.\n            // Reconsider whether this is necessary.\n            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n            if (subtreeHasEffects || rootHasEffect) {\n                var prevTransition = ReactCurrentBatchConfig$2.transition;\n                ReactCurrentBatchConfig$2.transition = null;\n                var previousPriority = getCurrentUpdatePriority();\n                setCurrentUpdatePriority(DiscreteEventPriority);\n                var prevExecutionContext = executionContext;\n                executionContext |= CommitContext; // Reset this to null before calling lifecycles\n                ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\n                // of the effect list for each phase: all mutation effects come before all\n                // layout effects, and so on.\n                // The first phase a \"before mutation\" phase. We use this phase to read the\n                // state of the host tree right before we mutate it. This is where\n                // getSnapshotBeforeUpdate is called.\n                var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);\n                {\n                    // Mark the current commit time to be shared by all Profilers in this\n                    // batch. This enables them to be grouped later.\n                    recordCommitTime();\n                }\n                commitMutationEffects(root, finishedWork, lanes);\n                resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after\n                // the mutation phase, so that the previous tree is still current during\n                // componentWillUnmount, but before the layout phase, so that the finished\n                // work is current during componentDidMount/Update.\n                root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n                {\n                    markLayoutEffectsStarted(lanes);\n                }\n                commitLayoutEffects(finishedWork, root, lanes);\n                {\n                    markLayoutEffectsStopped();\n                }\n                // opportunity to paint.\n                requestPaint();\n                executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\n                setCurrentUpdatePriority(previousPriority);\n                ReactCurrentBatchConfig$2.transition = prevTransition;\n            } else {\n                // No effects.\n                root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n                // no effects.\n                // TODO: Maybe there's a better way to report this.\n                {\n                    recordCommitTime();\n                }\n            }\n            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n            if (rootDoesHavePassiveEffects) {\n                // This commit has passive effects. Stash a reference to them. But don't\n                // schedule a callback until after flushing layout work.\n                rootDoesHavePassiveEffects = false;\n                rootWithPendingPassiveEffects = root;\n                pendingPassiveEffectsLanes = lanes;\n            } // Read this again, since an effect might have updated it\n            remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n            // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n            // is to detect whether something might have called setState inside\n            // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n            // inside `componentDidCatch` is itself flawed — that's why we recommend\n            // `getDerivedStateFromError` instead. However, it could be improved by\n            // checking if remainingLanes includes Sync work, instead of whether there's\n            // any work remaining at all (which would also include stuff like Suspense\n            // retries or transitions). It's been like this for a while, though, so fixing\n            // it probably isn't that urgent.\n            if (remainingLanes === NoLanes) {\n                // If there's no remaining work, we can clear the set of already failed\n                // error boundaries.\n                legacyErrorBoundariesThatAlreadyFailed = null;\n            }\n            {\n                if (!rootDidHavePassiveEffects) {\n                    commitDoubleInvokeEffectsInDEV(root.current, false);\n                }\n            }\n            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n            {\n                if (isDevToolsPresent) {\n                    root.memoizedUpdaters.clear();\n                }\n            }\n            {\n                onCommitRoot$1();\n            }\n            // additional work on this root is scheduled.\n            ensureRootIsScheduled(root, now$1());\n            if (recoverableErrors !== null) {\n                // There were errors during this render, but recovered from them without\n                // needing to surface it to the UI. We log them here.\n                var onRecoverableError = root.onRecoverableError;\n                for(var i = 0; i < recoverableErrors.length; i++){\n                    var recoverableError = recoverableErrors[i];\n                    onRecoverableError(recoverableError);\n                }\n            }\n            if (hasUncaughtError) {\n                hasUncaughtError = false;\n                var error$1 = firstUncaughtError;\n                firstUncaughtError = null;\n                throw error$1;\n            } // If the passive effects are the result of a discrete render, flush them\n            // synchronously at the end of the current task so that the result is\n            // immediately observable. Otherwise, we assume that they are not\n            // order-dependent and do not need to be observed by external systems, so we\n            // can wait until after paint.\n            // TODO: We can optimize this by not scheduling the callback earlier. Since we\n            // currently schedule the callback in multiple places, will wait until those\n            // are consolidated.\n            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {\n                flushPassiveEffects();\n            } // Read this again, since a passive effect might have updated it\n            remainingLanes = root.pendingLanes;\n            if (includesSomeLane(remainingLanes, SyncLane)) {\n                {\n                    markNestedUpdateScheduled();\n                }\n                // finishing. If there are too many, it indicates an infinite update loop.\n                if (root === rootWithNestedUpdates) {\n                    nestedUpdateCount++;\n                } else {\n                    nestedUpdateCount = 0;\n                    rootWithNestedUpdates = root;\n                }\n            } else {\n                nestedUpdateCount = 0;\n            } // If layout work was scheduled, flush it now.\n            flushSyncCallbacks();\n            {\n                markCommitStopped();\n            }\n            return null;\n        }\n        function flushPassiveEffects() {\n            // Returns whether passive effects were flushed.\n            // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n            // probably just combine the two functions. I believe they were only separate\n            // in the first place because we used to wrap it with\n            // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n            // priority within React itself, so we can mutate the variable directly.\n            if (rootWithPendingPassiveEffects !== null) {\n                var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n                var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n                var prevTransition = ReactCurrentBatchConfig$2.transition;\n                var previousPriority = getCurrentUpdatePriority();\n                try {\n                    ReactCurrentBatchConfig$2.transition = null;\n                    setCurrentUpdatePriority(priority);\n                    return flushPassiveEffectsImpl();\n                } finally{\n                    setCurrentUpdatePriority(previousPriority);\n                    ReactCurrentBatchConfig$2.transition = prevTransition; // Once passive effects have run for the tree - giving components a\n                }\n            }\n            return false;\n        }\n        function enqueuePendingPassiveProfilerEffect(fiber) {\n            {\n                pendingPassiveProfilerEffects.push(fiber);\n                if (!rootDoesHavePassiveEffects) {\n                    rootDoesHavePassiveEffects = true;\n                    scheduleCallback$1(NormalPriority, function() {\n                        flushPassiveEffects();\n                        return null;\n                    });\n                }\n            }\n        }\n        function flushPassiveEffectsImpl() {\n            if (rootWithPendingPassiveEffects === null) {\n                return false;\n            }\n            var root = rootWithPendingPassiveEffects;\n            var lanes = pendingPassiveEffectsLanes;\n            rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n            // Figure out why and fix it. It's not causing any known issues (probably\n            // because it's only used for profiling), but it's a refactor hazard.\n            pendingPassiveEffectsLanes = NoLanes;\n            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n                throw new Error(\"Cannot flush passive effects while already rendering.\");\n            }\n            {\n                markPassiveEffectsStarted(lanes);\n            }\n            var prevExecutionContext = executionContext;\n            executionContext |= CommitContext;\n            commitPassiveUnmountEffects(root.current);\n            commitPassiveMountEffects(root, root.current); // TODO: Move to commitPassiveMountEffects\n            {\n                var profilerEffects = pendingPassiveProfilerEffects;\n                pendingPassiveProfilerEffects = [];\n                for(var i = 0; i < profilerEffects.length; i++){\n                    var _fiber = profilerEffects[i];\n                    commitPassiveEffectDurations(root, _fiber);\n                }\n            }\n            {\n                markPassiveEffectsStopped();\n            }\n            {\n                commitDoubleInvokeEffectsInDEV(root.current, true);\n            }\n            executionContext = prevExecutionContext;\n            flushSyncCallbacks(); // If additional passive effects were scheduled, increment a counter. If this\n            // exceeds the limit, we'll fire a warning.\n            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1; // TODO: Move to commitPassiveMountEffects\n            onPostCommitRoot(root);\n            {\n                var stateNode = root.current.stateNode;\n                stateNode.effectDuration = 0;\n                stateNode.passiveEffectDuration = 0;\n            }\n            return true;\n        }\n        function isAlreadyFailedLegacyErrorBoundary(instance) {\n            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n        }\n        function markLegacyErrorBoundaryAsFailed(instance) {\n            if (legacyErrorBoundariesThatAlreadyFailed === null) {\n                legacyErrorBoundariesThatAlreadyFailed = new Set([\n                    instance\n                ]);\n            } else {\n                legacyErrorBoundariesThatAlreadyFailed.add(instance);\n            }\n        }\n        function prepareToThrowUncaughtError(error) {\n            if (!hasUncaughtError) {\n                hasUncaughtError = true;\n                firstUncaughtError = error;\n            }\n        }\n        var onUncaughtError = prepareToThrowUncaughtError;\n        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n            var errorInfo = createCapturedValue(error, sourceFiber);\n            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n            enqueueUpdate(rootFiber, update);\n            var eventTime = requestEventTime();\n            var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);\n            if (root !== null) {\n                markRootUpdated(root, SyncLane, eventTime);\n                ensureRootIsScheduled(root, eventTime);\n            }\n        }\n        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {\n            if (sourceFiber.tag === HostRoot) {\n                // Error was thrown at the root. There is no parent, so the root\n                // itself should capture it.\n                captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n                return;\n            }\n            var fiber = null;\n            {\n                fiber = nearestMountedAncestor;\n            }\n            while(fiber !== null){\n                if (fiber.tag === HostRoot) {\n                    captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n                    return;\n                } else if (fiber.tag === ClassComponent) {\n                    var ctor = fiber.type;\n                    var instance = fiber.stateNode;\n                    if (typeof ctor.getDerivedStateFromError === \"function\" || typeof instance.componentDidCatch === \"function\" && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n                        var errorInfo = createCapturedValue(error$1, sourceFiber);\n                        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n                        enqueueUpdate(fiber, update);\n                        var eventTime = requestEventTime();\n                        var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);\n                        if (root !== null) {\n                            markRootUpdated(root, SyncLane, eventTime);\n                            ensureRootIsScheduled(root, eventTime);\n                        }\n                        return;\n                    }\n                }\n                fiber = fiber.return;\n            }\n            {\n                // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n                // will fire for errors that are thrown by destroy functions inside deleted\n                // trees. What it should instead do is propagate the error to the parent of\n                // the deleted tree. In the meantime, do not add this warning to the\n                // allowlist; this is only for our internal use.\n                error(\"Internal React error: Attempted to capture a commit phase error \" + \"inside a detached tree. This indicates a bug in React. Likely \" + \"causes include deleting the same fiber more than once, committing an \" + \"already-finished tree, or an inconsistent return pointer.\\n\\n\" + \"Error message:\\n\\n%s\", error$1);\n            }\n        }\n        function pingSuspendedRoot(root, wakeable, pingedLanes) {\n            var pingCache = root.pingCache;\n            if (pingCache !== null) {\n                // The wakeable resolved, so we no longer need to memoize, because it will\n                // never be thrown again.\n                pingCache.delete(wakeable);\n            }\n            var eventTime = requestEventTime();\n            markRootPinged(root, pingedLanes);\n            warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n            if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n                // Received a ping at the same priority level at which we're currently\n                // rendering. We might want to restart this render. This should mirror\n                // the logic of whether or not a root suspends once it completes.\n                // TODO: If we're rendering sync either due to Sync, Batched or expired,\n                // we should probably never restart.\n                // If we're suspended with delay, or if it's a retry, we'll always suspend\n                // so we can always restart.\n                if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n                    // Restart from the root.\n                    prepareFreshStack(root, NoLanes);\n                } else {\n                    // Even though we can't restart right now, we might get an\n                    // opportunity later. So we mark this render as having a ping.\n                    workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n                }\n            }\n            ensureRootIsScheduled(root, eventTime);\n        }\n        function retryTimedOutBoundary(boundaryFiber, retryLane) {\n            // The boundary fiber (a Suspense component or SuspenseList component)\n            // previously was rendered in its fallback state. One of the promises that\n            // suspended it has resolved, which means at least part of the tree was\n            // likely unblocked. Try rendering again, at a new lanes.\n            if (retryLane === NoLane) {\n                // TODO: Assign this to `suspenseState.retryLane`? to avoid\n                // unnecessary entanglement?\n                retryLane = requestRetryLane(boundaryFiber);\n            } // TODO: Special case idle priority?\n            var eventTime = requestEventTime();\n            var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);\n            if (root !== null) {\n                markRootUpdated(root, retryLane, eventTime);\n                ensureRootIsScheduled(root, eventTime);\n            }\n        }\n        function retryDehydratedSuspenseBoundary(boundaryFiber) {\n            var suspenseState = boundaryFiber.memoizedState;\n            var retryLane = NoLane;\n            if (suspenseState !== null) {\n                retryLane = suspenseState.retryLane;\n            }\n            retryTimedOutBoundary(boundaryFiber, retryLane);\n        }\n        function resolveRetryWakeable(boundaryFiber, wakeable) {\n            var retryLane = NoLane; // Default\n            var retryCache;\n            {\n                switch(boundaryFiber.tag){\n                    case SuspenseComponent:\n                        retryCache = boundaryFiber.stateNode;\n                        var suspenseState = boundaryFiber.memoizedState;\n                        if (suspenseState !== null) {\n                            retryLane = suspenseState.retryLane;\n                        }\n                        break;\n                    case SuspenseListComponent:\n                        retryCache = boundaryFiber.stateNode;\n                        break;\n                    default:\n                        throw new Error(\"Pinged unknown suspense boundary type. \" + \"This is probably a bug in React.\");\n                }\n            }\n            if (retryCache !== null) {\n                // The wakeable resolved, so we no longer need to memoize, because it will\n                // never be thrown again.\n                retryCache.delete(wakeable);\n            }\n            retryTimedOutBoundary(boundaryFiber, retryLane);\n        } // Computes the next Just Noticeable Difference (JND) boundary.\n        // The theory is that a person can't tell the difference between small differences in time.\n        // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n        // difference in the experience. However, waiting for longer might mean that we can avoid\n        // showing an intermediate loading state. The longer we have already waited, the harder it\n        // is to tell small differences in time. Therefore, the longer we've already waited,\n        // the longer we can wait additionally. At some point we have to give up though.\n        // We pick a train model where the next boundary commits at a consistent schedule.\n        // These particular numbers are vague estimates. We expect to adjust them based on research.\n        function jnd(timeElapsed) {\n            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;\n        }\n        function checkForNestedUpdates() {\n            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n                nestedUpdateCount = 0;\n                rootWithNestedUpdates = null;\n                throw new Error(\"Maximum update depth exceeded. This can happen when a component \" + \"repeatedly calls setState inside componentWillUpdate or \" + \"componentDidUpdate. React limits the number of nested updates to \" + \"prevent infinite loops.\");\n            }\n            {\n                if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n                    nestedPassiveUpdateCount = 0;\n                    error(\"Maximum update depth exceeded. This can happen when a component \" + \"calls setState inside useEffect, but useEffect either doesn't \" + \"have a dependency array, or one of the dependencies changes on \" + \"every render.\");\n                }\n            }\n        }\n        function flushRenderPhaseStrictModeWarningsInDEV() {\n            {\n                ReactStrictModeWarnings.flushLegacyContextWarning();\n                {\n                    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n                }\n            }\n        }\n        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {\n            {\n                // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n                // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n                // Maybe not a big deal since this is DEV only behavior.\n                setCurrentFiber(fiber);\n                invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n                if (hasPassiveEffects) {\n                    invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);\n                }\n                invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n                if (hasPassiveEffects) {\n                    invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n                }\n                resetCurrentFiber();\n            }\n        }\n        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {\n            {\n                // We don't need to re-check StrictEffectsMode here.\n                // This function is only called if that check has already passed.\n                var current = firstChild;\n                var subtreeRoot = null;\n                while(current !== null){\n                    var primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n                    if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {\n                        current = current.child;\n                    } else {\n                        if ((current.flags & fiberFlags) !== NoFlags) {\n                            invokeEffectFn(current);\n                        }\n                        if (current.sibling !== null) {\n                            current = current.sibling;\n                        } else {\n                            current = subtreeRoot = current.return;\n                        }\n                    }\n                }\n            }\n        }\n        var didWarnStateUpdateForNotYetMountedComponent = null;\n        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n            {\n                if ((executionContext & RenderContext) !== NoContext) {\n                    // We let the other warning about render phase updates deal with this one.\n                    return;\n                }\n                if (!(fiber.mode & ConcurrentMode)) {\n                    return;\n                }\n                var tag = fiber.tag;\n                if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {\n                    // Only warn for user-defined components, not internal ones like Suspense.\n                    return;\n                } // We show the whole stack but dedupe on the top component's name because\n                // the problematic code almost always lies inside that component.\n                var componentName = getComponentNameFromFiber(fiber) || \"ReactComponent\";\n                if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n                    if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n                        return;\n                    }\n                    didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n                } else {\n                    didWarnStateUpdateForNotYetMountedComponent = new Set([\n                        componentName\n                    ]);\n                }\n                var previousFiber = current;\n                try {\n                    setCurrentFiber(fiber);\n                    error(\"Can't perform a React state update on a component that hasn't mounted yet. \" + \"This indicates that you have a side-effect in your render function that \" + \"asynchronously later calls tries to update the component. Move this work to \" + \"useEffect instead.\");\n                } finally{\n                    if (previousFiber) {\n                        setCurrentFiber(fiber);\n                    } else {\n                        resetCurrentFiber();\n                    }\n                }\n            }\n        }\n        var beginWork$1;\n        {\n            var dummyFiber = null;\n            beginWork$1 = function(current, unitOfWork, lanes) {\n                // If a component throws an error, we replay it again in a synchronously\n                // dispatched event, so that the debugger will treat it as an uncaught\n                // error See ReactErrorUtils for more information.\n                // Before entering the begin phase, copy the work-in-progress onto a dummy\n                // fiber. If beginWork throws, we'll use this to reset the state.\n                var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);\n                try {\n                    return beginWork(current, unitOfWork, lanes);\n                } catch (originalError) {\n                    if (originalError !== null && typeof originalError === \"object\" && typeof originalError.then === \"function\") {\n                        // Don't replay promises. Treat everything else like an error.\n                        throw originalError;\n                    } // Keep this code in sync with handleError; any changes here must have\n                    // corresponding changes there.\n                    resetContextDependencies();\n                    resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the\n                    // same fiber again.\n                    // Unwind the failed stack frame\n                    unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.\n                    assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n                    if (unitOfWork.mode & ProfileMode) {\n                        // Reset the profiler timer.\n                        startProfilerTimer(unitOfWork);\n                    } // Run beginWork again.\n                    invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);\n                    if (hasCaughtError()) {\n                        var replayError = clearCaughtError();\n                        if (typeof replayError === \"object\" && replayError !== null && replayError._suppressLogging && typeof originalError === \"object\" && originalError !== null && !originalError._suppressLogging) {\n                            // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n                            originalError._suppressLogging = true;\n                        }\n                    } // We always throw the original error in case the second render pass is not idempotent.\n                    // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\n                    throw originalError;\n                }\n            };\n        }\n        var didWarnAboutUpdateInRender = false;\n        var didWarnAboutUpdateInRenderForAnotherComponent;\n        {\n            didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n        }\n        function warnAboutRenderPhaseUpdatesInDEV(fiber) {\n            {\n                if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {\n                    switch(fiber.tag){\n                        case FunctionComponent:\n                        case ForwardRef:\n                        case SimpleMemoComponent:\n                            {\n                                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || \"Unknown\"; // Dedupe by the rendering component because it's the one that needs to be fixed.\n                                var dedupeKey = renderingComponentName;\n                                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n                                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n                                    var setStateComponentName = getComponentNameFromFiber(fiber) || \"Unknown\";\n                                    error(\"Cannot update a component (`%s`) while rendering a \" + \"different component (`%s`). To locate the bad setState() call inside `%s`, \" + \"follow the stack trace as described in https://reactjs.org/link/setstate-in-render\", setStateComponentName, renderingComponentName, renderingComponentName);\n                                }\n                                break;\n                            }\n                        case ClassComponent:\n                            {\n                                if (!didWarnAboutUpdateInRender) {\n                                    error(\"Cannot update during an existing state transition (such as \" + \"within `render`). Render methods should be a pure \" + \"function of props and state.\");\n                                    didWarnAboutUpdateInRender = true;\n                                }\n                                break;\n                            }\n                    }\n                }\n            }\n        }\n        function restorePendingUpdaters(root, lanes) {\n            {\n                if (isDevToolsPresent) {\n                    var memoizedUpdaters = root.memoizedUpdaters;\n                    memoizedUpdaters.forEach(function(schedulingFiber) {\n                        addFiberToLanesMap(root, schedulingFiber, lanes);\n                    }); // This function intentionally does not clear memoized updaters.\n                // Those may still be relevant to the current commit\n                // and a future one (e.g. Suspense).\n                }\n            }\n        }\n        var fakeActCallbackNode = {};\n        function scheduleCallback$1(priorityLevel, callback) {\n            {\n                // If we're currently inside an `act` scope, bypass Scheduler and push to\n                // the `act` queue instead.\n                var actQueue = ReactCurrentActQueue$1.current;\n                if (actQueue !== null) {\n                    actQueue.push(callback);\n                    return fakeActCallbackNode;\n                } else {\n                    return scheduleCallback(priorityLevel, callback);\n                }\n            }\n        }\n        function cancelCallback$1(callbackNode) {\n            if (callbackNode === fakeActCallbackNode) {\n                return;\n            } // In production, always call Scheduler. This function will be stripped out.\n            return cancelCallback(callbackNode);\n        }\n        function shouldForceFlushFallbacksInDEV() {\n            // Never force flush in production. This function should get stripped out.\n            return ReactCurrentActQueue$1.current !== null;\n        }\n        function warnIfUpdatesNotWrappedWithActDEV(fiber) {\n            {\n                if (fiber.mode & ConcurrentMode) {\n                    if (!isConcurrentActEnvironment()) {\n                        // Not in an act environment. No need to warn.\n                        return;\n                    }\n                } else {\n                    // Legacy mode has additional cases where we suppress a warning.\n                    if (!isLegacyActEnvironment()) {\n                        // Not in an act environment. No need to warn.\n                        return;\n                    }\n                    if (executionContext !== NoContext) {\n                        // Legacy mode doesn't warn if the update is batched, i.e.\n                        // batchedUpdates or flushSync.\n                        return;\n                    }\n                    if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {\n                        // For backwards compatibility with pre-hooks code, legacy mode only\n                        // warns for updates that originate from a hook.\n                        return;\n                    }\n                }\n                if (ReactCurrentActQueue$1.current === null) {\n                    var previousFiber = current;\n                    try {\n                        setCurrentFiber(fiber);\n                        error(\"An update to %s inside a test was not wrapped in act(...).\\n\\n\" + \"When testing, code that causes React state updates should be \" + \"wrapped into act(...):\\n\\n\" + \"act(() => {\\n\" + \"  /* fire events that update state */\\n\" + \"});\\n\" + \"/* assert on the output */\\n\\n\" + \"This ensures that you're testing the behavior the user would see \" + \"in the browser.\" + \" Learn more at https://reactjs.org/link/wrap-tests-with-act\", getComponentNameFromFiber(fiber));\n                    } finally{\n                        if (previousFiber) {\n                            setCurrentFiber(fiber);\n                        } else {\n                            resetCurrentFiber();\n                        }\n                    }\n                }\n            }\n        }\n        function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n            {\n                if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {\n                    error(\"A suspended resource finished loading inside a test, but the event \" + \"was not wrapped in act(...).\\n\\n\" + \"When testing, code that resolves suspended data should be wrapped \" + \"into act(...):\\n\\n\" + \"act(() => {\\n\" + \"  /* finish loading suspended data */\\n\" + \"});\\n\" + \"/* assert on the output */\\n\\n\" + \"This ensures that you're testing the behavior the user would see \" + \"in the browser.\" + \" Learn more at https://reactjs.org/link/wrap-tests-with-act\");\n                }\n            }\n        }\n        /* eslint-disable react-internal/prod-error-codes */ var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.\n        var failedBoundaries = null;\n        var setRefreshHandler = function(handler) {\n            {\n                resolveFamily = handler;\n            }\n        };\n        function resolveFunctionForHotReloading(type) {\n            {\n                if (resolveFamily === null) {\n                    // Hot reloading is disabled.\n                    return type;\n                }\n                var family = resolveFamily(type);\n                if (family === undefined) {\n                    return type;\n                } // Use the latest known implementation.\n                return family.current;\n            }\n        }\n        function resolveClassForHotReloading(type) {\n            // No implementation differences.\n            return resolveFunctionForHotReloading(type);\n        }\n        function resolveForwardRefForHotReloading(type) {\n            {\n                if (resolveFamily === null) {\n                    // Hot reloading is disabled.\n                    return type;\n                }\n                var family = resolveFamily(type);\n                if (family === undefined) {\n                    // Check if we're dealing with a real forwardRef. Don't want to crash early.\n                    if (type !== null && type !== undefined && typeof type.render === \"function\") {\n                        // ForwardRef is special because its resolved .type is an object,\n                        // but it's possible that we only have its inner render function in the map.\n                        // If that inner render function is different, we'll build a new forwardRef type.\n                        var currentRender = resolveFunctionForHotReloading(type.render);\n                        if (type.render !== currentRender) {\n                            var syntheticType = {\n                                $$typeof: REACT_FORWARD_REF_TYPE,\n                                render: currentRender\n                            };\n                            if (type.displayName !== undefined) {\n                                syntheticType.displayName = type.displayName;\n                            }\n                            return syntheticType;\n                        }\n                    }\n                    return type;\n                } // Use the latest known implementation.\n                return family.current;\n            }\n        }\n        function isCompatibleFamilyForHotReloading(fiber, element) {\n            {\n                if (resolveFamily === null) {\n                    // Hot reloading is disabled.\n                    return false;\n                }\n                var prevType = fiber.elementType;\n                var nextType = element.type; // If we got here, we know types aren't === equal.\n                var needsCompareFamilies = false;\n                var $$typeofNextType = typeof nextType === \"object\" && nextType !== null ? nextType.$$typeof : null;\n                switch(fiber.tag){\n                    case ClassComponent:\n                        {\n                            if (typeof nextType === \"function\") {\n                                needsCompareFamilies = true;\n                            }\n                            break;\n                        }\n                    case FunctionComponent:\n                        {\n                            if (typeof nextType === \"function\") {\n                                needsCompareFamilies = true;\n                            } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                                // We don't know the inner type yet.\n                                // We're going to assume that the lazy inner type is stable,\n                                // and so it is sufficient to avoid reconciling it away.\n                                // We're not going to unwrap or actually use the new lazy type.\n                                needsCompareFamilies = true;\n                            }\n                            break;\n                        }\n                    case ForwardRef:\n                        {\n                            if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n                                needsCompareFamilies = true;\n                            } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                                needsCompareFamilies = true;\n                            }\n                            break;\n                        }\n                    case MemoComponent:\n                    case SimpleMemoComponent:\n                        {\n                            if ($$typeofNextType === REACT_MEMO_TYPE) {\n                                // TODO: if it was but can no longer be simple,\n                                // we shouldn't set this.\n                                needsCompareFamilies = true;\n                            } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                                needsCompareFamilies = true;\n                            }\n                            break;\n                        }\n                    default:\n                        return false;\n                } // Check if both types have a family and it's the same one.\n                if (needsCompareFamilies) {\n                    // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n                    // This means both of them need to be registered to preserve state.\n                    // If we unwrapped and compared the inner types for wrappers instead,\n                    // then we would risk falsely saying two separate memo(Foo)\n                    // calls are equivalent because they wrap the same Foo function.\n                    var prevFamily = resolveFamily(prevType);\n                    if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n        }\n        function markFailedErrorBoundaryForHotReloading(fiber) {\n            {\n                if (resolveFamily === null) {\n                    // Hot reloading is disabled.\n                    return;\n                }\n                if (typeof WeakSet !== \"function\") {\n                    return;\n                }\n                if (failedBoundaries === null) {\n                    failedBoundaries = new WeakSet();\n                }\n                failedBoundaries.add(fiber);\n            }\n        }\n        var scheduleRefresh = function(root, update) {\n            {\n                if (resolveFamily === null) {\n                    // Hot reloading is disabled.\n                    return;\n                }\n                var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;\n                flushPassiveEffects();\n                flushSync(function() {\n                    scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\n                });\n            }\n        };\n        var scheduleRoot = function(root, element) {\n            {\n                if (root.context !== emptyContextObject) {\n                    // Super edge case: root has a legacy _renderSubtree context\n                    // but we don't know the parentComponent so we can't pass it.\n                    // Just ignore. We'll delete this with _renderSubtree code path later.\n                    return;\n                }\n                flushPassiveEffects();\n                flushSync(function() {\n                    updateContainer(element, root, null, null);\n                });\n            }\n        };\n        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\n            {\n                var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;\n                var candidateType = null;\n                switch(tag){\n                    case FunctionComponent:\n                    case SimpleMemoComponent:\n                    case ClassComponent:\n                        candidateType = type;\n                        break;\n                    case ForwardRef:\n                        candidateType = type.render;\n                        break;\n                }\n                if (resolveFamily === null) {\n                    throw new Error(\"Expected resolveFamily to be set during hot reload.\");\n                }\n                var needsRender = false;\n                var needsRemount = false;\n                if (candidateType !== null) {\n                    var family = resolveFamily(candidateType);\n                    if (family !== undefined) {\n                        if (staleFamilies.has(family)) {\n                            needsRemount = true;\n                        } else if (updatedFamilies.has(family)) {\n                            if (tag === ClassComponent) {\n                                needsRemount = true;\n                            } else {\n                                needsRender = true;\n                            }\n                        }\n                    }\n                }\n                if (failedBoundaries !== null) {\n                    if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {\n                        needsRemount = true;\n                    }\n                }\n                if (needsRemount) {\n                    fiber._debugNeedsRemount = true;\n                }\n                if (needsRemount || needsRender) {\n                    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n                }\n                if (child !== null && !needsRemount) {\n                    scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\n                }\n                if (sibling !== null) {\n                    scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\n                }\n            }\n        }\n        var findHostInstancesForRefresh = function(root, families) {\n            {\n                var hostInstances = new Set();\n                var types = new Set(families.map(function(family) {\n                    return family.current;\n                }));\n                findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\n                return hostInstances;\n            }\n        };\n        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\n            {\n                var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;\n                var candidateType = null;\n                switch(tag){\n                    case FunctionComponent:\n                    case SimpleMemoComponent:\n                    case ClassComponent:\n                        candidateType = type;\n                        break;\n                    case ForwardRef:\n                        candidateType = type.render;\n                        break;\n                }\n                var didMatch = false;\n                if (candidateType !== null) {\n                    if (types.has(candidateType)) {\n                        didMatch = true;\n                    }\n                }\n                if (didMatch) {\n                    // We have a match. This only drills down to the closest host components.\n                    // There's no need to search deeper because for the purpose of giving\n                    // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n                    findHostInstancesForFiberShallowly(fiber, hostInstances);\n                } else {\n                    // If there's no match, maybe there will be one further down in the child tree.\n                    if (child !== null) {\n                        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\n                    }\n                }\n                if (sibling !== null) {\n                    findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\n                }\n            }\n        }\n        function findHostInstancesForFiberShallowly(fiber, hostInstances) {\n            {\n                var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\n                if (foundHostInstances) {\n                    return;\n                } // If we didn't find any host children, fallback to closest host parent.\n                var node = fiber;\n                while(true){\n                    switch(node.tag){\n                        case HostComponent:\n                            hostInstances.add(node.stateNode);\n                            return;\n                        case HostPortal:\n                            hostInstances.add(node.stateNode.containerInfo);\n                            return;\n                        case HostRoot:\n                            hostInstances.add(node.stateNode.containerInfo);\n                            return;\n                    }\n                    if (node.return === null) {\n                        throw new Error(\"Expected to reach root first.\");\n                    }\n                    node = node.return;\n                }\n            }\n        }\n        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n            {\n                var node = fiber;\n                var foundHostInstances = false;\n                while(true){\n                    if (node.tag === HostComponent) {\n                        // We got a match.\n                        foundHostInstances = true;\n                        hostInstances.add(node.stateNode); // There may still be more, so keep searching.\n                    } else if (node.child !== null) {\n                        node.child.return = node;\n                        node = node.child;\n                        continue;\n                    }\n                    if (node === fiber) {\n                        return foundHostInstances;\n                    }\n                    while(node.sibling === null){\n                        if (node.return === null || node.return === fiber) {\n                            return foundHostInstances;\n                        }\n                        node = node.return;\n                    }\n                    node.sibling.return = node.return;\n                    node = node.sibling;\n                }\n            }\n            return false;\n        }\n        var hasBadMapPolyfill;\n        {\n            hasBadMapPolyfill = false;\n            try {\n                var nonExtensibleObject = Object.preventExtensions({});\n                /* eslint-disable no-new */ new Map([\n                    [\n                        nonExtensibleObject,\n                        null\n                    ]\n                ]);\n                new Set([\n                    nonExtensibleObject\n                ]);\n            /* eslint-enable no-new */ } catch (e) {\n                // TODO: Consider warning about bad polyfills\n                hasBadMapPolyfill = true;\n            }\n        }\n        function FiberNode(tag, pendingProps, key, mode) {\n            // Instance\n            this.tag = tag;\n            this.key = key;\n            this.elementType = null;\n            this.type = null;\n            this.stateNode = null; // Fiber\n            this.return = null;\n            this.child = null;\n            this.sibling = null;\n            this.index = 0;\n            this.ref = null;\n            this.pendingProps = pendingProps;\n            this.memoizedProps = null;\n            this.updateQueue = null;\n            this.memoizedState = null;\n            this.dependencies = null;\n            this.mode = mode; // Effects\n            this.flags = NoFlags;\n            this.subtreeFlags = NoFlags;\n            this.deletions = null;\n            this.lanes = NoLanes;\n            this.childLanes = NoLanes;\n            this.alternate = null;\n            {\n                // Note: The following is done to avoid a v8 performance cliff.\n                //\n                // Initializing the fields below to smis and later updating them with\n                // double values will cause Fibers to end up having separate shapes.\n                // This behavior/bug has something to do with Object.preventExtension().\n                // Fortunately this only impacts DEV builds.\n                // Unfortunately it makes React unusably slow for some applications.\n                // To work around this, initialize the fields below with doubles.\n                //\n                // Learn more about this here:\n                // https://github.com/facebook/react/issues/14365\n                // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n                this.actualDuration = Number.NaN;\n                this.actualStartTime = Number.NaN;\n                this.selfBaseDuration = Number.NaN;\n                this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n                // This won't trigger the performance cliff mentioned above,\n                // and it simplifies other profiler code (including DevTools).\n                this.actualDuration = 0;\n                this.actualStartTime = -1;\n                this.selfBaseDuration = 0;\n                this.treeBaseDuration = 0;\n            }\n            {\n                // This isn't directly used but is handy for debugging internals:\n                this._debugSource = null;\n                this._debugOwner = null;\n                this._debugNeedsRemount = false;\n                this._debugHookTypes = null;\n                if (!hasBadMapPolyfill && typeof Object.preventExtensions === \"function\") {\n                    Object.preventExtensions(this);\n                }\n            }\n        } // This is a constructor function, rather than a POJO constructor, still\n        // please ensure we do the following:\n        // 1) Nobody should add any instance methods on this. Instance methods can be\n        //    more difficult to predict when they get optimized and they are almost\n        //    never inlined properly in static compilers.\n        // 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n        //    always know when it is a fiber.\n        // 3) We might want to experiment with using numeric keys since they are easier\n        //    to optimize in a non-JIT environment.\n        // 4) We can easily go from a constructor to a createFiber object literal if that\n        //    is faster.\n        // 5) It should be easy to port this to a C struct and keep a C implementation\n        //    compatible.\n        var createFiber = function(tag, pendingProps, key, mode) {\n            // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n            return new FiberNode(tag, pendingProps, key, mode);\n        };\n        function shouldConstruct$1(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function isSimpleFunctionComponent(type) {\n            return typeof type === \"function\" && !shouldConstruct$1(type) && type.defaultProps === undefined;\n        }\n        function resolveLazyComponentTag(Component) {\n            if (typeof Component === \"function\") {\n                return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;\n            } else if (Component !== undefined && Component !== null) {\n                var $$typeof = Component.$$typeof;\n                if ($$typeof === REACT_FORWARD_REF_TYPE) {\n                    return ForwardRef;\n                }\n                if ($$typeof === REACT_MEMO_TYPE) {\n                    return MemoComponent;\n                }\n            }\n            return IndeterminateComponent;\n        } // This is used to create an alternate fiber to do work on.\n        function createWorkInProgress(current, pendingProps) {\n            var workInProgress = current.alternate;\n            if (workInProgress === null) {\n                // We use a double buffering pooling technique because we know that we'll\n                // only ever need at most two versions of a tree. We pool the \"other\" unused\n                // node that we're free to reuse. This is lazily created to avoid allocating\n                // extra objects for things that are never updated. It also allow us to\n                // reclaim the extra memory if needed.\n                workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n                workInProgress.elementType = current.elementType;\n                workInProgress.type = current.type;\n                workInProgress.stateNode = current.stateNode;\n                {\n                    // DEV-only fields\n                    workInProgress._debugSource = current._debugSource;\n                    workInProgress._debugOwner = current._debugOwner;\n                    workInProgress._debugHookTypes = current._debugHookTypes;\n                }\n                workInProgress.alternate = current;\n                current.alternate = workInProgress;\n            } else {\n                workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n                workInProgress.type = current.type; // We already have an alternate.\n                // Reset the effect tag.\n                workInProgress.flags = NoFlags; // The effects are no longer valid.\n                workInProgress.subtreeFlags = NoFlags;\n                workInProgress.deletions = null;\n                {\n                    // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n                    // This prevents time from endlessly accumulating in new commits.\n                    // This has the downside of resetting values for different priority renders,\n                    // But works for yielding (the common case) and should support resuming.\n                    workInProgress.actualDuration = 0;\n                    workInProgress.actualStartTime = -1;\n                }\n            } // Reset all effects except static ones.\n            // Static effects are not specific to a render.\n            workInProgress.flags = current.flags & StaticMask;\n            workInProgress.childLanes = current.childLanes;\n            workInProgress.lanes = current.lanes;\n            workInProgress.child = current.child;\n            workInProgress.memoizedProps = current.memoizedProps;\n            workInProgress.memoizedState = current.memoizedState;\n            workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n            // it cannot be shared with the current fiber.\n            var currentDependencies = current.dependencies;\n            workInProgress.dependencies = currentDependencies === null ? null : {\n                lanes: currentDependencies.lanes,\n                firstContext: currentDependencies.firstContext\n            }; // These will be overridden during the parent's reconciliation\n            workInProgress.sibling = current.sibling;\n            workInProgress.index = current.index;\n            workInProgress.ref = current.ref;\n            {\n                workInProgress.selfBaseDuration = current.selfBaseDuration;\n                workInProgress.treeBaseDuration = current.treeBaseDuration;\n            }\n            {\n                workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n                switch(workInProgress.tag){\n                    case IndeterminateComponent:\n                    case FunctionComponent:\n                    case SimpleMemoComponent:\n                        workInProgress.type = resolveFunctionForHotReloading(current.type);\n                        break;\n                    case ClassComponent:\n                        workInProgress.type = resolveClassForHotReloading(current.type);\n                        break;\n                    case ForwardRef:\n                        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n                        break;\n                }\n            }\n            return workInProgress;\n        } // Used to reuse a Fiber for a second pass.\n        function resetWorkInProgress(workInProgress, renderLanes) {\n            // This resets the Fiber to what createFiber or createWorkInProgress would\n            // have set the values to before during the first pass. Ideally this wouldn't\n            // be necessary but unfortunately many code paths reads from the workInProgress\n            // when they should be reading from current and writing to workInProgress.\n            // We assume pendingProps, index, key, ref, return are still untouched to\n            // avoid doing another reconciliation.\n            // Reset the effect flags but keep any Placement tags, since that's something\n            // that child fiber is setting, not the reconciliation.\n            workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n            var current = workInProgress.alternate;\n            if (current === null) {\n                // Reset to createFiber's initial values.\n                workInProgress.childLanes = NoLanes;\n                workInProgress.lanes = renderLanes;\n                workInProgress.child = null;\n                workInProgress.subtreeFlags = NoFlags;\n                workInProgress.memoizedProps = null;\n                workInProgress.memoizedState = null;\n                workInProgress.updateQueue = null;\n                workInProgress.dependencies = null;\n                workInProgress.stateNode = null;\n                {\n                    // Note: We don't reset the actualTime counts. It's useful to accumulate\n                    // actual time across multiple render passes.\n                    workInProgress.selfBaseDuration = 0;\n                    workInProgress.treeBaseDuration = 0;\n                }\n            } else {\n                // Reset to the cloned values that createWorkInProgress would've.\n                workInProgress.childLanes = current.childLanes;\n                workInProgress.lanes = current.lanes;\n                workInProgress.child = current.child;\n                workInProgress.subtreeFlags = NoFlags;\n                workInProgress.deletions = null;\n                workInProgress.memoizedProps = current.memoizedProps;\n                workInProgress.memoizedState = current.memoizedState;\n                workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n                workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n                // it cannot be shared with the current fiber.\n                var currentDependencies = current.dependencies;\n                workInProgress.dependencies = currentDependencies === null ? null : {\n                    lanes: currentDependencies.lanes,\n                    firstContext: currentDependencies.firstContext\n                };\n                {\n                    // Note: We don't reset the actualTime counts. It's useful to accumulate\n                    // actual time across multiple render passes.\n                    workInProgress.selfBaseDuration = current.selfBaseDuration;\n                    workInProgress.treeBaseDuration = current.treeBaseDuration;\n                }\n            }\n            return workInProgress;\n        }\n        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n            var mode;\n            if (tag === ConcurrentRoot) {\n                mode = ConcurrentMode;\n                if (isStrictMode === true) {\n                    mode |= StrictLegacyMode;\n                    {\n                        mode |= StrictEffectsMode;\n                    }\n                }\n            } else {\n                mode = NoMode;\n            }\n            if (isDevToolsPresent) {\n                // Always collect profile timings when DevTools are present.\n                // This enables DevTools to start capturing timing at any point–\n                // Without some nodes in the tree having empty base times.\n                mode |= ProfileMode;\n            }\n            return createFiber(HostRoot, null, null, mode);\n        }\n        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {\n            var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n            var resolvedType = type;\n            if (typeof type === \"function\") {\n                if (shouldConstruct$1(type)) {\n                    fiberTag = ClassComponent;\n                    {\n                        resolvedType = resolveClassForHotReloading(resolvedType);\n                    }\n                } else {\n                    {\n                        resolvedType = resolveFunctionForHotReloading(resolvedType);\n                    }\n                }\n            } else if (typeof type === \"string\") {\n                fiberTag = HostComponent;\n            } else {\n                getTag: switch(type){\n                    case REACT_FRAGMENT_TYPE:\n                        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n                    case REACT_STRICT_MODE_TYPE:\n                        fiberTag = Mode;\n                        mode |= StrictLegacyMode;\n                        if ((mode & ConcurrentMode) !== NoMode) {\n                            // Strict effects should never run on legacy roots\n                            mode |= StrictEffectsMode;\n                        }\n                        break;\n                    case REACT_PROFILER_TYPE:\n                        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n                    case REACT_SUSPENSE_TYPE:\n                        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n                    case REACT_SUSPENSE_LIST_TYPE:\n                        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n                    case REACT_OFFSCREEN_TYPE:\n                        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n                    case REACT_LEGACY_HIDDEN_TYPE:\n                    // eslint-disable-next-line no-fallthrough\n                    case REACT_SCOPE_TYPE:\n                    // eslint-disable-next-line no-fallthrough\n                    case REACT_CACHE_TYPE:\n                    // eslint-disable-next-line no-fallthrough\n                    case REACT_TRACING_MARKER_TYPE:\n                    // eslint-disable-next-line no-fallthrough\n                    case REACT_DEBUG_TRACING_MODE_TYPE:\n                    // eslint-disable-next-line no-fallthrough\n                    default:\n                        {\n                            if (typeof type === \"object\" && type !== null) {\n                                switch(type.$$typeof){\n                                    case REACT_PROVIDER_TYPE:\n                                        fiberTag = ContextProvider;\n                                        break getTag;\n                                    case REACT_CONTEXT_TYPE:\n                                        // This is a consumer\n                                        fiberTag = ContextConsumer;\n                                        break getTag;\n                                    case REACT_FORWARD_REF_TYPE:\n                                        fiberTag = ForwardRef;\n                                        {\n                                            resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                                        }\n                                        break getTag;\n                                    case REACT_MEMO_TYPE:\n                                        fiberTag = MemoComponent;\n                                        break getTag;\n                                    case REACT_LAZY_TYPE:\n                                        fiberTag = LazyComponent;\n                                        resolvedType = null;\n                                        break getTag;\n                                }\n                            }\n                            var info = \"\";\n                            {\n                                if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                                    info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and \" + \"named imports.\";\n                                }\n                                var ownerName = owner ? getComponentNameFromFiber(owner) : null;\n                                if (ownerName) {\n                                    info += \"\\n\\nCheck the render method of `\" + ownerName + \"`.\";\n                                }\n                            }\n                            throw new Error(\"Element type is invalid: expected a string (for built-in \" + \"components) or a class/function (for composite components) \" + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n                        }\n                }\n            }\n            var fiber = createFiber(fiberTag, pendingProps, key, mode);\n            fiber.elementType = type;\n            fiber.type = resolvedType;\n            fiber.lanes = lanes;\n            {\n                fiber._debugOwner = owner;\n            }\n            return fiber;\n        }\n        function createFiberFromElement(element, mode, lanes) {\n            var owner = null;\n            {\n                owner = element._owner;\n            }\n            var type = element.type;\n            var key = element.key;\n            var pendingProps = element.props;\n            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n            {\n                fiber._debugSource = element._source;\n                fiber._debugOwner = element._owner;\n            }\n            return fiber;\n        }\n        function createFiberFromFragment(elements, mode, lanes, key) {\n            var fiber = createFiber(Fragment, elements, key, mode);\n            fiber.lanes = lanes;\n            return fiber;\n        }\n        function createFiberFromProfiler(pendingProps, mode, lanes, key) {\n            {\n                if (typeof pendingProps.id !== \"string\") {\n                    error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n                }\n            }\n            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n            fiber.elementType = REACT_PROFILER_TYPE;\n            fiber.lanes = lanes;\n            {\n                fiber.stateNode = {\n                    effectDuration: 0,\n                    passiveEffectDuration: 0\n                };\n            }\n            return fiber;\n        }\n        function createFiberFromSuspense(pendingProps, mode, lanes, key) {\n            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n            fiber.elementType = REACT_SUSPENSE_TYPE;\n            fiber.lanes = lanes;\n            return fiber;\n        }\n        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n            fiber.lanes = lanes;\n            return fiber;\n        }\n        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n            fiber.elementType = REACT_OFFSCREEN_TYPE;\n            fiber.lanes = lanes;\n            var primaryChildInstance = {};\n            fiber.stateNode = primaryChildInstance;\n            return fiber;\n        }\n        function createFiberFromText(content, mode, lanes) {\n            var fiber = createFiber(HostText, content, null, mode);\n            fiber.lanes = lanes;\n            return fiber;\n        }\n        function createFiberFromHostInstanceForDeletion() {\n            var fiber = createFiber(HostComponent, null, null, NoMode);\n            fiber.elementType = \"DELETED\";\n            return fiber;\n        }\n        function createFiberFromDehydratedFragment(dehydratedNode) {\n            var fiber = createFiber(DehydratedFragment, null, null, NoMode);\n            fiber.stateNode = dehydratedNode;\n            return fiber;\n        }\n        function createFiberFromPortal(portal, mode, lanes) {\n            var pendingProps = portal.children !== null ? portal.children : [];\n            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n            fiber.lanes = lanes;\n            fiber.stateNode = {\n                containerInfo: portal.containerInfo,\n                pendingChildren: null,\n                // Used by persistent updates\n                implementation: portal.implementation\n            };\n            return fiber;\n        } // Used for stashing WIP properties to replay failed work in DEV.\n        function assignFiberPropertiesInDEV(target, source) {\n            if (target === null) {\n                // This Fiber's initial properties will always be overwritten.\n                // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n                target = createFiber(IndeterminateComponent, null, null, NoMode);\n            } // This is intentionally written as a list of all properties.\n            // We tried to use Object.assign() instead but this is called in\n            // the hottest path, and Object.assign() was too slow:\n            // https://github.com/facebook/react/issues/12502\n            // This code is DEV-only so size is not a concern.\n            target.tag = source.tag;\n            target.key = source.key;\n            target.elementType = source.elementType;\n            target.type = source.type;\n            target.stateNode = source.stateNode;\n            target.return = source.return;\n            target.child = source.child;\n            target.sibling = source.sibling;\n            target.index = source.index;\n            target.ref = source.ref;\n            target.pendingProps = source.pendingProps;\n            target.memoizedProps = source.memoizedProps;\n            target.updateQueue = source.updateQueue;\n            target.memoizedState = source.memoizedState;\n            target.dependencies = source.dependencies;\n            target.mode = source.mode;\n            target.flags = source.flags;\n            target.subtreeFlags = source.subtreeFlags;\n            target.deletions = source.deletions;\n            target.lanes = source.lanes;\n            target.childLanes = source.childLanes;\n            target.alternate = source.alternate;\n            {\n                target.actualDuration = source.actualDuration;\n                target.actualStartTime = source.actualStartTime;\n                target.selfBaseDuration = source.selfBaseDuration;\n                target.treeBaseDuration = source.treeBaseDuration;\n            }\n            target._debugSource = source._debugSource;\n            target._debugOwner = source._debugOwner;\n            target._debugNeedsRemount = source._debugNeedsRemount;\n            target._debugHookTypes = source._debugHookTypes;\n            return target;\n        }\n        function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {\n            this.tag = tag;\n            this.containerInfo = containerInfo;\n            this.pendingChildren = null;\n            this.current = null;\n            this.pingCache = null;\n            this.finishedWork = null;\n            this.timeoutHandle = noTimeout;\n            this.context = null;\n            this.pendingContext = null;\n            this.callbackNode = null;\n            this.callbackPriority = NoLane;\n            this.eventTimes = createLaneMap(NoLanes);\n            this.expirationTimes = createLaneMap(NoTimestamp);\n            this.pendingLanes = NoLanes;\n            this.suspendedLanes = NoLanes;\n            this.pingedLanes = NoLanes;\n            this.expiredLanes = NoLanes;\n            this.mutableReadLanes = NoLanes;\n            this.finishedLanes = NoLanes;\n            this.entangledLanes = NoLanes;\n            this.entanglements = createLaneMap(NoLanes);\n            this.identifierPrefix = identifierPrefix;\n            this.onRecoverableError = onRecoverableError;\n            if (supportsHydration) {\n                this.mutableSourceEagerHydrationData = null;\n            }\n            {\n                this.effectDuration = 0;\n                this.passiveEffectDuration = 0;\n            }\n            {\n                this.memoizedUpdaters = new Set();\n                var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];\n                for(var _i = 0; _i < TotalLanes; _i++){\n                    pendingUpdatersLaneMap.push(new Set());\n                }\n            }\n            {\n                switch(tag){\n                    case ConcurrentRoot:\n                        this._debugRootType = hydrate ? \"hydrateRoot()\" : \"createRoot()\";\n                        break;\n                    case LegacyRoot:\n                        this._debugRootType = hydrate ? \"hydrate()\" : \"render()\";\n                        break;\n                }\n            }\n        }\n        function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // host config, but because they are passed in at runtime, we have to thread\n        // them through the root constructor. Perhaps we should put them all into a\n        // single type, like a DynamicHostConfig that is defined by the renderer.\n        identifierPrefix, onRecoverableError, transitionCallbacks) {\n            var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);\n            // stateNode is any.\n            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n            root.current = uninitializedFiber;\n            uninitializedFiber.stateNode = root;\n            {\n                var _initialState = {\n                    element: initialChildren,\n                    isDehydrated: hydrate,\n                    cache: null,\n                    // not enabled yet\n                    transitions: null\n                };\n                uninitializedFiber.memoizedState = _initialState;\n            }\n            initializeUpdateQueue(uninitializedFiber);\n            return root;\n        }\n        var ReactVersion = \"18.0.0-fc46dba67-20220329\";\n        function createPortal(children, containerInfo, implementation) {\n            var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n            {\n                checkKeyStringCoercion(key);\n            }\n            return {\n                // This tag allow us to uniquely identify this as a React Portal\n                $$typeof: REACT_PORTAL_TYPE,\n                key: key == null ? null : \"\" + key,\n                children: children,\n                containerInfo: containerInfo,\n                implementation: implementation\n            };\n        }\n        var didWarnAboutNestedUpdates;\n        var didWarnAboutFindNodeInStrictMode;\n        {\n            didWarnAboutNestedUpdates = false;\n            didWarnAboutFindNodeInStrictMode = {};\n        }\n        function getContextForSubtree(parentComponent) {\n            if (!parentComponent) {\n                return emptyContextObject;\n            }\n            var fiber = get(parentComponent);\n            var parentContext = findCurrentUnmaskedContext(fiber);\n            if (fiber.tag === ClassComponent) {\n                var Component = fiber.type;\n                if (isContextProvider(Component)) {\n                    return processChildContext(fiber, Component, parentContext);\n                }\n            }\n            return parentContext;\n        }\n        function findHostInstance(component) {\n            var fiber = get(component);\n            if (fiber === undefined) {\n                if (typeof component.render === \"function\") {\n                    throw new Error(\"Unable to find node on an unmounted component.\");\n                } else {\n                    var keys = Object.keys(component).join(\",\");\n                    throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n                }\n            }\n            var hostFiber = findCurrentHostFiber(fiber);\n            if (hostFiber === null) {\n                return null;\n            }\n            return hostFiber.stateNode;\n        }\n        function findHostInstanceWithWarning(component, methodName) {\n            {\n                var fiber = get(component);\n                if (fiber === undefined) {\n                    if (typeof component.render === \"function\") {\n                        throw new Error(\"Unable to find node on an unmounted component.\");\n                    } else {\n                        var keys = Object.keys(component).join(\",\");\n                        throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n                    }\n                }\n                var hostFiber = findCurrentHostFiber(fiber);\n                if (hostFiber === null) {\n                    return null;\n                }\n                if (hostFiber.mode & StrictLegacyMode) {\n                    var componentName = getComponentNameFromFiber(fiber) || \"Component\";\n                    if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n                        didWarnAboutFindNodeInStrictMode[componentName] = true;\n                        var previousFiber = current;\n                        try {\n                            setCurrentFiber(hostFiber);\n                            if (fiber.mode & StrictLegacyMode) {\n                                error(\"%s is deprecated in StrictMode. \" + \"%s was passed an instance of %s which is inside StrictMode. \" + \"Instead, add a ref directly to the element you want to reference. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-find-node\", methodName, methodName, componentName);\n                            } else {\n                                error(\"%s is deprecated in StrictMode. \" + \"%s was passed an instance of %s which renders StrictMode children. \" + \"Instead, add a ref directly to the element you want to reference. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-find-node\", methodName, methodName, componentName);\n                            }\n                        } finally{\n                            // Ideally this should reset to previous but this shouldn't be called in\n                            // render and there's another warning for that anyway.\n                            if (previousFiber) {\n                                setCurrentFiber(previousFiber);\n                            } else {\n                                resetCurrentFiber();\n                            }\n                        }\n                    }\n                }\n                return hostFiber.stateNode;\n            }\n        }\n        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n            var hydrate = false;\n            var initialChildren = null;\n            return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\n        }\n        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n            var hydrate = true;\n            var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor\n            root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from\n            // a regular update because the initial render must match was was rendered\n            // on the server.\n            // NOTE: This update intentionally doesn't have a payload. We're only using\n            // the update to schedule work on the root fiber (and, for legacy roots, to\n            // enqueue the callback if one is provided).\n            var current = root.current;\n            var eventTime = requestEventTime();\n            var lane = requestUpdateLane(current);\n            var update = createUpdate(eventTime, lane);\n            update.callback = callback !== undefined && callback !== null ? callback : null;\n            enqueueUpdate(current, update);\n            scheduleInitialHydrationOnRoot(root, lane, eventTime);\n            return root;\n        }\n        function updateContainer(element, container, parentComponent, callback) {\n            {\n                onScheduleRoot(container, element);\n            }\n            var current$1 = container.current;\n            var eventTime = requestEventTime();\n            var lane = requestUpdateLane(current$1);\n            {\n                markRenderScheduled(lane);\n            }\n            var context = getContextForSubtree(parentComponent);\n            if (container.context === null) {\n                container.context = context;\n            } else {\n                container.pendingContext = context;\n            }\n            {\n                if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n                    didWarnAboutNestedUpdates = true;\n                    error(\"Render methods should be a pure function of props and state; \" + \"triggering nested component updates from render is not allowed. \" + \"If necessary, trigger nested updates in componentDidUpdate.\\n\\n\" + \"Check the render method of %s.\", getComponentNameFromFiber(current) || \"Unknown\");\n                }\n            }\n            var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property\n            // being called \"element\".\n            update.payload = {\n                element: element\n            };\n            callback = callback === undefined ? null : callback;\n            if (callback !== null) {\n                {\n                    if (typeof callback !== \"function\") {\n                        error(\"render(...): Expected the last optional `callback` argument to be a \" + \"function. Instead received: %s.\", callback);\n                    }\n                }\n                update.callback = callback;\n            }\n            enqueueUpdate(current$1, update);\n            var root = scheduleUpdateOnFiber(current$1, lane, eventTime);\n            if (root !== null) {\n                entangleTransitions(root, current$1, lane);\n            }\n            return lane;\n        }\n        function getPublicRootInstance(container) {\n            var containerFiber = container.current;\n            if (!containerFiber.child) {\n                return null;\n            }\n            switch(containerFiber.child.tag){\n                case HostComponent:\n                    return getPublicInstance(containerFiber.child.stateNode);\n                default:\n                    return containerFiber.child.stateNode;\n            }\n        }\n        function attemptSynchronousHydration(fiber) {\n            switch(fiber.tag){\n                case HostRoot:\n                    var root = fiber.stateNode;\n                    if (isRootDehydrated(root)) {\n                        // Flush the first scheduled \"update\".\n                        var lanes = getHighestPriorityPendingLanes(root);\n                        flushRoot(root, lanes);\n                    }\n                    break;\n                case SuspenseComponent:\n                    var eventTime = requestEventTime();\n                    flushSync(function() {\n                        return scheduleUpdateOnFiber(fiber, SyncLane, eventTime);\n                    }); // If we're still blocked after this, we need to increase\n                    // the priority of any promises resolving within this\n                    // boundary so that they next attempt also has higher pri.\n                    var retryLane = SyncLane;\n                    markRetryLaneIfNotHydrated(fiber, retryLane);\n                    break;\n            }\n        }\n        function markRetryLaneImpl(fiber, retryLane) {\n            var suspenseState = fiber.memoizedState;\n            if (suspenseState !== null && suspenseState.dehydrated !== null) {\n                suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);\n            }\n        } // Increases the priority of thenables when they resolve within this boundary.\n        function markRetryLaneIfNotHydrated(fiber, retryLane) {\n            markRetryLaneImpl(fiber, retryLane);\n            var alternate = fiber.alternate;\n            if (alternate) {\n                markRetryLaneImpl(alternate, retryLane);\n            }\n        }\n        function attemptContinuousHydration(fiber) {\n            if (fiber.tag !== SuspenseComponent) {\n                // We ignore HostRoots here because we can't increase\n                // their priority and they should not suspend on I/O,\n                // since you have to wrap anything that might suspend in\n                // Suspense.\n                return;\n            }\n            var eventTime = requestEventTime();\n            var lane = SelectiveHydrationLane;\n            scheduleUpdateOnFiber(fiber, lane, eventTime);\n            markRetryLaneIfNotHydrated(fiber, lane);\n        }\n        function attemptHydrationAtCurrentPriority(fiber) {\n            if (fiber.tag !== SuspenseComponent) {\n                // We ignore HostRoots here because we can't increase\n                // their priority other than synchronously flush it.\n                return;\n            }\n            var eventTime = requestEventTime();\n            var lane = requestUpdateLane(fiber);\n            scheduleUpdateOnFiber(fiber, lane, eventTime);\n            markRetryLaneIfNotHydrated(fiber, lane);\n        }\n        function findHostInstanceWithNoPortals(fiber) {\n            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n            if (hostFiber === null) {\n                return null;\n            }\n            return hostFiber.stateNode;\n        }\n        var shouldErrorImpl = function(fiber) {\n            return null;\n        };\n        function shouldError(fiber) {\n            return shouldErrorImpl(fiber);\n        }\n        var shouldSuspendImpl = function(fiber) {\n            return false;\n        };\n        function shouldSuspend(fiber) {\n            return shouldSuspendImpl(fiber);\n        }\n        var overrideHookState = null;\n        var overrideHookStateDeletePath = null;\n        var overrideHookStateRenamePath = null;\n        var overrideProps = null;\n        var overridePropsDeletePath = null;\n        var overridePropsRenamePath = null;\n        var scheduleUpdate = null;\n        var setErrorHandler = null;\n        var setSuspenseHandler = null;\n        {\n            var copyWithDeleteImpl = function(obj, path, index) {\n                var key = path[index];\n                var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n                if (index + 1 === path.length) {\n                    if (isArray(updated)) {\n                        updated.splice(key, 1);\n                    } else {\n                        delete updated[key];\n                    }\n                    return updated;\n                } // $FlowFixMe number or string is fine here\n                updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n                return updated;\n            };\n            var copyWithDelete = function(obj, path) {\n                return copyWithDeleteImpl(obj, path, 0);\n            };\n            var copyWithRenameImpl = function(obj, oldPath, newPath, index) {\n                var oldKey = oldPath[index];\n                var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n                if (index + 1 === oldPath.length) {\n                    var newKey = newPath[index]; // $FlowFixMe number or string is fine here\n                    updated[newKey] = updated[oldKey];\n                    if (isArray(updated)) {\n                        updated.splice(oldKey, 1);\n                    } else {\n                        delete updated[oldKey];\n                    }\n                } else {\n                    // $FlowFixMe number or string is fine here\n                    updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);\n                }\n                return updated;\n            };\n            var copyWithRename = function(obj, oldPath, newPath) {\n                if (oldPath.length !== newPath.length) {\n                    warn(\"copyWithRename() expects paths of the same length\");\n                    return;\n                } else {\n                    for(var i = 0; i < newPath.length - 1; i++){\n                        if (oldPath[i] !== newPath[i]) {\n                            warn(\"copyWithRename() expects paths to be the same except for the deepest key\");\n                            return;\n                        }\n                    }\n                }\n                return copyWithRenameImpl(obj, oldPath, newPath, 0);\n            };\n            var copyWithSetImpl = function(obj, path, index, value) {\n                if (index >= path.length) {\n                    return value;\n                }\n                var key = path[index];\n                var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here\n                updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n                return updated;\n            };\n            var copyWithSet = function(obj, path, value) {\n                return copyWithSetImpl(obj, path, 0, value);\n            };\n            var findHook = function(fiber, id) {\n                // For now, the \"id\" of stateful hooks is just the stateful hook index.\n                // This may change in the future with e.g. nested hooks.\n                var currentHook = fiber.memoizedState;\n                while(currentHook !== null && id > 0){\n                    currentHook = currentHook.next;\n                    id--;\n                }\n                return currentHook;\n            }; // Support DevTools editable values for useState and useReducer.\n            overrideHookState = function(fiber, id, path, value) {\n                var hook = findHook(fiber, id);\n                if (hook !== null) {\n                    var newState = copyWithSet(hook.memoizedState, path, value);\n                    hook.memoizedState = newState;\n                    hook.baseState = newState; // We aren't actually adding an update to the queue,\n                    // because there is no update we can add for useReducer hooks that won't trigger an error.\n                    // (There's no appropriate action type for DevTools overrides.)\n                    // As a result though, React will see the scheduled update as a noop and bailout.\n                    // Shallow cloning props works as a workaround for now to bypass the bailout check.\n                    fiber.memoizedProps = assign({}, fiber.memoizedProps);\n                    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n                }\n            };\n            overrideHookStateDeletePath = function(fiber, id, path) {\n                var hook = findHook(fiber, id);\n                if (hook !== null) {\n                    var newState = copyWithDelete(hook.memoizedState, path);\n                    hook.memoizedState = newState;\n                    hook.baseState = newState; // We aren't actually adding an update to the queue,\n                    // because there is no update we can add for useReducer hooks that won't trigger an error.\n                    // (There's no appropriate action type for DevTools overrides.)\n                    // As a result though, React will see the scheduled update as a noop and bailout.\n                    // Shallow cloning props works as a workaround for now to bypass the bailout check.\n                    fiber.memoizedProps = assign({}, fiber.memoizedProps);\n                    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n                }\n            };\n            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {\n                var hook = findHook(fiber, id);\n                if (hook !== null) {\n                    var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n                    hook.memoizedState = newState;\n                    hook.baseState = newState; // We aren't actually adding an update to the queue,\n                    // because there is no update we can add for useReducer hooks that won't trigger an error.\n                    // (There's no appropriate action type for DevTools overrides.)\n                    // As a result though, React will see the scheduled update as a noop and bailout.\n                    // Shallow cloning props works as a workaround for now to bypass the bailout check.\n                    fiber.memoizedProps = assign({}, fiber.memoizedProps);\n                    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n                }\n            }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n            overrideProps = function(fiber, path, value) {\n                fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n                if (fiber.alternate) {\n                    fiber.alternate.pendingProps = fiber.pendingProps;\n                }\n                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n            };\n            overridePropsDeletePath = function(fiber, path) {\n                fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n                if (fiber.alternate) {\n                    fiber.alternate.pendingProps = fiber.pendingProps;\n                }\n                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n            };\n            overridePropsRenamePath = function(fiber, oldPath, newPath) {\n                fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n                if (fiber.alternate) {\n                    fiber.alternate.pendingProps = fiber.pendingProps;\n                }\n                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n            };\n            scheduleUpdate = function(fiber) {\n                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n            };\n            setErrorHandler = function(newShouldErrorImpl) {\n                shouldErrorImpl = newShouldErrorImpl;\n            };\n            setSuspenseHandler = function(newShouldSuspendImpl) {\n                shouldSuspendImpl = newShouldSuspendImpl;\n            };\n        }\n        function findHostInstanceByFiber(fiber) {\n            var hostFiber = findCurrentHostFiber(fiber);\n            if (hostFiber === null) {\n                return null;\n            }\n            return hostFiber.stateNode;\n        }\n        function emptyFindFiberByHostInstance(instance) {\n            return null;\n        }\n        function getCurrentFiberForDevTools() {\n            return current;\n        }\n        function injectIntoDevTools(devToolsConfig) {\n            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n            var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n            return injectInternals({\n                bundleType: devToolsConfig.bundleType,\n                version: devToolsConfig.version,\n                rendererPackageName: devToolsConfig.rendererPackageName,\n                rendererConfig: devToolsConfig.rendererConfig,\n                overrideHookState: overrideHookState,\n                overrideHookStateDeletePath: overrideHookStateDeletePath,\n                overrideHookStateRenamePath: overrideHookStateRenamePath,\n                overrideProps: overrideProps,\n                overridePropsDeletePath: overridePropsDeletePath,\n                overridePropsRenamePath: overridePropsRenamePath,\n                setErrorHandler: setErrorHandler,\n                setSuspenseHandler: setSuspenseHandler,\n                scheduleUpdate: scheduleUpdate,\n                currentDispatcherRef: ReactCurrentDispatcher,\n                findHostInstanceByFiber: findHostInstanceByFiber,\n                findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n                // React Refresh\n                findHostInstancesForRefresh: findHostInstancesForRefresh,\n                scheduleRefresh: scheduleRefresh,\n                scheduleRoot: scheduleRoot,\n                setRefreshHandler: setRefreshHandler,\n                // Enables DevTools to append owner stacks to error messages in DEV mode.\n                getCurrentFiber: getCurrentFiberForDevTools,\n                // Enables DevTools to detect reconciler version rather than renderer version\n                // which may not match for third party renderers.\n                reconcilerVersion: ReactVersion\n            });\n        }\n        exports.attemptContinuousHydration = attemptContinuousHydration;\n        exports.attemptHydrationAtCurrentPriority = attemptHydrationAtCurrentPriority;\n        exports.attemptSynchronousHydration = attemptSynchronousHydration;\n        exports.batchedUpdates = batchedUpdates;\n        exports.createComponentSelector = createComponentSelector;\n        exports.createContainer = createContainer;\n        exports.createHasPseudoClassSelector = createHasPseudoClassSelector;\n        exports.createHydrationContainer = createHydrationContainer;\n        exports.createPortal = createPortal;\n        exports.createRoleSelector = createRoleSelector;\n        exports.createTestNameSelector = createTestNameSelector;\n        exports.createTextSelector = createTextSelector;\n        exports.deferredUpdates = deferredUpdates;\n        exports.discreteUpdates = discreteUpdates;\n        exports.findAllNodes = findAllNodes;\n        exports.findBoundingRects = findBoundingRects;\n        exports.findHostInstance = findHostInstance;\n        exports.findHostInstanceWithNoPortals = findHostInstanceWithNoPortals;\n        exports.findHostInstanceWithWarning = findHostInstanceWithWarning;\n        exports.flushControlled = flushControlled;\n        exports.flushPassiveEffects = flushPassiveEffects;\n        exports.flushSync = flushSync;\n        exports.focusWithin = focusWithin;\n        exports.getCurrentUpdatePriority = getCurrentUpdatePriority;\n        exports.getFindAllNodesFailureDescription = getFindAllNodesFailureDescription;\n        exports.getPublicRootInstance = getPublicRootInstance;\n        exports.injectIntoDevTools = injectIntoDevTools;\n        exports.isAlreadyRendering = isAlreadyRendering;\n        exports.observeVisibleRects = observeVisibleRects;\n        exports.registerMutableSourceForHydration = registerMutableSourceForHydration;\n        exports.runWithPriority = runWithPriority;\n        exports.shouldError = shouldError;\n        exports.shouldSuspend = shouldSuspend;\n        exports.updateContainer = updateContainer;\n        return exports;\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/react-reconciler@0.27.0_react@18.3.1/node_modules/react-reconciler/cjs/react-reconciler.development.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/react-reconciler@0.27.0_react@18.3.1/node_modules/react-reconciler/constants.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-reconciler@0.27.0_react@18.3.1/node_modules/react-reconciler/constants.js ***!
  \************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-reconciler-constants.development.js */ \"(ssr)/./node_modules/.pnpm/react-reconciler@0.27.0_react@18.3.1/node_modules/react-reconciler/cjs/react-reconciler-constants.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcmVhY3QtcmVjb25jaWxlckAwLjI3LjBfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9yZWFjdC1yZWNvbmNpbGVyL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLEtBQXlCLEVBQWMsRUFFMUMsTUFBTTtJQUNMQywwT0FBeUI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIzbGFuY2VyLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYWN0LXJlY29uY2lsZXJAMC4yNy4wX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvcmVhY3QtcmVjb25jaWxlci9jb25zdGFudHMuanM/NTlkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtcmVjb25jaWxlci1jb25zdGFudHMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtcmVjb25jaWxlci1jb25zdGFudHMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/react-reconciler@0.27.0_react@18.3.1/node_modules/react-reconciler/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/react-reconciler@0.27.0_react@18.3.1/node_modules/react-reconciler/index.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-reconciler@0.27.0_react@18.3.1/node_modules/react-reconciler/index.js ***!
  \********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-reconciler.development.js */ \"(ssr)/./node_modules/.pnpm/react-reconciler@0.27.0_react@18.3.1/node_modules/react-reconciler/cjs/react-reconciler.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcmVhY3QtcmVjb25jaWxlckAwLjI3LjBfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9yZWFjdC1yZWNvbmNpbGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLHNOQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYjNsYW5jZXIvLi9ub2RlX21vZHVsZXMvLnBucG0vcmVhY3QtcmVjb25jaWxlckAwLjI3LjBfcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9yZWFjdC1yZWNvbmNpbGVyL2luZGV4LmpzPzQ2MDgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LXJlY29uY2lsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtcmVjb25jaWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/react-reconciler@0.27.0_react@18.3.1/node_modules/react-reconciler/index.js\n");

/***/ })

};
;